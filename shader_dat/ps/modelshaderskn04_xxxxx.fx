sampler Color_1_sampler : register(s0);
sampler Shadow_Tex_sampler : register(s11);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float4 g_NormalWeightParam : register(c182);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_WeightParam : register(c181);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap1_sampler : register(s2);
sampler normalmap2_sampler : register(s3);
float4 point_light1 : register(c63);
float4 point_lightpos1 : register(c64);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float ss_scat_pow : register(c46);
float ss_scat_rate : register(c44);
float4 tile : register(c49);
sampler tripleMask_sampler : register(s1);
sampler weightmap1_sampler : register(s4);

struct PS_IN
{
	float4 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float3 r5;
	float3 r6;
	r0.xy = lerp(i.texcoord.zw, i.texcoord.xy, g_NormalWeightParam.zz);
	r0.zw = r0.xy * tile.xy;
	r0.xy = r0.xy + g_All_Offset.xy;
	r1 = tex2D(Color_1_sampler, r0);
	r2 = tex2D(normalmap2_sampler, r0.zwzw);
	r0.xy = lerp(r2.zw, r2.xy, g_NormalWeightParam.yy);
	r0.xy = r0.xy * 2 + -1;
	r2 = tex2D(weightmap1_sampler, r0.zwzw);
	r1.w = dot(r2.xyz, g_WeightParam.xyz);
	r2.x = r1.w * g_NormalWeightParam.x;
	r2.z = 1;
	r1.w = g_NormalWeightParam.x * r1.w + r2.z;
	r1.w = 1 / r1.w;
	r3 = tex2D(normalmap1_sampler, r0.zwzw);
	r4 = tex2D(tripleMask_sampler, r0.zwzw);
	r0.zw = r3.xy * 2 + -1;
	r0.xy = r0.xy * r2.xx + r0.zw;
	r0.xy = r1.ww * r0.xy;
	r2.x = r0.x * i.texcoord2.w;
	r2.y = -r0.y;
	r0.x = dot(r2.x, r2.x) + 0;
	r0.x = -r0.x + 1;
	r0.x = 1 / sqrt(r0.x);
	r0.x = 1 / r0.x;
	r3.xyz = i.texcoord3.xyz;
	r0.yzw = r3.yzx * i.texcoord2.zxy;
	r0.yzw = i.texcoord2.yzx * r3.zxy + -r0.yzw;
	r0.yzw = r0.yzw * r2.yyy;
	r0.yzw = r2.xxx * i.texcoord2.xyz + r0.yzw;
	r0.xyz = r0.xxx * i.texcoord3.xyz + r0.yzw;
	r0.w = dot(r0.xyz, r0.xyz);
	r0.w = 1 / sqrt(r0.w);
	r2.xyw = r0.www * r0.xyz;
	r0.x = r0.z * -r0.w + 1;
	r0.yzw = point_lightpos1.xyz + -i.texcoord1.xyz;
	r1.w = dot(r0.yzw, r0.yzw);
	r1.w = 1 / sqrt(r1.w);
	r0.yzw = r0.yzw * r1.www;
	r1.w = 1 / r1.w;
	r1.w = -r1.w + point_lightpos1.w;
	r1.w = r1.w * point_light1.w;
	r0.y = dot(r0.yzw, r2.xyw);
	r0.yzw = r0.yyy * point_light1.xyz;
	r0.yzw = r1.www * r0.yzw;
	r3.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r1.w = dot(r3.xyz, r3.xyz);
	r1.w = 1 / sqrt(r1.w);
	r3.xyz = r1.www * r3.xyz;
	r1.w = 1 / r1.w;
	r1.w = -r1.w + muzzle_lightpos.w;
	r1.w = r1.w * muzzle_light.w;
	r3.x = dot(r3.xyz, r2.xyw);
	r3.xyz = r3.xxx * muzzle_light.xyz;
	r0.yzw = r3.xyz * r1.www + r0.yzw;
	r1.w = 1 / i.texcoord7.w;
	r3.xy = r1.ww * i.texcoord7.xy;
	r3.xy = r3.xy * float2(0.5, -0.5) + 0.5;
	r3.xy = r3.xy + g_TargetUvParam.xy;
	r3 = tex2D(Shadow_Tex_sampler, r3);
	r1.w = r3.z + g_ShadowUse.x;
	r3.x = dot(lightpos.xyz, r2.xyw);
	r3.y = r3.x;
	r5.xyz = r3.yyy * light_Color.xyz;
	r0.yzw = r5.xyz * r1.www + r0.yzw;
	r3.zw = -r1.yy + r1.xz;
	r4.y = max(abs(r3.z), abs(r3.w));
	r3.z = r4.y + -0.015625;
	r3.w = (-r3.z >= 0) ? 0 : 1;
	r3.z = (r3.z >= 0) ? -0 : -1;
	r3.z = r3.z + r3.w;
	r3.z = (r3.z >= 0) ? -r3.z : -0;
	r1.xz = (r3.zz >= 0) ? r1.yy : r1.xz;
	r3.z = r3.y + -0.5;
	r4.y = max(r3.z, 0);
	r3.z = r4.y + r4.x;
	r5.xyz = r1.xyz * r3.zzz;
	r0.yzw = r0.yzw * r5.xyz;
	r0.yzw = r4.www * r0.yzw;
	r3.w = dot(lightpos.xyz, i.texcoord3.xyz);
	r3.x = -r3.w + r3.x;
	r3.x = r3.x + 1;
	r4.xyw = r4.xxx * r1.xyz;
	r1.xyz = r1.xyz + specularParam.www;
	r5.xyz = r4.xyw * ambient_rate.xyz;
	r4.xyw = r0.xxx * r4.xyw;
	r0.x = r0.x + -ss_scat_rate.x;
	r4.xyw = r4.xyw * ss_scat_pow.xxx;
	r5.xyz = r5.xyz * ambient_rate_rate.xyz;
	r0.yzw = r5.xyz * r3.xxx + r0.yzw;
	r3.x = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r3.x = 1 / sqrt(r3.x);
	r5.xyz = -i.texcoord1.xyz * r3.xxx + lightpos.xyz;
	r6.xyz = normalize(r5.xyz);
	r2.x = dot(r6.xyz, r2.xyw);
	r3.x = pow(r2.x, specularParam.z);
	r2.y = (-r3.y >= 0) ? 0 : 1;
	r2.w = r3.y * r2.y;
	r2.x = (-r2.x >= 0) ? 0 : r2.y;
	r2.x = r3.x * r2.x;
	r3.xyw = r2.www * light_Color.xyz;
	r2.xyw = r2.xxx * r3.xyw;
	r2.xyw = r4.zzz * r2.xyw;
	r2.xyw = r1.www * r2.xyw;
	r2.xyw = r3.zzz * r2.xyw;
	r1.w = abs(specularParam.x);
	r2.xyw = r1.www * r2.xyw;
	r0.yzw = r2.xyw * r1.xyz + r0.yzw;
	r1.x = r2.z + -ss_scat_rate.x;
	r1.x = 1 / r1.x;
	r1.x = r0.x * r1.x;
	r0.x = r0.x;
	r1.y = frac(-r0.x);
	r0.x = r0.x + r1.y;
	r0.x = r0.x * r1.x;
	r0.xyz = r4.xyw * r0.xxx + r0.yzw;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord1.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
