sampler Color_1_sampler : register(s0);
float4 Incidence_param : register(c45);
sampler Shadow_Tex_sampler : register(s11);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float4 g_NormalWeightParam : register(c182);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_WeightParam : register(c181);
float hll_rate : register(c44);
sampler incidence_sampler : register(s5);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap1_sampler : register(s2);
sampler normalmap2_sampler : register(s3);
float4 point_light1 : register(c63);
float4 point_lightpos1 : register(c64);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 tile : register(c46);
sampler tripleMask_sampler : register(s1);
sampler weightmap1_sampler : register(s4);

struct PS_IN
{
	float4 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float3 r6;
	float3 r7;
	r0.xy = lerp(i.texcoord.zw, i.texcoord.xy, g_NormalWeightParam.zz);
	r0.zw = r0.xy * tile.xy;
	r1 = tex2D(normalmap2_sampler, r0.zwzw);
	r2.xy = lerp(r1.zw, r1.xy, g_NormalWeightParam.yy);
	r1.xy = r2.xy * 2 + -1;
	r2 = tex2D(weightmap1_sampler, r0.zwzw);
	r1.z = dot(r2.xyz, g_WeightParam.xyz);
	r1.w = r1.z * g_NormalWeightParam.x;
	r2.z = 1;
	r1.z = g_NormalWeightParam.x * r1.z + r2.z;
	r1.z = 1 / r1.z;
	r2 = tex2D(normalmap1_sampler, r0.zwzw);
	r3 = tex2D(tripleMask_sampler, r0.zwzw);
	r0.zw = r2.xy * 2 + -1;
	r0.zw = r1.xy * r1.ww + r0.zw;
	r0.zw = r1.zz * r0.zw;
	r1.x = r0.z * i.texcoord2.w;
	r1.y = -r0.w;
	r0.z = dot(r1.z, r1.z) + 0;
	r0.z = -r0.z + 1;
	r0.z = 1 / sqrt(r0.z);
	r0.z = 1 / r0.z;
	r2.xyz = i.texcoord3.xyz;
	r4.xyz = r2.yzx * i.texcoord2.zxy;
	r2.xyz = i.texcoord2.yzx * r2.zxy + -r4.xyz;
	r1.yzw = r1.yyy * r2.xyz;
	r1.xyz = r1.xxx * i.texcoord2.xyz + r1.yzw;
	r1.xyz = r0.zzz * i.texcoord3.xyz + r1.xyz;
	r2.xyz = normalize(r1.xyz);
	r1.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r0.z = dot(r1.xyz, r1.xyz);
	r0.z = 1 / sqrt(r0.z);
	r1.xyz = r0.zzz * r1.xyz;
	r0.z = 1 / r0.z;
	r0.z = -r0.z + point_lightpos1.w;
	r0.z = r0.z * point_light1.w;
	r0.w = dot(r1.xyz, r2.xyz);
	r1.x = r0.w * 0.5 + 0.5;
	r1.x = r1.x * r1.x;
	r2.w = lerp(r1.x, r0.w, hll_rate.x);
	r1.xyz = r2.www * point_light1.xyz;
	r1.xyz = r0.zzz * r1.xyz;
	r4.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r0.z = dot(r4.xyz, r4.xyz);
	r0.z = 1 / sqrt(r0.z);
	r4.xyz = r0.zzz * r4.xyz;
	r0.z = 1 / r0.z;
	r0.z = -r0.z + muzzle_lightpos.w;
	r0.z = r0.z * muzzle_light.w;
	r0.w = dot(r4.xyz, r2.xyz);
	r1.w = r0.w * 0.5 + 0.5;
	r1.w = r1.w * r1.w;
	r2.w = lerp(r1.w, r0.w, hll_rate.x);
	r4.xyz = r2.www * muzzle_light.xyz;
	r1.xyz = r4.xyz * r0.zzz + r1.xyz;
	r0.z = 1 / i.texcoord7.w;
	r0.zw = r0.zz * i.texcoord7.xy;
	r0.zw = r0.zw * float2(0.5, -0.5) + 0.5;
	r0.zw = r0.zw + g_TargetUvParam.xy;
	r4 = tex2D(Shadow_Tex_sampler, r0.zwzw);
	r0.z = r4.z + g_ShadowUse.x;
	r0.w = dot(lightpos.xyz, r2.xyz);
	r1.w = r0.w;
	r2.w = r1.w * 0.5 + 0.5;
	r2.w = r2.w * r2.w;
	r3.y = lerp(r2.w, r1.w, hll_rate.x);
	r4.xyz = r3.yyy * light_Color.xyz;
	r1.xyz = r4.xyz * r0.zzz + r1.xyz;
	r2.w = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r2.w = 1 / sqrt(r2.w);
	r4.xyz = r2.www * -i.texcoord1.xyz;
	r5.xyz = -i.texcoord1.xyz * r2.www + lightpos.xyz;
	r6.xyz = normalize(r5.xyz);
	r2.w = dot(r6.xyz, r2.xyz);
	r2.x = dot(r2.xyz, r4.xyz);
	r2.y = dot(r4.xyz, lightpos.xyz);
	r2.y = r2.y + 1;
	r2.y = r2.y * Incidence_param.z;
	r2.y = r2.y * 0.5;
	r2.x = abs(r2.x);
	r2.z = r2.x * 0.9 + 0.05;
	r2.x = -r2.x + 1;
	r3.y = pow(r2.x, Incidence_param.x);
	r4 = tex2D(incidence_sampler, r0);
	r0.xy = r0.xy + g_All_Offset.xy;
	r5 = tex2D(Color_1_sampler, r0);
	r6.xyz = r2.zzz * r4.xyz;
	r6.xyz = r6.xyz * Incidence_param.yyy;
	r6.xyz = r3.yyy * r6.xyz;
	r0.xy = -r5.yy + r5.xz;
	r2.x = max(abs(r0.x), abs(r0.y));
	r0.x = r2.x + -0.015625;
	r0.y = (-r0.x >= 0) ? 0 : 1;
	r0.x = (r0.x >= 0) ? -0 : -1;
	r0.x = r0.x + r0.y;
	r0.x = (r0.x >= 0) ? -r0.x : -0;
	r5.xz = (r0.xx >= 0) ? r5.yy : r5.xz;
	r7.xyz = lerp(r5.xyz, r4.xyz, r2.yyy);
	r0.x = -r2.y + 1;
	r2.xyz = r6.xyz * r0.xxx + r7.xyz;
	r4.xyz = r3.xxx * r7.xyz;
	r4.xyz = r4.xyz * ambient_rate.xyz;
	r4.xyz = r4.xyz * ambient_rate_rate.xyz;
	r0.x = r1.w + -0.5;
	r3.y = max(r0.x, 0);
	r0.x = r3.y + r3.x;
	r5.xyz = r0.xxx * r2.xyz;
	r2.xyz = r2.xyz + specularParam.www;
	r1.xyz = r1.xyz * r5.xyz;
	r1.xyz = r3.www * r1.xyz;
	r0.y = dot(lightpos.xyz, i.texcoord3.xyz);
	r0.y = -r0.y + r0.w;
	r0.y = r0.y + 1;
	r1.xyz = r4.xyz * r0.yyy + r1.xyz;
	r0.y = pow(r2.w, specularParam.z);
	r0.w = (-r1.w >= 0) ? 0 : 1;
	r1.w = r1.w * r0.w;
	r0.w = (-r2.w >= 0) ? 0 : r0.w;
	r0.y = r0.y * r0.w;
	r3.xyw = r1.www * light_Color.xyz;
	r3.xyw = r0.yyy * r3.xyw;
	r3.xyz = r3.zzz * r3.xyw;
	r0.yzw = r0.zzz * r3.xyz;
	r0.xyz = r0.xxx * r0.yzw;
	r0.w = abs(specularParam.x);
	r0.xyz = r0.www * r0.xyz;
	r0.xyz = r0.xyz * r2.xyz + r1.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord1.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
