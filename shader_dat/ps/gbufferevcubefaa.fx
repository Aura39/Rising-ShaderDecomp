float4 g_All_Offset : register(c49);
float4 g_ColorEnhance : register(c50);
sampler g_Color_1_sampler : register(s0);
float4 g_CubeBlendParam : register(c184);
samplerCUBE g_CubeSampler : register(s3);
samplerCUBE g_CubeSampler2 : register(s10);
sampler g_NormalBlendSampler : register(s1);
float4 g_NormalWeightParam : register(c182);
sampler g_Normalmap2_sampler : register(s6);
sampler g_Normalmap_sampler : register(s4);
sampler g_OcclusionSampler : register(s2);
float4 g_WeightParam : register(c181);
float4 g_ambientRate : register(c191);
float4 g_cubeParam : register(c42);
float4 g_cubeParam2 : register(c43);
float4 g_normalmapRate : register(c44);
float4 g_otherParam : register(c45);
sampler g_wightmap_sampler : register(s7);

struct PS_IN
{
	float3 color : COLOR;
	float4 texcoord : TEXCOORD;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float3 texcoord5 : TEXCOORD5;
	float3 texcoord6 : TEXCOORD6;
};

struct PS_OUT
{
	float4 color2 : COLOR2;
	float4 color : COLOR;
	float4 color1 : COLOR1;
	float4 color3 : COLOR3;
};

PS_OUT main(PS_IN i)
{
	PS_OUT o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	r0.xy = g_All_Offset.xy + i.texcoord.xy;
	r0 = tex2D(g_Color_1_sampler, r0);
	r1 = r0.w + -g_otherParam.y;
	clip(r1);
	r1.yz = g_normalmapRate.yz;
	r1.xy = i.texcoord.xy * r1.yz + g_All_Offset.xy;
	r2 = tex2D(g_NormalBlendSampler, r1);
	r3.xw = float2(90, 0.1);
	r1.z = r2.x * -r3.x + g_NormalWeightParam.y;
	r1.z = r1.z * 0.1;
	r1.w = 1 / sqrt(r1.z);
	r1.w = 1 / r1.w;
	r2 = tex2D(g_Normalmap2_sampler, r1);
	r2 = r2 * 2 + -1;
	r2.zw = r1.ww * r2.zw;
	r2.zw = r2.zw * 6;
	r2.xy = r2.xy * 3 + -r2.zw;
	r2.xy = r1.zz * r2.xy + r2.zw;
	r2.xy = r2.xy * g_NormalWeightParam.yy;
	r4 = tex2D(g_Normalmap_sampler, r1);
	r5 = tex2D(g_wightmap_sampler, r1);
	r1.x = dot(r5.xyz, g_WeightParam.xyz);
	r1.x = r1.x * r1.z + 1;
	r1.x = 1 / r1.x;
	r1.yzw = r4.xyz * 2 + -1;
	r2.xy = r2.xy * 0.01 + r1.yz;
	r2.xy = r1.xx * r2.xy;
	r1.x = 1 + -i.texcoord2.w;
	r1.x = -r1.x + 1;
	r3.x = r1.x * r2.x;
	r3.y = -r2.y;
	r1.yz = r3.xy * g_normalmapRate.xx;
	r2.xyz = normalize(r1.yzw);
	r1.xyz = i.texcoord4.xyz;
	r3.xyz = r1.zxy * i.texcoord5.yzx;
	r1.xyz = r1.yzx * i.texcoord5.zxy + -r3.xyz;
	r1.xyz = r1.xyz * r2.yyy;
	r1.xyz = r2.xxx * i.texcoord4.xyz + r1.xyz;
	r1.xyz = r2.zzz * i.texcoord5.xyz + r1.xyz;
	r1.w = dot(i.texcoord6.xyz, r1.xyz);
	r1.w = r1.w + r1.w;
	r1.xyz = r1.xyz * -r1.www + i.texcoord6.xyz;
	r1.w = -r1.z;
	r5 = tex2D(g_CubeSampler, r1.xyww);
	r1 = tex2D(g_CubeSampler2, r1.xyww);
	r6 = lerp(r1, r5, g_CubeBlendParam.x);
	r1 = tex2D(g_OcclusionSampler, i.texcoord.zwzw);
	r1.zw = -r1.xy + 1;
	r1.xy = g_ambientRate.ww * r1.zw + r1.xy;
	r1.z = g_cubeParam.w * -r1.y + r4.w;
	r1.w = r3.w + g_cubeParam.w;
	r1.y = r1.y * g_cubeParam.w;
	r1.x = r1.x * 0.5 + 0.5;
	r1.x = r1.x * r1.x;
	r1.y = r1.w * r1.z + r1.y;
	r0.w = g_cubeParam.z * r0.w + g_cubeParam.x;
	r0.w = r1.y + r0.w;
	r1.yzw = r0.www * r6.xyz;
	r1.yzw = r1.yzw * g_cubeParam.yyy;
	r3.xyz = r6.www * r1.yzw;
	r3.xyz = r3.xyz * g_cubeParam2.yyy;
	r1.yzw = r1.yzw * g_cubeParam2.xxx + r3.xyz;
	r3.xyz = g_ColorEnhance.xyz * i.color.xyz;
	r0.xyz = r0.xyz * r3.xyz + g_cubeParam2.zzz;
	r0.xyz = r0.xyz * r1.yzw;
	o.color2.xyz = r1.xxx * r0.xyz;
	o.color = 0;
	r0.xyz = normalize(i.texcoord3.xyz);
	r1.xyz = normalize(i.texcoord2.xyz);
	r3.xyz = r0.yzx * r1.zxy;
	r3.xyz = r1.yzx * r0.zxy + -r3.xyz;
	r3.xyz = r2.yyy * r3.xyz;
	r1.xyz = r2.xxx * r1.xyz + r3.xyz;
	r0.xyz = r2.zzz * r0.xyz + r1.xyz;
	r1.xyz = normalize(r0.xyz);
	r0.xyz = r1.xyz * 0.5 + 0.5;
	o.color1.xw = r0.xx * float2(1, 0) + 0;
	r1 = r0.xxyy * float4(65025, 16581375, 65025, 16581375);
	o.color3.xw = r0.yz;
	r0 = frac(-r1);
	r0 = r0 + r1;
	r0 = r0 * 0.003921569;
	r0 = frac(r0);
	o.color1.yz = r0.xy;
	o.color3.yz = r0.zw;
	o.color2.w = 0;

	return o;
}
