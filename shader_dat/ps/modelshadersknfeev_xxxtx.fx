sampler Color_1_sampler : register(s0);
float4 Incidence_param : register(c44);
sampler Shadow_Tex_sampler : register(s11);
sampler Spec_Pow_sampler : register(s4);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_specCalc1 : register(c190);
float4 g_specCalc2 : register(c191);
float hll_rate : register(c43);
sampler incidence_sampler : register(s3);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap_sampler : register(s2);
float4 point_light1 : register(c63);
float4 point_light2 : register(c65);
float4 point_lightEv0 : register(c184);
float4 point_lightEv1 : register(c186);
float4 point_lightEv2 : register(c188);
float4 point_lightpos1 : register(c64);
float4 point_lightpos2 : register(c66);
float4 point_lightposEv0 : register(c185);
float4 point_lightposEv1 : register(c187);
float4 point_lightposEv2 : register(c189);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 spot_angle : register(c72);
float4 spot_param : register(c73);
float4 tile : register(c45);
sampler tripleMask_sampler : register(s1);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	float4 r7;
	float4 r8;
	float4 r9;
	float4 r10;
	float3 r11;
	float3 r12;
	float3 r13;
	float3 r14;
	r0.x = 1 / i.texcoord7.w;
	r0.xy = r0.xx * i.texcoord7.xy;
	r0.xy = r0.xy * float2(0.5, -0.5) + 0.5;
	r0.xy = r0.xy + g_TargetUvParam.xy;
	r0 = tex2D(Shadow_Tex_sampler, r0);
	r0.x = r0.z + g_ShadowUse.x;
	r0.yzw = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r1.x = dot(r0.yzw, r0.yzw);
	r1.x = 1 / sqrt(r1.x);
	r1.y = 1 / r1.x;
	r0.yzw = r0.yzw * r1.xxx;
	r1.x = -r1.y + muzzle_lightpos.w;
	r1.x = r1.x * muzzle_light.w;
	r2.xyz = i.texcoord3.xyz;
	r1.yzw = r2.yzx * i.texcoord2.zxy;
	r1.yzw = i.texcoord2.yzx * r2.zxy + -r1.yzw;
	r2.xy = tile.xy;
	r2.xy = i.texcoord.xy * r2.xy + g_All_Offset.xy;
	r2 = tex2D(normalmap_sampler, r2);
	r2.xyz = r2.xyz + -0.5;
	r1.yzw = r1.yzw * -r2.yyy;
	r2.x = r2.x * i.texcoord2.w;
	r1.yzw = r2.xxx * i.texcoord2.xyz + r1.yzw;
	r1.yzw = r2.zzz * i.texcoord3.xyz + r1.yzw;
	r2.xyz = normalize(r1.yzw);
	r0.y = dot(r0.yzw, r2.xyz);
	r0.z = r0.y * 0.5 + 0.5;
	r0.z = r0.z * r0.z;
	r1.y = lerp(r0.z, r0.y, hll_rate.x);
	r0.yzw = r1.yyy * muzzle_light.xyz;
	r1.yzw = point_lightpos1.xyz + -i.texcoord1.xyz;
	r2.w = dot(r1.yzw, r1.yzw);
	r2.w = 1 / sqrt(r2.w);
	r3.xyz = r1.yzw * r2.www;
	r3.x = dot(r3.xyz, r2.xyz);
	r3.y = r3.x * 0.5 + 0.5;
	r3.y = r3.y * r3.y;
	r4.x = lerp(r3.y, r3.x, hll_rate.x);
	r3.xyz = r4.xxx * point_light1.xyz;
	r3.w = 1 / r2.w;
	r3.w = -r3.w + point_lightpos1.w;
	r3.w = r3.w * point_light1.w;
	r3.xyz = r3.www * r3.xyz;
	r4.z = 2;
	r5 = r4.z + -g_specCalc1;
	r3.xyz = r3.xyz * r5.xxx;
	r0.yzw = r0.yzw * r1.xxx + r3.xyz;
	r3.xyz = point_lightpos2.xyz + -i.texcoord1.xyz;
	r1.x = dot(r3.xyz, r3.xyz);
	r1.x = 1 / sqrt(r1.x);
	r4.xyw = r1.xxx * r3.xyz;
	r4.x = dot(r4.xyw, r2.xyz);
	r4.y = r4.x * 0.5 + 0.5;
	r4.y = r4.y * r4.y;
	r5.x = lerp(r4.y, r4.x, hll_rate.x);
	r4.xyw = r5.xxx * point_light2.xyz;
	r5.x = 1 / r1.x;
	r5.x = -r5.x + point_lightpos2.w;
	r5.x = r5.x * point_light2.w;
	r4.xyw = r4.xyw * r5.xxx;
	r0.yzw = r4.xyw * r5.yyy + r0.yzw;
	r4.x = 1 / spot_angle.w;
	r6.xyz = spot_angle.xyz + -i.texcoord1.xyz;
	r4.y = dot(r6.xyz, r6.xyz);
	r4.y = 1 / sqrt(r4.y);
	r4.w = 1 / r4.y;
	r6.xyz = r4.yyy * r6.xyz;
	r4.y = dot(r6.xyz, lightpos.xyz);
	r4.y = r4.y + -spot_param.x;
	r4.x = r4.x * r4.w;
	r4.x = -r4.x + 1;
	r4.x = r4.x * 10;
	r5.y = 1;
	r4.w = r5.y + -spot_param.x;
	r4.w = 1 / r4.w;
	r4.w = r4.w * r4.y;
	r5.y = max(r4.y, 0);
	r4.y = 1 / spot_param.y;
	r4.y = r4.y * r4.w;
	r4.w = frac(-r5.y);
	r4.w = r4.w + r5.y;
	r5.y = dot(lightpos.xyz, r2.xyz);
	r6.x = r5.y;
	r4.w = r4.w * r6.x;
	r4.y = r4.y * r4.w;
	r4.x = r4.x * r4.y;
	r7.x = lerp(r4.x, r6.x, spot_param.z);
	r4.x = r7.x * 0.5 + 0.5;
	r4.x = r4.x * r4.x;
	r6.x = lerp(r4.x, r7.x, hll_rate.x);
	r4.x = r7.x + -0.5;
	r6.xyz = r6.xxx * light_Color.xyz;
	r0.yzw = r6.xyz * r0.xxx + r0.yzw;
	r4.yw = g_All_Offset.xy + i.texcoord.xy;
	r6 = tex2D(Color_1_sampler, r4.ywzw);
	r4.yw = -r6.yy + r6.xz;
	r6.w = max(abs(r4.y), abs(r4.w));
	r4.y = r6.w + -0.015625;
	r4.w = (-r4.y >= 0) ? 0 : 1;
	r4.y = (r4.y >= 0) ? -0 : -1;
	r4.y = r4.y + r4.w;
	r4.y = (r4.y >= 0) ? -r4.y : -0;
	r6.xz = (r4.yy >= 0) ? r6.yy : r6.xz;
	r7 = tex2D(incidence_sampler, i.texcoord);
	r4.y = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r4.y = 1 / sqrt(r4.y);
	r8.xyz = r4.yyy * -i.texcoord1.xyz;
	r9.xyz = -i.texcoord1.xyz * r4.yyy + lightpos.xyz;
	r10.xyz = normalize(r9.xyz);
	r4.y = dot(r10.xyz, r2.xyz);
	r4.w = dot(r8.xyz, lightpos.xyz);
	r4.w = r4.w + 1;
	r4.w = r4.w * Incidence_param.z;
	r4.w = r4.w * 0.5;
	r9.xyz = lerp(r6.xyz, r7.xyz, r4.www);
	r4.w = -r4.w + 1;
	r6.x = dot(r2.xyz, r8.xyz);
	r6.x = abs(r6.x);
	r6.y = r6.x * 0.9 + 0.05;
	r6.x = -r6.x + 1;
	r7.w = pow(r6.x, Incidence_param.x);
	r6.xyz = r7.xyz * r6.yyy;
	r6.xyz = r6.xyz * Incidence_param.yyy;
	r6.xyz = r7.www * r6.xyz;
	r6.xyz = r6.xyz * r4.www + r9.xyz;
	r7.xy = tile.xy * i.texcoord.xy;
	r7 = tex2D(tripleMask_sampler, r7);
	r4.x = r4.x + r7.x;
	r10.xyz = r4.xxx * r6.xyz;
	r6.xyz = r6.xyz + specularParam.www;
	r11.xyz = r10.xyz * point_lightEv0.xyz;
	r12.xyz = point_lightposEv0.xyz + -i.texcoord1.xyz;
	r4.w = dot(r12.xyz, r12.xyz);
	r4.w = 1 / sqrt(r4.w);
	r13.xyz = r4.www * r12.xyz;
	r12.xyz = r12.xyz * r4.www + r8.xyz;
	r4.w = 1 / r4.w;
	r4.w = -r4.w + point_lightposEv0.w;
	r4.w = r4.w * point_lightEv0.w;
	r14.xyz = normalize(r12.xyz);
	r6.w = dot(r14.xyz, r2.xyz);
	r7.y = dot(r13.xyz, r2.xyz);
	r8.w = r7.y * 0.5 + 0.5;
	r8.w = r8.w * r8.w;
	r9.w = lerp(r8.w, r7.y, hll_rate.x);
	r11.xyz = r9.www * r11.xyz;
	r11.xyz = r4.www * r11.xyz;
	r11.xyz = r5.zzz * r11.xyz;
	r0.yzw = r10.xyz * r0.yzw + r11.xyz;
	r11.xyz = r10.xyz * point_lightEv1.xyz;
	r10.xyz = r10.xyz * point_lightEv2.xyz;
	r12.xyz = point_lightposEv1.xyz + -i.texcoord1.xyz;
	r5.z = dot(r12.xyz, r12.xyz);
	r5.z = 1 / sqrt(r5.z);
	r13.xyz = r5.zzz * r12.xyz;
	r12.xyz = r12.xyz * r5.zzz + r8.xyz;
	r5.z = 1 / r5.z;
	r5.z = -r5.z + point_lightposEv1.w;
	r5.z = r5.z * point_lightEv1.w;
	r14.xyz = normalize(r12.xyz);
	r7.y = dot(r14.xyz, r2.xyz);
	r8.w = dot(r13.xyz, r2.xyz);
	r9.w = r8.w * 0.5 + 0.5;
	r9.w = r9.w * r9.w;
	r10.w = lerp(r9.w, r8.w, hll_rate.x);
	r11.xyz = r10.www * r11.xyz;
	r11.xyz = r5.zzz * r11.xyz;
	r0.yzw = r11.xyz * r5.www + r0.yzw;
	r11.xyz = point_lightposEv2.xyz + -i.texcoord1.xyz;
	r5.w = dot(r11.xyz, r11.xyz);
	r5.w = 1 / sqrt(r5.w);
	r12.xyz = r5.www * r11.xyz;
	r11.xyz = r11.xyz * r5.www + r8.xyz;
	r5.w = 1 / r5.w;
	r5.w = -r5.w + point_lightposEv2.w;
	r5.w = r5.w * point_lightEv2.w;
	r13.xyz = normalize(r11.xyz);
	r8.w = dot(r13.xyz, r2.xyz);
	r9.w = dot(r12.xyz, r2.xyz);
	r10.w = r9.w * 0.5 + 0.5;
	r10.w = r10.w * r10.w;
	r11.x = lerp(r10.w, r9.w, hll_rate.x);
	r10.xyz = r10.xyz * r11.xxx;
	r10.xyz = r5.www * r10.xyz;
	r4.z = r4.z + -g_specCalc2.x;
	r0.yzw = r10.xyz * r4.zzz + r0.yzw;
	r0.yzw = r7.www * r0.yzw;
	r9.xyz = r7.xxx * r9.xyz;
	r9.xyz = r9.xyz * ambient_rate.xyz;
	r9.xyz = r9.xyz * ambient_rate_rate.xyz;
	r4.z = dot(lightpos.xyz, i.texcoord3.xyz);
	r4.z = -r4.z + r5.y;
	r4.z = r4.z + 1;
	r0.yzw = r9.xyz * r4.zzz + r0.yzw;
	r1.yzw = r1.yzw * r2.www + r8.xyz;
	r3.xyz = r3.xyz * r1.xxx + r8.xyz;
	r8.xyz = normalize(r3.xyz);
	r1.x = dot(r8.xyz, r2.xyz);
	r3.xyz = normalize(r1.yzw);
	r1.y = dot(r3.xyz, r2.xyz);
	r1.z = -r1.y + 1;
	r2.z = r1.z * -specularParam.z + r1.y;
	r2.yw = specularParam.yy;
	r9 = tex2D(Spec_Pow_sampler, r2.zwzw);
	r1.yzw = r9.xyz * point_light1.xyz;
	r1.yzw = r3.www * r1.yzw;
	r1.yzw = r7.zzz * r1.yzw;
	r3 = g_specCalc1;
	r1.yzw = r1.yzw * r3.xxx;
	r2.z = -r4.y + 1;
	r2.x = r2.z * -specularParam.z + r4.y;
	r2 = tex2D(Spec_Pow_sampler, r2);
	r2.xyz = r2.xyz * light_Color.xyz;
	r2.xyz = r7.zzz * r2.xyz;
	r1.yzw = r2.xyz * r0.xxx + r1.yzw;
	r0.x = -r1.x + 1;
	r2.x = r0.x * -specularParam.z + r1.x;
	r2.yw = specularParam.yy;
	r9 = tex2D(Spec_Pow_sampler, r2);
	r8.xyz = r9.xyz * point_light2.xyz;
	r8.xyz = r5.xxx * r8.xyz;
	r8.xyz = r7.zzz * r8.xyz;
	r1.xyz = r8.xyz * r3.yyy + r1.yzw;
	r0.x = -r6.w + 1;
	r2.z = r0.x * -specularParam.z + r6.w;
	r2 = tex2D(Spec_Pow_sampler, r2.zwzw);
	r2.xyz = r2.xyz * point_lightEv0.xyz;
	r2.xyz = r4.www * r2.xyz;
	r2.xyz = r7.zzz * r2.xyz;
	r1.xyz = r2.xyz * r3.zzz + r1.xyz;
	r0.x = -r7.y + 1;
	r2.x = r0.x * -specularParam.z + r7.y;
	r2.yw = specularParam.yy;
	r9 = tex2D(Spec_Pow_sampler, r2);
	r3.xyz = r9.xyz * point_lightEv1.xyz;
	r3.xyz = r5.zzz * r3.xyz;
	r3.xyz = r7.zzz * r3.xyz;
	r1.xyz = r3.xyz * r3.www + r1.xyz;
	r0.x = -r8.w + 1;
	r2.z = r0.x * -specularParam.z + r8.w;
	r2 = tex2D(Spec_Pow_sampler, r2.zwzw);
	r2.xyz = r2.xyz * point_lightEv2.xyz;
	r2.xyz = r5.www * r2.xyz;
	r2.xyz = r7.zzz * r2.xyz;
	r0.x = g_specCalc2.x;
	r1.xyz = r2.xyz * r0.xxx + r1.xyz;
	r1.xyz = r4.xxx * r1.xyz;
	r0.x = abs(specularParam.x);
	r1.xyz = r0.xxx * r1.xyz;
	r0.xyz = r1.xyz * r6.xyz + r0.yzw;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord1.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
