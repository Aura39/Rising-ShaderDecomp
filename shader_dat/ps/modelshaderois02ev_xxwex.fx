sampler Color_1_sampler : register(s0);
float4 CubeParam : register(c42);
sampler ShadowCast_Tex_sampler : register(s10);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
samplerCUBE cubemap2_sampler : register(s9);
samplerCUBE cubemap_sampler : register(s2);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_CubeBlendParam : register(c175);
float2 g_ShadowFarInvPs : register(c182);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_specCalc1 : register(c190);
float4 g_specCalc2 : register(c191);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap_sampler : register(s3);
float4 point_light1 : register(c63);
float4 point_light2 : register(c65);
float4 point_lightEv0 : register(c184);
float4 point_lightEv1 : register(c186);
float4 point_lightEv2 : register(c188);
float4 point_lightpos1 : register(c64);
float4 point_lightpos2 : register(c66);
float4 point_lightposEv0 : register(c185);
float4 point_lightposEv1 : register(c187);
float4 point_lightposEv2 : register(c189);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 spot_angle : register(c72);
float4 spot_param : register(c73);
float4 tile : register(c43);
sampler tripleMask_sampler : register(s1);
float4x4 viewInverseMatrix : register(c12);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float3 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
	float4 texcoord8 : TEXCOORD8;
	float3 texcoord5 : TEXCOORD5;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	float4 r7;
	float4 r8;
	float4 r9;
	float3 r10;
	r0.xy = g_All_Offset.xy + i.texcoord.xy;
	r0 = tex2D(Color_1_sampler, r0);
	r1 = r0.w + -0.01;
	clip(r1);
	r1.x = 1 / i.texcoord7.w;
	r1.xy = r1.xx * i.texcoord7.xy;
	r1.xy = r1.xy * float2(0.5, -0.5) + 0.5;
	r1.xy = r1.xy + g_TargetUvParam.xy;
	r1 = tex2D(ShadowCast_Tex_sampler, r1);
	r1.y = i.texcoord7.z * g_ShadowFarInvPs.y + -g_ShadowFarInvPs.x;
	r1.y = -r1.y + 1;
	r1.x = -r1.x + r1.y;
	r1.x = r1.x + g_ShadowUse.x;
	r1.y = frac(-r1.x);
	r1.x = r1.y + r1.x;
	r1.y = 1 / spot_angle.w;
	r2.xyz = spot_angle.xyz + -i.texcoord1.xyz;
	r1.z = dot(r2.xyz, r2.xyz);
	r1.z = 1 / sqrt(r1.z);
	r1.w = 1 / r1.z;
	r2.xyz = r1.zzz * r2.xyz;
	r1.z = dot(r2.xyz, lightpos.xyz);
	r1.z = r1.z + -spot_param.x;
	r1.y = r1.y * r1.w;
	r1.y = -r1.y + 1;
	r1.y = r1.y * 10;
	r2.z = 1;
	r1.w = r2.z + -spot_param.x;
	r1.w = 1 / r1.w;
	r1.w = r1.w * r1.z;
	r2.x = max(r1.z, 0);
	r1.z = 1 / spot_param.y;
	r1.z = r1.z * r1.w;
	r1.w = frac(-r2.x);
	r1.w = r1.w + r2.x;
	r3.xyz = i.texcoord3.xyz;
	r2.xyw = r3.yzx * i.texcoord2.zxy;
	r2.xyw = i.texcoord2.yzx * r3.zxy + -r2.xyw;
	r3.xy = tile.xy;
	r3.xy = i.texcoord.xy * r3.xy + g_All_Offset.xy;
	r3 = tex2D(normalmap_sampler, r3);
	r3.xyz = r3.xyz + -0.5;
	r2.xyw = r2.xyw * -r3.yyy;
	r3.x = r3.x * i.texcoord2.w;
	r2.xyw = r3.xxx * i.texcoord2.xyz + r2.xyw;
	r2.xyw = r3.zzz * i.texcoord3.xyz + r2.xyw;
	r3.xyz = normalize(r2.xyw);
	r2.x = dot(lightpos.xyz, r3.xyz);
	r2.y = r2.x;
	r1.w = r1.w * r2.y;
	r1.z = r1.z * r1.w;
	r1.y = r1.y * r1.z;
	r3.w = lerp(r1.y, r2.y, spot_param.z);
	r1.y = (-r3.w >= 0) ? 0 : 1;
	r1.z = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r1.z = 1 / sqrt(r1.z);
	r4.xyz = -i.texcoord1.xyz * r1.zzz + lightpos.xyz;
	r5.xyz = r1.zzz * -i.texcoord1.xyz;
	r6.xyz = normalize(r4.xyz);
	r1.z = dot(r6.xyz, r3.xyz);
	r1.w = (-r1.z >= 0) ? 0 : r1.y;
	r1.y = r3.w * r1.y;
	r4.xyz = r1.yyy * light_Color.xyz;
	r2.y = pow(r1.z, specularParam.z);
	r1.y = r1.w * r2.y;
	r1.yzw = r1.yyy * r4.xyz;
	r2.yw = tile.xy * i.texcoord.xy;
	r4 = tex2D(tripleMask_sampler, r2.ywzw);
	r1.yzw = r1.yzw * r4.zzz;
	r6.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r2.y = dot(r6.xyz, r6.xyz);
	r2.y = 1 / sqrt(r2.y);
	r7.xyz = r6.xyz * r2.yyy + r5.xyz;
	r6.xyz = r2.yyy * r6.xyz;
	r2.y = 1 / r2.y;
	r2.y = -r2.y + point_lightpos1.w;
	r2.y = r2.y * point_light1.w;
	r2.w = dot(r6.xyz, r3.xyz);
	r6.xyz = normalize(r7.xyz);
	r4.x = dot(r6.xyz, r3.xyz);
	r5.w = (-r2.w >= 0) ? 0 : 1;
	r6.x = (-r4.x >= 0) ? 0 : r5.w;
	r6.y = pow(r4.x, specularParam.z);
	r4.x = r6.y * r6.x;
	r5.w = r2.w * r5.w;
	r6.xyz = r2.www * point_light1.xyz;
	r6.xyz = r2.yyy * r6.xyz;
	r7.xyz = r5.www * point_light1.xyz;
	r7.xyz = r4.xxx * r7.xyz;
	r7.xyz = r4.zzz * r7.xyz;
	r7.xyz = r2.yyy * r7.xyz;
	r8 = g_specCalc1;
	r7.xyz = r7.xyz * r8.xxx;
	r1.yzw = r1.yzw * r1.xxx + r7.xyz;
	r7.xyz = point_lightpos2.xyz + -i.texcoord1.xyz;
	r2.y = dot(r7.xyz, r7.xyz);
	r2.y = 1 / sqrt(r2.y);
	r9.xyz = r7.xyz * r2.yyy + r5.xyz;
	r7.xyz = r2.yyy * r7.xyz;
	r2.y = 1 / r2.y;
	r2.y = -r2.y + point_lightpos2.w;
	r2.y = r2.y * point_light2.w;
	r2.w = dot(r7.xyz, r3.xyz);
	r7.xyz = normalize(r9.xyz);
	r4.x = dot(r7.xyz, r3.xyz);
	r5.w = (-r2.w >= 0) ? 0 : 1;
	r6.w = (-r4.x >= 0) ? 0 : r5.w;
	r7.x = pow(r4.x, specularParam.z);
	r4.x = r6.w * r7.x;
	r5.w = r2.w * r5.w;
	r7.xyz = r2.www * point_light2.xyz;
	r7.xyz = r2.yyy * r7.xyz;
	r9.xyz = r5.www * point_light2.xyz;
	r9.xyz = r4.xxx * r9.xyz;
	r9.xyz = r4.zzz * r9.xyz;
	r9.xyz = r2.yyy * r9.xyz;
	r1.yzw = r9.xyz * r8.yyy + r1.yzw;
	r9.xyz = point_lightposEv0.xyz + -i.texcoord1.xyz;
	r2.y = dot(r9.xyz, r9.xyz);
	r2.y = 1 / sqrt(r2.y);
	r10.xyz = r9.xyz * r2.yyy + r5.xyz;
	r9.xyz = r2.yyy * r9.xyz;
	r2.y = 1 / r2.y;
	r2.y = -r2.y + point_lightposEv0.w;
	r2.y = r2.y * point_lightEv0.w;
	r2.w = dot(r9.xyz, r3.xyz);
	r9.xyz = normalize(r10.xyz);
	r4.x = dot(r9.xyz, r3.xyz);
	r5.w = (-r2.w >= 0) ? 0 : 1;
	r6.w = (-r4.x >= 0) ? 0 : r5.w;
	r7.w = pow(r4.x, specularParam.z);
	r4.x = r6.w * r7.w;
	r5.w = r2.w * r5.w;
	r9.xyz = r5.www * point_lightEv0.xyz;
	r9.xyz = r4.xxx * r9.xyz;
	r9.xyz = r4.zzz * r9.xyz;
	r9.xyz = r2.yyy * r9.xyz;
	r1.yzw = r9.xyz * r8.zzz + r1.yzw;
	r8.xyz = point_lightposEv1.xyz + -i.texcoord1.xyz;
	r4.x = dot(r8.xyz, r8.xyz);
	r4.x = 1 / sqrt(r4.x);
	r9.xyz = r8.xyz * r4.xxx + r5.xyz;
	r8.xyz = r4.xxx * r8.xyz;
	r4.x = 1 / r4.x;
	r4.x = -r4.x + point_lightposEv1.w;
	r4.x = r4.x * point_lightEv1.w;
	r5.w = dot(r8.xyz, r3.xyz);
	r8.xyz = normalize(r9.xyz);
	r6.w = dot(r8.xyz, r3.xyz);
	r7.w = (-r5.w >= 0) ? 0 : 1;
	r8.x = (-r6.w >= 0) ? 0 : r7.w;
	r8.y = pow(r6.w, specularParam.z);
	r6.w = r8.y * r8.x;
	r7.w = r5.w * r7.w;
	r8.xyz = r7.www * point_lightEv1.xyz;
	r8.xyz = r6.www * r8.xyz;
	r8.xyz = r4.zzz * r8.xyz;
	r8.xyz = r4.xxx * r8.xyz;
	r1.yzw = r8.xyz * r8.www + r1.yzw;
	r6.w = g_specCalc2.x;
	r8.xyz = point_lightposEv2.xyz + -i.texcoord1.xyz;
	r7.w = dot(r8.xyz, r8.xyz);
	r7.w = 1 / sqrt(r7.w);
	r5.xyz = r8.xyz * r7.www + r5.xyz;
	r8.xyz = r7.www * r8.xyz;
	r7.w = 1 / r7.w;
	r7.w = -r7.w + point_lightposEv2.w;
	r7.w = r7.w * point_lightEv2.w;
	r8.x = dot(r8.xyz, r3.xyz);
	r9.xyz = normalize(r5.xyz);
	r5.x = dot(r9.xyz, r3.xyz);
	r5.y = (-r8.x >= 0) ? 0 : 1;
	r5.z = (-r5.x >= 0) ? 0 : r5.y;
	r8.y = pow(r5.x, specularParam.z);
	r5.x = r5.z * r8.y;
	r5.y = r8.x * r5.y;
	r8.yzw = r5.yyy * point_lightEv2.xyz;
	r5.xyz = r5.xxx * r8.yzw;
	r5.xyz = r4.zzz * r5.xyz;
	r5.xyz = r7.www * r5.xyz;
	r1.yzw = r5.xyz * r6.www + r1.yzw;
	r4.z = abs(specularParam.x);
	r1.yzw = r1.yzw * r4.zzz;
	r5.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r4.z = dot(r5.xyz, r5.xyz);
	r4.z = 1 / sqrt(r4.z);
	r5.xyz = r4.zzz * r5.xyz;
	r4.z = 1 / r4.z;
	r4.z = -r4.z + muzzle_lightpos.w;
	r4.z = r4.z * muzzle_light.w;
	r5.x = dot(r5.xyz, r3.xyz);
	r5.xyz = r5.xxx * muzzle_light.xyz;
	r8.y = 2;
	r9 = r8.y + -g_specCalc1;
	r6.xyz = r6.xyz * r9.xxx;
	r5.xyz = r5.xyz * r4.zzz + r6.xyz;
	r5.xyz = r7.xyz * r9.yyy + r5.xyz;
	r6.xyz = r3.www * light_Color.xyz;
	r3.w = r3.w * 0.5 + 0.5;
	r5.xyz = r6.xyz * r1.xxx + r5.xyz;
	r1.x = -r1.x + 1;
	r6.xy = -r0.yy + r0.xz;
	r4.z = max(abs(r6.x), abs(r6.y));
	r4.z = r4.z + -0.015625;
	r6.x = (-r4.z >= 0) ? 0 : 1;
	r4.z = (r4.z >= 0) ? -0 : -1;
	r4.z = r4.z + r6.x;
	r4.z = (r4.z >= 0) ? -r4.z : -0;
	r0.xz = (r4.zz >= 0) ? r0.yy : r0.xz;
	r0.w = r0.w * prefogcolor_enhance.w;
	o.w = r0.w;
	r6.xyz = r0.xyz * point_lightEv0.xyz;
	r6.xyz = r2.www * r6.xyz;
	r6.xyz = r2.yyy * r6.xyz;
	r6.xyz = r9.zzz * r6.xyz;
	r5.xyz = r0.xyz * r5.xyz + r6.xyz;
	r6.xyz = r0.xyz * point_lightEv1.xyz;
	r6.xyz = r5.www * r6.xyz;
	r6.xyz = r4.xxx * r6.xyz;
	r5.xyz = r6.xyz * r9.www + r5.xyz;
	r6.xyz = r0.xyz * point_lightEv2.xyz;
	r6.xyz = r8.xxx * r6.xyz;
	r6.xyz = r7.www * r6.xyz;
	r0.w = r8.y + -g_specCalc2.x;
	r5.xyz = r6.xyz * r0.www + r5.xyz;
	r4.xzw = r4.www * r5.xyz;
	r0.w = dot(lightpos.xyz, i.texcoord3.xyz);
	r0.w = -r0.w + r2.x;
	r0.w = r0.w + 1;
	r2.xyw = r0.xyz * i.texcoord5.xyz;
	r2.xyw = r1.xxx * r2.xyw;
	r5.xyz = r0.xyz * ambient_rate.xyz;
	r2.xyw = r5.xyz * ambient_rate_rate.xyz + r2.xyw;
	r2.xyw = r2.xyw * r0.www + r4.xzw;
	r5.x = dot(r3.xyz, transpose(viewInverseMatrix)[0].xyz);
	r5.y = dot(r3.xyz, transpose(viewInverseMatrix)[1].xyz);
	r5.z = dot(r3.xyz, transpose(viewInverseMatrix)[2].xyz);
	r0.w = dot(i.texcoord4.xyz, r5.xyz);
	r0.w = r0.w + r0.w;
	r5.xyz = r5.xyz * -r0.www + i.texcoord4.xyz;
	r5.w = -r5.z;
	r6 = tex2D(cubemap_sampler, r5.xyww);
	r5 = tex2D(cubemap2_sampler, r5.xyww);
	r7 = lerp(r5, r6, g_CubeBlendParam.x);
	r5 = r7 * ambient_rate_rate.w;
	r5.xyz = r4.yyy * r5.xyz;
	r3 = r3.w * r5;
	r0.w = r3.w * CubeParam.y + CubeParam.x;
	r3.xyz = r0.www * r3.xyz;
	r4.xyz = r0.xyz * r3.xyz;
	r0.xyz = r0.xyz + specularParam.www;
	r5.xyz = r4.xyz * CubeParam.zzz + r2.xyw;
	r4.xyz = r4.xyz * CubeParam.zzz;
	r2.xyw = r2.xyw * -r4.xyz + r5.xyz;
	r0.xyz = r1.yzw * r0.xyz + r2.xyw;
	r0.w = r2.z + -CubeParam.z;
	r0.xyz = r3.xyz * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord8.www * r0.xyz + fog.xyz;

	return o;
}
