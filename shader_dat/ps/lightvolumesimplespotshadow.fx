sampler g_AlbedoSampler : register(s0);
float4 g_CameraParam : register(c193);
sampler g_NormalSampler : register(s1);
float4x4 g_Proj : register(c4);
sampler g_ShadowSampler : register(s6);
sampler g_SpecMaskSampler : register(s2);
sampler g_SpecPowSampler : register(s3);
float4 g_SpotLightCol : register(c185);
float4 g_SpotLightPos : register(c184);
float4 g_TargetUvParam : register(c194);
sampler g_ZSampler : register(s5);
float4 g_otherParam : register(c188);
float4 g_spot_angle : register(c186);
float4 g_spot_param : register(c187);

float4 main(float4 texcoord : TEXCOORD) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float3 r5;
	r0.x = 1 / texcoord.w;
	r0.xy = r0.xx * texcoord.xy;
	r1.xy = float2(0.5, -0.5);
	r0.xy = r0.xy * r1.xy + g_TargetUvParam.xy;
	r0.xy = r0.xy + 0.5;
	r1 = tex2D(g_NormalSampler, r0);
	r0.z = r1.w + -0.495;
	r0.w = (-r0.z >= 0) ? 0 : 1;
	r0.z = (r0.z >= 0) ? -0 : -1;
	r0.z = r0.z + r0.w;
	r0.w = r0.z * 0.5;
	r0.z = (r0.z >= 0) ? -r0.w : -0;
	r0.z = r0.z + r1.w;
	r1.xyz = r1.xyz * 2 + -1;
	r0.w = r0.z + -0.245;
	r1.w = (-r0.w >= 0) ? 0 : 1;
	r0.w = (r0.w >= 0) ? -0 : -1;
	r0.w = r0.w + r1.w;
	r1.w = max(r0.w, 0);
	r0.z = r1.w * -0.25 + r0.z;
	r2.y = r0.z * 4;
	r0.z = 1 / transpose(g_Proj)[0].x;
	r0.w = r0.x * 2 + -1;
	r3 = tex2D(g_ZSampler, r0);
	r2.z = r3.x * g_CameraParam.y + g_CameraParam.x;
	r0.w = r0.w * r2.z;
	r3.x = r0.z * r0.w;
	r0.z = r0.y * -2 + 1;
	r0.z = r2.z * r0.z;
	r3.z = -r2.z;
	r0.w = 1 / transpose(g_Proj)[1].y;
	r3.y = r0.w * r0.z;
	r0.z = dot(-r3.xyz, -r3.xyz);
	r0.z = 1 / sqrt(r0.z);
	r4.xyz = -r3.xyz * r0.zzz + g_spot_angle.xyz;
	r3.xyz = -r3.xyz + g_SpotLightPos.xyz;
	r5.xyz = normalize(r4.xyz);
	r0.z = dot(r5.xyz, r1.xyz);
	r0.w = dot(g_spot_angle.xyz, r1.xyz);
	r1.x = max(r0.z, 0);
	r0.z = -r1.x + 1;
	r4 = tex2D(g_SpecMaskSampler, r0);
	r1.yz = r4.wz * 100;
	r2.x = r0.z * -r1.y + r1.x;
	r2 = tex2D(g_SpecPowSampler, r2);
	r0.z = dot(r3.xyz, r3.xyz);
	r0.z = 1 / sqrt(r0.z);
	r3.xyz = r0.zzz * r3.xyz;
	r0.z = 1 / r0.z;
	r0.z = r0.z * g_otherParam.z;
	r0.z = -r0.z + 1;
	r0.z = r0.z * g_otherParam.w;
	r2.w = dot(r3.xyz, g_spot_angle.xyz);
	r3.x = r2.w + -g_spot_param.x;
	r3.y = r3.x;
	r3.x = r3.x * g_spot_angle.w;
	r3.x = r3.x * g_otherParam.y;
	r0.w = (-r3.y >= 0) ? 0 : r0.w;
	r3.y = r0.w * 0.5;
	r2.w = r2.w * 0.5 + r3.y;
	r3.y = frac(-r0.w);
	r0.w = r0.w + r3.y;
	r0.w = r0.w * r2.w;
	r0.w = r3.x * r0.w;
	r0.z = r0.z * r0.w;
	r0.w = (-r0.z >= 0) ? 0 : 1;
	r2.w = (-r1.x >= 0) ? 0 : r0.w;
	r0.w = r0.z * r0.w;
	r3.x = pow(r1.x, r1.y);
	r1.x = r2.w * r3.x;
	r2.xyz = r0.www * -r1.xxx + r2.xyz;
	r0.w = r0.w * r1.x;
	r2.xyz = r4.yyy * r2.xyz + r0.www;
	r3 = tex2D(g_ShadowSampler, r0);
	r4 = tex2D(g_AlbedoSampler, r0);
	r0.xyw = r3.zzz * g_SpotLightCol.xyz;
	r1.x = -r3.z + 1;
	r2.xyz = r2.xyz * r0.xyw;
	r0.xyw = r0.zzz * r0.xyw;
	r2.xyz = r1.zzz * r2.xyz;
	r2.xyz = r0.zzz * r2.xyz;
	r0.z = r0.z + r4.w;
	r1.yzw = r1.www + r4.xyz;
	r1.yzw = r1.yzw * r2.xyz;
	r0.xyw = r4.xyz * r0.xyw + r1.yzw;
	r0.xyz = r0.zzz * r0.xyw;
	r0.w = 1;
	o = r1.x * r0;

	return o;
}
