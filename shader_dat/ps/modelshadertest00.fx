sampler A_Occ_sampler : register(s2);
sampler Color_1_sampler : register(s0);
sampler Color_2_sampler : register(s1);
float4 CubeParam : register(c42);
sampler PencilMap_Tex_sampler : register(s10);
sampler ShadowMask_Tex_sampler : register(s14);
sampler Shadow_Tex_sampler : register(s11);
sampler Spec_Pow_sampler : register(s9);
sampler ToonMap_Tex_sampler : register(s15);
float3 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c57);
sampler cubemap_mask_sampler : register(s5);
samplerCUBE cubemap_sampler : register(s3);
float4 diffuseParam : register(c44);
float3 fog : register(c53);
float4 fogParam : register(c54);
float4 g_All_Offset : register(c60);
float4 g_ComicParam1 : register(c75);
float4 g_ComicParam2 : register(c76);
float4 g_HatchParam : register(c69);
float4 g_OutLineColor1 : register(c65);
float4 g_OutLineColor2 : register(c66);
float4 g_OutLineParam : register(c70);
float4 g_ShaderCheckParam : register(c62);
float4 g_ShaderCheckParam2 : register(c63);
float4 g_ShadowMaskCol : register(c68);
float4 g_ShadowMaskPow : register(c67);
float g_ShadowUse : register(c180);
float3 g_uvOffset : register(c189);
float4 light_Color : register(c47);
float4 lightpos : register(c48);
float4 muzzle_light : register(c55);
float4 muzzle_lightpos : register(c56);
sampler normalmap_sampler : register(s4);
float4 point_light1 : register(c49);
float4 point_light2 : register(c51);
float4 point_lightpos1 : register(c50);
float4 point_lightpos2 : register(c52);
float4 prefogcolor_enhance : register(c61);
float4 specularParam : register(c41);
float4 tile : register(c43);

struct PS_IN
{
	float color : COLOR;
	float4 texcoord : TEXCOORD;
	float3 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float3 texcoord5 : TEXCOORD5;
	float3 texcoord6 : TEXCOORD6;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	float4 r7;
	float4 r8;
	float4 r9;
	float4 r10;
	float4 r11;
	float4 r12;
	float3 r13;
	float3 r14;
	float3 r15;
	r0.xy = g_All_Offset.xy + i.texcoord.xy;
	r1 = tex2D(Color_1_sampler, r0);
	r0 = tex2D(cubemap_mask_sampler, r0);
	r2 = float4(2, -1, 1, 0.5);
	r3 = g_ShaderCheckParam2.x * -r2.w + r1.w;
	clip(r3);
	r3.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r0.w = dot(r3.xyz, r3.xyz);
	r0.w = 1 / sqrt(r0.w);
	r3.xyz = r0.www * r3.xyz;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + muzzle_lightpos.w;
	r4.xy = g_All_Offset.xy;
	r4.zw = i.texcoord.xy * tile.xy + r4.xy;
	r5 = tex2D(normalmap_sampler, r4.zwzw);
	r5.xyz = r5.xyz * 2 + -1;
	r6.x = r5.x * i.texcoord2.w;
	r6.yz = r5.yz * float2(2, -1);
	r5.xyz = normalize(r6.xyz);
	r6.xyz = normalize(i.texcoord2.xyz);
	r7.xyz = normalize(i.texcoord3.xyz);
	r8.xyz = r6.zxy * r7.yzx;
	r8.xyz = r6.yzx * r7.zxy + -r8.xyz;
	r8.xyz = r5.yyy * r8.xyz;
	r6.xyz = r5.xxx * r6.xyz + r8.xyz;
	r6.xyz = r5.zzz * r7.xyz + r6.xyz;
	r3.w = dot(r6.xyz, r6.xyz);
	r3.w = 1 / sqrt(r3.w);
	r6.xyz = r6.xyz * r3.www + -r7.xyz;
	r6.xyz = g_ShaderCheckParam.xxx * r6.xyz + r7.xyz;
	r3.w = dot(lightpos.xyz, r7.xyz);
	r3.x = dot(r3.xyz, r6.xyz);
	r3.y = r3.x * 0.5 + 0.5;
	r3.x = r3.x;
	r3.y = r3.y * r3.y + -r3.x;
	r3.x = g_ShadowMaskPow.y * r3.y + r3.x;
	r3.y = 0.5;
	r7 = tex2D(ToonMap_Tex_sampler, r3);
	r3.xyz = r3.xxx * muzzle_light.xyz;
	r7.xyz = r7.xxx * muzzle_light.xyz;
	r4.z = 1 / muzzle_light.w;
	r0.w = r0.w * r4.z;
	r7.xyz = r0.www * r7.xyz;
	r3.xyz = r0.www * r3.xyz;
	r4.z = abs(g_ShadowMaskPow.z);
	r3.xyz = (-r4.zzz >= 0) ? r3.xyz : r7.xyz;
	r7.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r4.w = dot(r7.xyz, r7.xyz);
	r4.w = 1 / sqrt(r4.w);
	r8.xyz = r4.www * r7.xyz;
	r5.w = dot(r8.xyz, r6.xyz);
	r6.w = r5.w * 0.5 + 0.5;
	r5.w = r5.w;
	r6.w = r6.w * r6.w + -r5.w;
	r8.x = g_ShadowMaskPow.y * r6.w + r5.w;
	r8.y = 0.5;
	r9 = tex2D(ToonMap_Tex_sampler, r8);
	r8.yzw = r9.xxx * point_light1.xyz;
	r5.w = 1 / r4.w;
	r5.w = -r5.w + point_lightpos1.w;
	r6.w = 1 / point_light1.w;
	r5.w = r5.w * r6.w;
	r8.yzw = r5.www * r8.yzw;
	r9.xyz = r8.xxx * point_light1.xyz;
	r9.xyz = r5.www * r9.xyz;
	r8.yzw = (-r4.zzz >= 0) ? r9.xyz : r8.yzw;
	r3.xyz = r3.xyz + r8.yzw;
	r8.yzw = point_lightpos2.xyz + -i.texcoord1.xyz;
	r6.w = dot(r8.yzw, r8.yzw);
	r6.w = 1 / sqrt(r6.w);
	r8.yzw = r6.www * r8.yzw;
	r6.w = 1 / r6.w;
	r6.w = -r6.w + point_lightpos2.w;
	r7.w = dot(r8.yzw, r6.xyz);
	r8.y = r7.w * 0.5 + 0.5;
	r7.w = r7.w;
	r8.y = r8.y * r8.y + -r7.w;
	r9.x = g_ShadowMaskPow.y * r8.y + r7.w;
	r9.y = 0.5;
	r10 = tex2D(ToonMap_Tex_sampler, r9);
	r8.yzw = r10.xxx * point_light2.xyz;
	r7.w = 1 / point_light2.w;
	r6.w = r6.w * r7.w;
	r8.yzw = r6.www * r8.yzw;
	r9.yzw = r9.xxx * point_light2.xyz;
	r7.w = max(r8.x, r9.x);
	r9.xyz = r6.www * r9.yzw;
	r8.xyz = (-r4.zzz >= 0) ? r9.xyz : r8.yzw;
	r3.xyz = r3.xyz + r8.xyz;
	r6.w = g_OutLineParam.z;
	r8.xy = lerp(i.texcoord.zw, i.texcoord.xy, g_ShadowMaskCol.zz);
	r8.zw = r8.xy * g_uvOffset.xy;
	r8.xy = r8.yx * g_uvOffset.yx + -r8.zw;
	r8.xy = r6.ww * r8.xy + r8.zw;
	r8.zw = -r2.zx + g_OutLineParam.zz;
	r9.xy = r8.zz * r8.xy;
	r8.xy = r9.xy * -2 + r8.xy;
	r2.x = -r8.x + -r8.y;
	r8.xy = r8.ww * r2.xx + r8.xy;
	r9 = tex2D(PencilMap_Tex_sampler, r8);
	r8 = tex2D(ShadowMask_Tex_sampler, r8);
	r2.x = 1 / i.texcoord7.w;
	r10.xy = r2.xx * i.texcoord7.xy;
	r10.xy = r10.xy * float2(0.5, -0.5) + 0.5;
	r10.xy = r10.xy + float2(0.000390625, 0.00069444446);
	r10 = tex2D(Shadow_Tex_sampler, r10);
	r2.x = r10.z + g_ShadowUse.x;
	r6.w = dot(lightpos.xyz, r6.xyz);
	r8.w = r6.w * 0.5 + 0.5;
	r9.w = r6.w;
	r3.w = -r3.w + r6.w;
	r3.w = r3.w + 1;
	r6.w = r8.w * r8.w + -r9.w;
	r10.x = g_ShadowMaskPow.y * r6.w + r9.w;
	r6.w = pow(abs(r10.x), g_ShadowMaskCol.x);
	r6.w = r6.w * g_ShadowMaskCol.y;
	r8.w = r2.x * r6.w;
	r8.w = r8.w;
	r10.z = lerp(r9.y, r9.z, r8.w);
	r11 = r6.w * r2.x + float4(-1, -2, -3, -4);
	r9.zw = r6.ww * r2.xx + float2(-5, -6);
	r12 = r11;
	r2.x = lerp(r9.x, r9.y, r12.x);
	r6.w = lerp(r8.z, r9.x, r12.y);
	r9.xy = lerp(r8.yx, r8.zy, r12.zw);
	r12 = (-r11 >= 0) ? 0 : 1;
	r11 = (r11 >= 0) ? -0 : -1;
	r11 = r11 + r12;
	r11 = (r11 >= 0) ? -r11 : -0;
	r2.x = (r11.x >= 0) ? r10.z : r2.x;
	r2.x = (r11.y >= 0) ? r2.x : r6.w;
	r2.x = (r11.z >= 0) ? r2.x : r9.x;
	r2.x = (r11.w >= 0) ? r2.x : r9.y;
	r6.w = r9.z;
	r9.x = lerp(1, r8.x, r6.w);
	r8.xy = (-r9.zw >= 0) ? 0 : 1;
	r8.zw = (r9.zw >= 0) ? -0 : -1;
	r8.xy = r8.zw + r8.xy;
	r8.xy = (r8.xy >= 0) ? -r8.xy : -0;
	r2.x = (r8.x >= 0) ? r2.x : r9.x;
	r2.x = (r8.y >= 0) ? r2.x : 1;
	r2.x = r2.x * g_ShadowMaskPow.x;
	r6.w = r2.x * -2 + 1;
	r2.x = g_ShaderCheckParam2.z * r6.w + r2.x;
	r4.xy = i.texcoord.xy * tile.zw + r4.xy;
	r8 = tex2D(Color_2_sampler, r4);
	r4.x = r8.w * i.color.x;
	r4.y = r4.x * g_ShaderCheckParam.y;
	r4.x = r4.x * -g_ShaderCheckParam.y + r2.z;
	r9.xyz = lerp(r8.xyz, r1.xyz, r4.yyy);
	r1.xyz = r9.xyz * g_OutLineParam.www + r2.xxx;
	r10.y = 0.5;
	r8 = tex2D(ToonMap_Tex_sampler, r10);
	r8.xyz = r8.xxx * light_Color.xyz;
	r8.xyz = r1.xyz * r8.xyz;
	r10.yzw = r10.xxx * light_Color.xyz;
	r10.yzw = r1.xyz * r10.yzw;
	r8.xyz = (-r4.zzz >= 0) ? r10.yzw : r8.xyz;
	r3.xyz = r3.xyz + r8.xyz;
	r8.xyz = i.texcoord4.xyz;
	r10.yzw = r8.zxy * i.texcoord5.yzx;
	r8.xyz = r8.yzx * i.texcoord5.zxy + -r10.yzw;
	r8.xyz = r5.yyy * r8.xyz;
	r8.xyz = r5.xxx * i.texcoord4.xyz + r8.xyz;
	r5.xyz = r5.zzz * i.texcoord5.xyz + r8.xyz;
	r4.y = dot(i.texcoord6.xyz, r5.xyz);
	r4.y = r4.y + r4.y;
	r8.xyz = r5.xyz * -r4.yyy + i.texcoord6.xyz;
	r8.w = -r8.z;
	r8 = tex2D(cubemap_sampler, r8.xyww);
	r8 = r4.x * r8;
	r8 = r8 * ambient_rate_rate.w;
	r4.x = r2.z + -g_ShaderCheckParam.w;
	r5.xyz = lerp(r1.www, r0.xyz, r4.xxx);
	r0.x = g_ShaderCheckParam.z;
	r0.yz = g_All_Offset.xy + i.texcoord.zw;
	r4.x = r2.y + g_ShaderCheckParam.z;
	r10.yz = lerp(i.texcoord.zw, r0.yz, r4.xx);
	r11 = tex2D(A_Occ_sampler, r10.yzzw);
	r10.yzw = r11.xyz + -1;
	r0.xyz = r0.xxx * r10.yzw + 1;
	r10.yzw = lerp(r0.yyy, r5.xyz, r4.xxx);
	r5.x = lerp(r0.z, r1.w, r4.x);
	r4.xyz = lerp(r10.yzw, r5.xxx, g_ShaderCheckParam.www);
	r5.xyz = r8.xyz * r10.yzw;
	r0.yz = CubeParam.yx;
	r8.xyz = r0.yyy * r5.xyz;
	r10.yzw = r5.xyz * r9.xyz;
	r10.yzw = r8.www * r10.yzw;
	r11.xyz = r8.www * r5.xyz;
	r12.xy = r2.yy + CubeParam.yx;
	r10.yzw = r10.yzw * r12.xxx;
	r10.yzw = (r12.xxx >= 0) ? r10.yzw : 0;
	r0.y = max(r7.w, r10.x);
	r0.y = r0.y + -0.5;
	r0.y = r0.y + r0.x;
	r12.xzw = r0.xxx * r9.xyz;
	r12.xzw = r12.xzw * ambient_rate.xyz;
	r12.xzw = r12.xzw * ambient_rate_rate.xyz;
	r13.xyz = r0.yyy * r9.xyz;
	r14.xyz = r13.xyz * r8.xyz + r10.yzw;
	r15.xyz = r13.xyz;
	r3.xyz = r15.xyz * r3.xyz + r14.xyz;
	r3.xyz = r3.xyz * diffuseParam.xyz;
	r14.xyz = r5.www * point_light2.xyz;
	r14.xyz = point_light1.xyz * r5.www + r14.xyz;
	r14.xyz = r14.xyz + light_Color.xyz;
	r14.xyz = muzzle_light.xyz * r0.www + r14.xyz;
	r10.yzw = r10.yzw + r14.xyz;
	r8.xyz = r13.xyz * r8.xyz + r10.yzw;
	r8.xyz = r13.xyz * r8.xyz;
	r13.x = 1 / r8.x;
	r13.y = 1 / r8.y;
	r13.z = 1 / r8.z;
	r10.yzw = r3.xyz * r13.xyz;
	r3.xyz = r12.xzw * r3.www + r3.xyz;
	r12.xzw = r3.www * r12.xzw;
	r10.yzw = r10.yzw * g_ComicParam1.xxx + r2.www;
	r13.xyz = frac(r10.yzw);
	r10.yzw = r10.yzw + -r13.xyz;
	r0.x = 1 / g_ComicParam1.x;
	r10.yzw = r0.xxx * r10.yzw;
	r8.xyz = r8.xyz * r10.yzw + r12.xzw;
	r0.x = lerp(r2.z, g_ComicParam1.y, r10.x);
	r10.xyz = r8.xyz * r0.xxx + -r3.xyz;
	r10.xyz = g_ComicParam1.zzz * r10.xyz + r3.xyz;
	r12.xzw = r8.xyz * r0.xxx + r3.xyz;
	r0.w = abs(g_ComicParam1.w);
	r10.xyz = (-r0.www >= 0) ? r10.xyz : r12.xzw;
	r11.xyz = r11.xyz * r12.yyy;
	r11.xyz = (r12.yyy >= 0) ? r11.xyz : 0;
	r5.xyz = r5.xyz * r0.zzz + r11.xyz;
	r5.xyz = r0.yyy * r5.xyz;
	r0.z = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r0.z = 1 / sqrt(r0.z);
	r11.xyz = r0.zzz * -i.texcoord1.xyz;
	r12.xyz = -i.texcoord1.xyz * r0.zzz + lightpos.xyz;
	r13.xyz = normalize(r12.xyz);
	r0.z = dot(r13.xyz, r6.xyz);
	r1.w = max(r0.z, 0);
	r0.z = r1.w + -specularParam.z;
	r7.xyz = r7.xyz * r4.www + r11.xyz;
	r0.w = dot(r11.xyz, r6.xyz);
	r11.xyz = normalize(r7.xyz);
	r1.w = dot(r11.xyz, r6.xyz);
	r2.w = max(r1.w, 0);
	r1.w = r2.w + -specularParam.z;
	r2.w = r2.z + -specularParam.z;
	r2.w = 1 / r2.w;
	r6.x = r1.w * r2.w;
	r7.x = r0.z * r2.w;
	r6.y = specularParam.y;
	r6 = tex2D(Spec_Pow_sampler, r6);
	r6.xyz = r6.xyz * point_light1.xyz;
	r6.xyz = r5.www * r6.xyz;
	r6.xyz = r4.xyz * r6.xyz;
	r7.y = specularParam.y;
	r7 = tex2D(Spec_Pow_sampler, r7);
	r7.xyz = r7.xyz * light_Color.xyz;
	r4.xyz = r4.xyz * r7.xyz;
	r1.xyz = r4.xyz * r1.xyz + r6.xyz;
	r1.xyz = r1.xyz * light_Color.www;
	r1.xyz = r0.yyy * r1.xyz;
	r0.y = abs(specularParam.x);
	r1.xyz = r0.yyy * r1.xyz;
	r4 = float4(0, 1, -0, -1);
	r0.y = (specularParam.x >= 0) ? r4.x : r4.y;
	r0.z = (-specularParam.x >= 0) ? r4.z : r4.w;
	r0.y = r0.z + r0.y;
	r1.w = max(r0.y, 0);
	r4.xyz = r1.www + r9.xyz;
	r1.xyz = r1.xyz * r4.xyz + r5.xyz;
	r4.xyz = r1.xyz + r10.xyz;
	r5 = float4(-1, -2, -3, -4);
	r5 = r5 + g_ComicParam2.x;
	r3.xyz = (-abs(r5.xxx) >= 0) ? r3.xyz : r4.xyz;
	r3.xyz = (-abs(r5.yyy) >= 0) ? r8.xyz : r3.xyz;
	r0.xyz = (-abs(r5.zzz) >= 0) ? r0.xxx : r3.xyz;
	r0.xyz = (-abs(r5.www) >= 0) ? r1.xyz : r0.xyz;
	r1.x = 1 / g_OutLineColor1.w;
	r1.x = r0.w * r1.x;
	r1.x = r1.x * -r1.x + 1;
	r1.yzw = r1.xxx * r9.xyz;
	r1.yzw = r1.yzw * g_OutLineColor1.xyz;
	r3.xyz = r9.xyz + -1;
	r3.xyz = g_OutLineParam.yyy * r3.xyz + r2.zzz;
	r1.yzw = r1.yzw * r3.xyz;
	r2.z = -r2.x + g_ShaderCheckParam2.y;
	r2.z = r2.z + 1;
	r1.yzw = r1.yzw * r2.zzz;
	r1.xyz = (r1.xxx >= 0) ? r1.yzw : 0;
	r0.xyz = r0.xyz + r1.xyz;
	r1.x = 1 / g_OutLineColor2.w;
	r0.w = r0.w * r1.x;
	r0.w = r0.w * -r0.w + 1;
	r1.xyz = r0.www * r9.xyz;
	r1.xyz = r1.xyz * g_OutLineColor2.xyz;
	r1.xyz = r3.xyz * r1.xyz;
	r1.xyz = r2.zzz * r1.xyz;
	r1.xyz = (r0.www >= 0) ? r1.xyz : 0;
	r0.xyz = r0.xyz + r1.xyz;
	r1.xyz = r2.xxx * r0.xyz + -r0.xyz;
	r1.xyz = g_ShadowMaskCol.www * r1.xyz + r0.xyz;
	r3.xyz = lerp(r2.xxx, r0.xyz, g_ShadowMaskCol.www);
	r0.w = r2.y + g_HatchParam.x;
	r2.yzw = lerp(r3.xyz, r1.xyz, r0.www);
	r0.w = g_HatchParam.x;
	r1.xyz = lerp(r2.yzw, r0.xyz, r0.www);
	r0.xyz = r2.xxx * r1.xyz + -r1.xyz;
	r0.xyz = g_ShadowMaskCol.www * r0.xyz + r1.xyz;
	r1.xyz = lerp(r2.xxx, r0.xyz, g_ShaderCheckParam2.www);
	r0.xyz = fog.xyz;
	r0.xyz = r1.xyz * prefogcolor_enhance.xyz + -r0.xyz;
	r0.w = -fogParam.x + fogParam.y;
	r0.w = 1 / r0.w;
	r1.x = fogParam.y + i.texcoord1.z;
	r0.w = r0.w * r1.x;
	o.xyz = r0.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
