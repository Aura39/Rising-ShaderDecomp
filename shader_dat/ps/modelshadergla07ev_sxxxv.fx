sampler Color_1_sampler : register(s0);
float4 CubeParam : register(c42);
sampler RefractMap_sampler : register(s12);
float4 Refract_Param : register(c46);
sampler ShadowCast_Tex_sampler : register(s10);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
samplerCUBE cubemap2_sampler : register(s9);
samplerCUBE cubemap_sampler : register(s1);
float4 finalcolor_enhance : register(c78);
float3 fog : register(c67);
float4 fresnelParam : register(c47);
float4 g_All_Offset : register(c76);
float g_CubeBlendParam : register(c175);
float2 g_ShadowFarInvPs : register(c182);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_specCalc1 : register(c190);
float4 g_specCalc2 : register(c191);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 point_light1 : register(c63);
float4 point_light2 : register(c65);
float4 point_lightEv0 : register(c184);
float4 point_lightEv1 : register(c186);
float4 point_lightEv2 : register(c188);
float4 point_lightpos1 : register(c64);
float4 point_lightpos2 : register(c66);
float4 point_lightposEv0 : register(c185);
float4 point_lightposEv1 : register(c187);
float4 point_lightposEv2 : register(c189);
float4 prefogcolor_enhance : register(c77);
float3 private_lightDir : register(c44);
float2 private_lightParam : register(c45);
float4 specularParam : register(c41);
float4 spot_angle : register(c72);
float4 spot_param : register(c73);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float3 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
	float4 texcoord8 : TEXCOORD8;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	float4 r7;
	float3 r8;
	r0.z = 1;
	r0.x = r0.z + -spot_param.x;
	r0.x = 1 / r0.x;
	r1.xyz = spot_angle.xyz + -i.texcoord1.xyz;
	r0.y = dot(r1.xyz, r1.xyz);
	r0.y = 1 / sqrt(r0.y);
	r1.xyz = r0.yyy * r1.xyz;
	r0.y = 1 / r0.y;
	r0.w = dot(r1.xyz, lightpos.xyz);
	r0.w = r0.w + -spot_param.x;
	r0.x = r0.x * r0.w;
	r1.x = max(r0.w, 0);
	r0.w = 1 / spot_param.y;
	r0.x = r0.w * r0.x;
	r0.w = frac(-r1.x);
	r0.w = r0.w + r1.x;
	r1.x = dot(lightpos.xyz, i.texcoord3.xyz);
	r0.w = r0.w * abs(r1.x);
	r0.x = r0.x * r0.w;
	r0.w = 1 / spot_angle.w;
	r0.y = r0.w * r0.y;
	r0.y = -r0.y + 1;
	r0.y = r0.y * 10;
	r0.x = r0.y * r0.x;
	r2.x = lerp(r0.x, abs(r1.x), spot_param.z);
	r0.x = (-r2.x >= 0) ? 0 : 1;
	r0.y = r2.x * r0.x;
	r1.xyz = r2.xxx * light_Color.xyz;
	r2.xyz = r0.yyy * light_Color.xyz;
	r0.y = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r0.y = 1 / sqrt(r0.y);
	r3.xyz = -i.texcoord1.xyz * r0.yyy + lightpos.xyz;
	r4.xyz = r0.yyy * -i.texcoord1.xyz;
	r5.xyz = normalize(r3.xyz);
	r0.y = dot(r5.xyz, i.texcoord3.xyz);
	r0.w = dot(lightpos.xyz, r5.xyz);
	r0.x = (-r0.y >= 0) ? 0 : r0.x;
	r1.w = pow(r0.y, specularParam.z);
	r0.x = r0.x * r1.w;
	r2.xyz = r0.xxx * r2.xyz;
	r0.x = 1 / i.texcoord7.w;
	r0.xy = r0.xx * i.texcoord7.xy;
	r0.xy = r0.xy * float2(0.5, -0.5) + 0.5;
	r0.xy = r0.xy + g_TargetUvParam.xy;
	r3 = tex2D(ShadowCast_Tex_sampler, r0);
	r0.x = i.texcoord7.z * g_ShadowFarInvPs.y + -g_ShadowFarInvPs.x;
	r0.x = -r0.x + 1;
	r0.x = -r3.x + r0.x;
	r0.x = r0.x + g_ShadowUse.x;
	r0.y = frac(-r0.x);
	r0.x = r0.y + r0.x;
	r2.xyz = r0.xxx * r2.xyz;
	r3.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r0.y = dot(r3.xyz, r3.xyz);
	r0.y = 1 / sqrt(r0.y);
	r5.xyz = r3.xyz * r0.yyy + r4.xyz;
	r3.xyz = r0.yyy * r3.xyz;
	r0.y = 1 / r0.y;
	r0.y = -r0.y + point_lightpos1.w;
	r0.y = r0.y * point_light1.w;
	r6.xyz = normalize(r5.xyz);
	r1.w = dot(r6.xyz, i.texcoord3.xyz);
	r2.w = dot(r3.xyz, r6.xyz);
	r3.x = dot(r3.xyz, i.texcoord3.xyz);
	r3.y = (-abs(r3.x) >= 0) ? 0 : 1;
	r3.x = abs(r3.x) * r3.y;
	r3.y = (-r1.w >= 0) ? 0 : r3.y;
	r3.z = pow(r1.w, specularParam.z);
	r1.w = r3.z * r3.y;
	r3.xyz = r3.xxx * point_light1.xyz;
	r3.xyz = r1.www * r3.xyz;
	r3.xyz = r0.yyy * r3.xyz;
	r5 = g_specCalc1;
	r3.xyz = r3.xyz * r5.xxx;
	r0.y = r0.z + -fresnelParam.x;
	r1.w = max(r2.w, r0.y);
	r2.w = r1.w + -1;
	r1.w = 1 / r1.w;
	r1.w = (r2.w >= 0) ? 1 : r1.w;
	r3.xyz = r1.www * r3.xyz;
	r1.w = max(r0.w, r0.y);
	r0.w = r1.w + -1;
	r1.w = 1 / r1.w;
	r0.w = (r0.w >= 0) ? 1 : r1.w;
	r2.xyz = r2.xyz * r0.www + r3.xyz;
	r3.xyz = point_lightpos2.xyz + -i.texcoord1.xyz;
	r0.w = dot(r3.xyz, r3.xyz);
	r0.w = 1 / sqrt(r0.w);
	r6.xyz = r3.xyz * r0.www + r4.xyz;
	r3.xyz = r0.www * r3.xyz;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightpos2.w;
	r0.w = r0.w * point_light2.w;
	r7.xyz = normalize(r6.xyz);
	r1.w = dot(r7.xyz, i.texcoord3.xyz);
	r2.w = dot(r3.xyz, r7.xyz);
	r3.x = dot(r3.xyz, i.texcoord3.xyz);
	r3.y = max(r2.w, r0.y);
	r2.w = (-abs(r3.x) >= 0) ? 0 : 1;
	r3.z = (-r1.w >= 0) ? 0 : r2.w;
	r3.w = pow(r1.w, specularParam.z);
	r1.w = r3.w * r3.z;
	r2.w = abs(r3.x) * r2.w;
	r3.xzw = abs(r3.xxx) * point_light2.xyz;
	r3.xzw = r0.www * r3.xzw;
	r6.xyz = r2.www * point_light2.xyz;
	r6.xyz = r1.www * r6.xyz;
	r6.xyz = r0.www * r6.xyz;
	r6.xyz = r5.yyy * r6.xyz;
	r0.w = r3.y + -1;
	r1.w = 1 / r3.y;
	r0.w = (r0.w >= 0) ? 1 : r1.w;
	r2.xyz = r6.xyz * r0.www + r2.xyz;
	r6.xyz = point_lightposEv0.xyz + -i.texcoord1.xyz;
	r0.w = dot(r6.xyz, r6.xyz);
	r0.w = 1 / sqrt(r0.w);
	r7.xyz = r6.xyz * r0.www + r4.xyz;
	r6.xyz = r0.www * r6.xyz;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightposEv0.w;
	r0.w = r0.w * point_lightEv0.w;
	r8.xyz = normalize(r7.xyz);
	r1.w = dot(r8.xyz, i.texcoord3.xyz);
	r2.w = dot(r6.xyz, r8.xyz);
	r3.y = dot(r6.xyz, i.texcoord3.xyz);
	r4.w = max(r2.w, r0.y);
	r2.w = pow(r1.w, specularParam.z);
	r5.x = (-abs(r3.y) >= 0) ? 0 : 1;
	r1.w = (-r1.w >= 0) ? 0 : r5.x;
	r5.x = abs(r3.y) * r5.x;
	r6.xyz = r5.xxx * point_lightEv0.xyz;
	r1.w = r2.w * r1.w;
	r6.xyz = r1.www * r6.xyz;
	r6.xyz = r0.www * r6.xyz;
	r5.xyz = r5.zzz * r6.xyz;
	r1.w = r4.w + -1;
	r2.w = 1 / r4.w;
	r1.w = (r1.w >= 0) ? 1 : r2.w;
	r2.xyz = r5.xyz * r1.www + r2.xyz;
	r5.xyz = point_lightposEv1.xyz + -i.texcoord1.xyz;
	r1.w = dot(r5.xyz, r5.xyz);
	r1.w = 1 / sqrt(r1.w);
	r6.xyz = r5.xyz * r1.www + r4.xyz;
	r5.xyz = r1.www * r5.xyz;
	r1.w = 1 / r1.w;
	r1.w = -r1.w + point_lightposEv1.w;
	r1.w = r1.w * point_lightEv1.w;
	r7.xyz = normalize(r6.xyz);
	r2.w = dot(r7.xyz, i.texcoord3.xyz);
	r4.w = dot(r5.xyz, r7.xyz);
	r5.x = dot(r5.xyz, i.texcoord3.xyz);
	r5.y = max(r4.w, r0.y);
	r4.w = pow(r2.w, specularParam.z);
	r5.z = (-abs(r5.x) >= 0) ? 0 : 1;
	r2.w = (-r2.w >= 0) ? 0 : r5.z;
	r5.z = abs(r5.x) * r5.z;
	r6.xyz = r5.zzz * point_lightEv1.xyz;
	r2.w = r4.w * r2.w;
	r6.xyz = r2.www * r6.xyz;
	r6.xyz = r1.www * r6.xyz;
	r6.xyz = r5.www * r6.xyz;
	r2.w = r5.y + -1;
	r4.w = 1 / r5.y;
	r2.w = (r2.w >= 0) ? 1 : r4.w;
	r2.xyz = r6.xyz * r2.www + r2.xyz;
	r5.yzw = point_lightposEv2.xyz + -i.texcoord1.xyz;
	r2.w = dot(r5.yzw, r5.yzw);
	r2.w = 1 / sqrt(r2.w);
	r4.xyz = r5.yzw * r2.www + r4.xyz;
	r5.yzw = r2.www * r5.yzw;
	r2.w = 1 / r2.w;
	r2.w = -r2.w + point_lightposEv2.w;
	r2.w = r2.w * point_lightEv2.w;
	r6.xyz = normalize(r4.xyz);
	r4.x = dot(r6.xyz, i.texcoord3.xyz);
	r4.y = dot(r5.yzw, r6.xyz);
	r4.z = dot(r5.yzw, i.texcoord3.xyz);
	r5.y = max(r4.y, r0.y);
	r0.y = pow(r4.x, specularParam.z);
	r4.y = (-abs(r4.z) >= 0) ? 0 : 1;
	r4.x = (-r4.x >= 0) ? 0 : r4.y;
	r4.y = abs(r4.z) * r4.y;
	r6.xyz = r4.yyy * point_lightEv2.xyz;
	r0.y = r0.y * r4.x;
	r4.xyw = r0.yyy * r6.xyz;
	r4.xyw = r2.www * r4.xyw;
	r0.y = g_specCalc2.x;
	r4.xyw = r0.yyy * r4.xyw;
	r0.y = r5.y + -1;
	r5.y = 1 / r5.y;
	r0.y = (r0.y >= 0) ? 1 : r5.y;
	r2.xyz = r4.xyw * r0.yyy + r2.xyz;
	r0.y = abs(specularParam.x);
	r2.xyz = r0.yyy * r2.xyz;
	r5.yzw = g_specCalc1.yzw;
	r4.xyw = -r5.yzw + 2;
	r3.xzw = r3.xzw * r4.xxx + i.texcoord2.xyz;
	r1.xyz = r1.xyz * r0.xxx + r3.xzw;
	r0.x = 1 / i.texcoord8.w;
	r0.xy = r0.xx * i.texcoord8.xy;
	r0.xy = r0.xy * float2(0.5, -0.5) + 0.5;
	r0.xy = r0.xy + g_TargetUvParam.xy;
	r0.xy = i.texcoord3.xy * -Refract_Param.yy + r0.xy;
	r6 = tex2D(RefractMap_sampler, r0);
	r0.xy = g_All_Offset.xy + i.texcoord.xy;
	r7 = tex2D(Color_1_sampler, r0);
	r0.xy = -r7.yy + r7.xz;
	r3.x = max(abs(r0.x), abs(r0.y));
	r0.x = r3.x + -0.015625;
	r0.y = (-r0.x >= 0) ? 0 : 1;
	r0.x = (r0.x >= 0) ? -0 : -1;
	r0.x = r0.x + r0.y;
	r0.x = (r0.x >= 0) ? -r0.x : -0;
	r7.xz = (r0.xx >= 0) ? r7.yy : r7.xz;
	r0.x = r7.w * ambient_rate.w;
	r3.xzw = lerp(r6.xyz, r7.xyz, Refract_Param.xxx);
	r5.yzw = r3.xzw * point_lightEv0.xyz;
	r5.yzw = abs(r3.yyy) * r5.yzw;
	r5.yzw = r0.www * r5.yzw;
	r5.yzw = r4.yyy * r5.yzw;
	r1.xyz = r3.xzw * r1.xyz + r5.yzw;
	r5.yzw = r3.xzw * point_lightEv1.xyz;
	r5.xyz = abs(r5.xxx) * r5.yzw;
	r5.xyz = r1.www * r5.xyz;
	r1.xyz = r5.xyz * r4.www + r1.xyz;
	r4.xyw = r3.xzw * point_lightEv2.xyz;
	r4.xyz = abs(r4.zzz) * r4.xyw;
	r4.xyz = r2.www * r4.xyz;
	r5.x = 2;
	r0.y = r5.x + -g_specCalc2.x;
	r1.xyz = r4.xyz * r0.yyy + r1.xyz;
	r4.xyz = r3.xzw * ambient_rate.xyz;
	r1.xyz = r4.xyz * ambient_rate_rate.xyz + r1.xyz;
	r4 = tex2D(cubemap_sampler, i.texcoord4);
	r5 = tex2D(cubemap2_sampler, i.texcoord4);
	r6 = lerp(r5, r4, g_CubeBlendParam.x);
	r4 = r6 * ambient_rate_rate.w;
	r0.y = r4.w * CubeParam.y + CubeParam.x;
	r4.xyz = r0.yyy * r4.xyz;
	r5.xyz = r3.xzw * r4.xyz;
	r6.xyz = r5.xyz * CubeParam.zzz + r1.xyz;
	r5.xyz = r5.xyz * CubeParam.zzz;
	r1.xyz = r1.xyz * -r5.xyz + r6.xyz;
	r5.xyz = r3.xzw + specularParam.www;
	r1.xyz = r2.xyz * r5.xyz + r1.xyz;
	r2.xyz = r2.xyz * r5.xyz;
	r0.y = r0.z + -CubeParam.z;
	r0.yzw = r4.xyz * r0.yyy + r1.xyz;
	r1.xyz = normalize(-private_lightDir.xyz);
	r1.x = dot(r1.xyz, i.texcoord3.xyz);
	r1.y = 1 / private_lightParam.y;
	r1.x = r1.x * -r1.y + 1;
	r1.xyz = r1.xxx * r3.xzw;
	r0.yzw = r1.xyz * private_lightParam.xxx + r0.yzw;
	r1.xyz = fog.xyz;
	r0.yzw = r0.yzw * prefogcolor_enhance.xyz + -r1.xyz;
	r1.xyz = i.texcoord1.www * r0.yzw + fog.xyz;
	r0.y = max(r2.x, r2.y);
	r3.x = max(r0.y, r2.z);
	r0.y = r3.x * specularParam.x;
	r0.z = max(CubeParam.x, CubeParam.y);
	r0.y = r4.w * r0.z + r0.y;
	r2.x = max(r0.y, r0.x);
	r1.w = r2.x * prefogcolor_enhance.w;
	o = r1 * finalcolor_enhance;

	return o;
}
