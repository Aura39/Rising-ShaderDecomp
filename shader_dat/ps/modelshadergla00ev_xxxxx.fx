sampler Color_1_sampler : register(s0);
float4 CubeParam : register(c42);
sampler ShadowCast_Tex_sampler : register(s10);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
samplerCUBE cubemap2_sampler : register(s9);
samplerCUBE cubemap_sampler : register(s1);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_CubeBlendParam : register(c175);
float2 g_ShadowFarInvPs : register(c182);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_specCalc1 : register(c190);
float4 g_specCalc2 : register(c191);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap_sampler : register(s2);
float4 point_light1 : register(c63);
float4 point_light2 : register(c65);
float4 point_lightEv0 : register(c184);
float4 point_lightEv1 : register(c186);
float4 point_lightEv2 : register(c188);
float4 point_lightpos1 : register(c64);
float4 point_lightpos2 : register(c66);
float4 point_lightposEv0 : register(c185);
float4 point_lightposEv1 : register(c187);
float4 point_lightposEv2 : register(c189);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
sampler specularmap_sampler : register(s3);
float4 spot_angle : register(c72);
float4 spot_param : register(c73);
float4 tile : register(c44);
float4x4 viewInverseMatrix : register(c12);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	float4 r7;
	float4 r8;
	float4 r9;
	float3 r10;
	float3 r11;
	r0.x = 1 / i.texcoord7.w;
	r0.xy = r0.xx * i.texcoord7.xy;
	r0.xy = r0.xy * float2(0.5, -0.5) + 0.5;
	r0.xy = r0.xy + g_TargetUvParam.xy;
	r0 = tex2D(ShadowCast_Tex_sampler, r0);
	r0.y = i.texcoord7.z * g_ShadowFarInvPs.y + -g_ShadowFarInvPs.x;
	r0.y = -r0.y + 1;
	r0.x = -r0.x + r0.y;
	r0.x = r0.x + g_ShadowUse.x;
	r0.y = frac(-r0.x);
	r0.x = r0.y + r0.x;
	r0.y = 1 / spot_angle.w;
	r1.xyz = spot_angle.xyz + -i.texcoord1.xyz;
	r0.z = dot(r1.xyz, r1.xyz);
	r0.z = 1 / sqrt(r0.z);
	r0.w = 1 / r0.z;
	r1.xyz = r0.zzz * r1.xyz;
	r0.z = dot(r1.xyz, lightpos.xyz);
	r0.z = r0.z + -spot_param.x;
	r0.y = r0.y * r0.w;
	r0.y = -r0.y + 1;
	r0.y = r0.y * 10;
	r1.z = 1;
	r0.w = r1.z + -spot_param.x;
	r0.w = 1 / r0.w;
	r0.w = r0.w * r0.z;
	r1.x = max(r0.z, 0);
	r0.z = 1 / spot_param.y;
	r0.z = r0.z * r0.w;
	r0.w = frac(-r1.x);
	r0.w = r0.w + r1.x;
	r2.xyz = i.texcoord3.xyz;
	r1.xyw = r2.yzx * i.texcoord2.zxy;
	r1.xyw = i.texcoord2.yzx * r2.zxy + -r1.xyw;
	r2.xy = g_All_Offset.xy;
	r2.xy = i.texcoord.xy * tile.xy + r2.xy;
	r2 = tex2D(normalmap_sampler, r2);
	r2.xyz = r2.xyz + -0.5;
	r1.xyw = r1.xyw * -r2.yyy;
	r2.x = r2.x * i.texcoord2.w;
	r1.xyw = r2.xxx * i.texcoord2.xyz + r1.xyw;
	r1.xyw = r2.zzz * i.texcoord3.xyz + r1.xyw;
	r2.xyz = normalize(r1.xyw);
	r1.x = dot(lightpos.xyz, r2.xyz);
	r0.w = r0.w * abs(r1.x);
	r0.z = r0.z * r0.w;
	r0.y = r0.y * r0.z;
	r2.w = lerp(r0.y, abs(r1.x), spot_param.z);
	r0.y = (-r2.w >= 0) ? 0 : 1;
	r0.z = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r0.z = 1 / sqrt(r0.z);
	r3.xyz = -i.texcoord1.xyz * r0.zzz + lightpos.xyz;
	r4.xyz = r0.zzz * -i.texcoord1.xyz;
	r5.xyz = normalize(r3.xyz);
	r0.z = dot(r5.xyz, r2.xyz);
	r0.w = (-r0.z >= 0) ? 0 : r0.y;
	r0.y = r2.w * r0.y;
	r3.xyz = r2.www * light_Color.xyz;
	r5.xyz = r0.yyy * light_Color.xyz;
	r1.y = pow(r0.z, specularParam.z);
	r0.y = r0.w * r1.y;
	r0.yzw = r0.yyy * r5.xyz;
	r1.yw = g_All_Offset.xy + i.texcoord.xy;
	r5 = tex2D(specularmap_sampler, r1.ywzw);
	r6 = tex2D(Color_1_sampler, r1.ywzw);
	r0.yzw = r0.yzw * r5.xyz;
	r7.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r1.y = dot(r7.xyz, r7.xyz);
	r1.y = 1 / sqrt(r1.y);
	r8.xyz = r7.xyz * r1.yyy + r4.xyz;
	r7.xyz = r1.yyy * r7.xyz;
	r1.y = 1 / r1.y;
	r1.y = -r1.y + point_lightpos1.w;
	r1.y = r1.y * point_light1.w;
	r1.w = dot(r7.xyz, r2.xyz);
	r7.xyz = normalize(r8.xyz);
	r2.w = dot(r7.xyz, r2.xyz);
	r3.w = (-abs(r1.w) >= 0) ? 0 : 1;
	r4.w = (-r2.w >= 0) ? 0 : r3.w;
	r5.w = pow(r2.w, specularParam.z);
	r2.w = r4.w * r5.w;
	r3.w = abs(r1.w) * r3.w;
	r7.xyz = abs(r1.www) * point_light1.xyz;
	r7.xyz = r1.yyy * r7.xyz;
	r8.xyz = r3.www * point_light1.xyz;
	r8.xyz = r2.www * r8.xyz;
	r8.xyz = r5.xyz * r8.xyz;
	r8.xyz = r1.yyy * r8.xyz;
	r9 = g_specCalc1;
	r8.xyz = r8.xyz * r9.xxx;
	r0.yzw = r0.yzw * r0.xxx + r8.xyz;
	r8.xyz = point_lightpos2.xyz + -i.texcoord1.xyz;
	r1.y = dot(r8.xyz, r8.xyz);
	r1.y = 1 / sqrt(r1.y);
	r10.xyz = r8.xyz * r1.yyy + r4.xyz;
	r8.xyz = r1.yyy * r8.xyz;
	r1.y = 1 / r1.y;
	r1.y = -r1.y + point_lightpos2.w;
	r1.y = r1.y * point_light2.w;
	r1.w = dot(r8.xyz, r2.xyz);
	r8.xyz = normalize(r10.xyz);
	r2.w = dot(r8.xyz, r2.xyz);
	r3.w = (-abs(r1.w) >= 0) ? 0 : 1;
	r4.w = (-r2.w >= 0) ? 0 : r3.w;
	r5.w = pow(r2.w, specularParam.z);
	r2.w = r4.w * r5.w;
	r3.w = abs(r1.w) * r3.w;
	r8.xyz = abs(r1.www) * point_light2.xyz;
	r8.xyz = r1.yyy * r8.xyz;
	r10.xyz = r3.www * point_light2.xyz;
	r10.xyz = r2.www * r10.xyz;
	r10.xyz = r5.xyz * r10.xyz;
	r10.xyz = r1.yyy * r10.xyz;
	r0.yzw = r10.xyz * r9.yyy + r0.yzw;
	r10.xyz = point_lightposEv0.xyz + -i.texcoord1.xyz;
	r1.y = dot(r10.xyz, r10.xyz);
	r1.y = 1 / sqrt(r1.y);
	r11.xyz = r10.xyz * r1.yyy + r4.xyz;
	r10.xyz = r1.yyy * r10.xyz;
	r1.y = 1 / r1.y;
	r1.y = -r1.y + point_lightposEv0.w;
	r1.y = r1.y * point_lightEv0.w;
	r1.w = dot(r10.xyz, r2.xyz);
	r10.xyz = normalize(r11.xyz);
	r2.w = dot(r10.xyz, r2.xyz);
	r3.w = (-abs(r1.w) >= 0) ? 0 : 1;
	r4.w = (-r2.w >= 0) ? 0 : r3.w;
	r5.w = pow(r2.w, specularParam.z);
	r2.w = r4.w * r5.w;
	r3.w = abs(r1.w) * r3.w;
	r10.xyz = r3.www * point_lightEv0.xyz;
	r10.xyz = r2.www * r10.xyz;
	r10.xyz = r5.xyz * r10.xyz;
	r10.xyz = r1.yyy * r10.xyz;
	r0.yzw = r10.xyz * r9.zzz + r0.yzw;
	r9.xyz = point_lightposEv1.xyz + -i.texcoord1.xyz;
	r2.w = dot(r9.xyz, r9.xyz);
	r2.w = 1 / sqrt(r2.w);
	r10.xyz = r9.xyz * r2.www + r4.xyz;
	r9.xyz = r2.www * r9.xyz;
	r2.w = 1 / r2.w;
	r2.w = -r2.w + point_lightposEv1.w;
	r2.w = r2.w * point_lightEv1.w;
	r3.w = dot(r9.xyz, r2.xyz);
	r9.xyz = normalize(r10.xyz);
	r4.w = dot(r9.xyz, r2.xyz);
	r5.w = (-abs(r3.w) >= 0) ? 0 : 1;
	r7.w = (-r4.w >= 0) ? 0 : r5.w;
	r8.w = pow(r4.w, specularParam.z);
	r4.w = r7.w * r8.w;
	r5.w = abs(r3.w) * r5.w;
	r9.xyz = r5.www * point_lightEv1.xyz;
	r9.xyz = r4.www * r9.xyz;
	r9.xyz = r5.xyz * r9.xyz;
	r9.xyz = r2.www * r9.xyz;
	r0.yzw = r9.xyz * r9.www + r0.yzw;
	r4.w = g_specCalc2.x;
	r9.xyz = point_lightposEv2.xyz + -i.texcoord1.xyz;
	r5.w = dot(r9.xyz, r9.xyz);
	r5.w = 1 / sqrt(r5.w);
	r4.xyz = r9.xyz * r5.www + r4.xyz;
	r9.xyz = r5.www * r9.xyz;
	r5.w = 1 / r5.w;
	r5.w = -r5.w + point_lightposEv2.w;
	r5.w = r5.w * point_lightEv2.w;
	r7.w = dot(r9.xyz, r2.xyz);
	r9.xyz = normalize(r4.xyz);
	r4.x = dot(r9.xyz, r2.xyz);
	r4.y = (-abs(r7.w) >= 0) ? 0 : 1;
	r4.z = (-r4.x >= 0) ? 0 : r4.y;
	r8.w = pow(r4.x, specularParam.z);
	r4.x = r4.z * r8.w;
	r4.y = abs(r7.w) * r4.y;
	r9.xyz = r4.yyy * point_lightEv2.xyz;
	r4.xyz = r4.xxx * r9.xyz;
	r4.xyz = r5.xyz * r4.xyz;
	r4.xyz = r5.www * r4.xyz;
	r0.yzw = r4.xyz * r4.www + r0.yzw;
	r4.x = abs(specularParam.x);
	r0.yzw = r0.yzw * r4.xxx;
	r4.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r4.w = dot(r4.xyz, r4.xyz);
	r4.w = 1 / sqrt(r4.w);
	r4.xyz = r4.www * r4.xyz;
	r4.w = 1 / r4.w;
	r4.w = -r4.w + muzzle_lightpos.w;
	r4.w = r4.w * muzzle_light.w;
	r4.x = dot(r4.xyz, r2.xyz);
	r4.xyz = abs(r4.xxx) * muzzle_light.xyz;
	r9 = g_specCalc1;
	r9 = -r9 + 2;
	r5.xyz = r7.xyz * r9.xxx;
	r4.xyz = r4.xyz * r4.www + r5.xyz;
	r4.xyz = r8.xyz * r9.yyy + r4.xyz;
	r3.xyz = r3.xyz * r0.xxx + r4.xyz;
	r4.xy = -r6.yy + r6.xz;
	r0.x = max(abs(r4.x), abs(r4.y));
	r0.x = r0.x + -0.015625;
	r4.x = (-r0.x >= 0) ? 0 : 1;
	r0.x = (r0.x >= 0) ? -0 : -1;
	r0.x = r0.x + r4.x;
	r0.x = (r0.x >= 0) ? -r0.x : -0;
	r6.xz = (r0.xx >= 0) ? r6.yy : r6.xz;
	r0.x = r6.w * ambient_rate.w;
	r4.xyz = r6.xyz * point_lightEv0.xyz;
	r4.xyz = abs(r1.www) * r4.xyz;
	r4.xyz = r1.yyy * r4.xyz;
	r4.xyz = r9.zzz * r4.xyz;
	r3.xyz = r6.xyz * r3.xyz + r4.xyz;
	r4.xyz = r6.xyz * point_lightEv1.xyz;
	r4.xyz = abs(r3.www) * r4.xyz;
	r4.xyz = r2.www * r4.xyz;
	r3.xyz = r4.xyz * r9.www + r3.xyz;
	r4.xyz = r6.xyz * point_lightEv2.xyz;
	r4.xyz = abs(r7.www) * r4.xyz;
	r4.xyz = r5.www * r4.xyz;
	r5.x = 2;
	r1.y = r5.x + -g_specCalc2.x;
	r3.xyz = r4.xyz * r1.yyy + r3.xyz;
	r1.y = dot(lightpos.xyz, i.texcoord3.xyz);
	r1.x = -r1.y + r1.x;
	r1.x = r1.x + 1;
	r4.xyz = r6.xyz * ambient_rate.xyz;
	r4.xyz = r4.xyz * ambient_rate_rate.xyz;
	r1.xyw = r4.xyz * r1.xxx + r3.xyz;
	r3.x = dot(r2.xyz, transpose(viewInverseMatrix)[0].xyz);
	r3.y = dot(r2.xyz, transpose(viewInverseMatrix)[1].xyz);
	r3.z = dot(r2.xyz, transpose(viewInverseMatrix)[2].xyz);
	r2.x = dot(i.texcoord4.xyz, r3.xyz);
	r2.x = r2.x + r2.x;
	r2.xyz = r3.xyz * -r2.xxx + i.texcoord4.xyz;
	r2.w = -r2.z;
	r3 = tex2D(cubemap_sampler, r2.xyww);
	r2 = tex2D(cubemap2_sampler, r2.xyww);
	r4 = lerp(r2, r3, g_CubeBlendParam.x);
	r2 = r4 * ambient_rate_rate.w;
	r3.x = r2.w * CubeParam.y + CubeParam.x;
	r2.xyz = r2.xyz * r3.xxx;
	r3.xyz = r6.xyz * r2.xyz;
	r4.xyz = r6.xyz + specularParam.www;
	r5.xyz = r3.xyz * CubeParam.zzz + r1.xyw;
	r3.xyz = r3.xyz * CubeParam.zzz;
	r1.xyw = r1.xyw * -r3.xyz + r5.xyz;
	r1.xyw = r0.yzw * r4.xyz + r1.xyw;
	r0.yzw = r0.yzw * r4.xyz;
	r1.z = r1.z + -CubeParam.z;
	r1.xyz = r2.xyz * r1.zzz + r1.xyw;
	r2.xyz = fog.xyz;
	r1.xyz = r1.xyz * prefogcolor_enhance.xyz + -r2.xyz;
	o.xyz = i.texcoord1.www * r1.xyz + fog.xyz;
	r1.x = max(r0.y, r0.z);
	r2.x = max(r1.x, r0.w);
	r0.y = r2.x * specularParam.x;
	r0.z = max(CubeParam.x, CubeParam.y);
	r0.y = r2.w * r0.z + r0.y;
	r1.x = max(r0.y, r0.x);
	r0.x = r1.x * prefogcolor_enhance.w;
	o.w = r0.x;

	return o;
}
