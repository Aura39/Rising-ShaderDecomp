sampler Color_1_sampler : register(s0);
sampler Shadow_Tex_sampler : register(s11);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_specCalc1 : register(c190);
float4 g_specCalc2 : register(c191);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
sampler normalmap_sampler : register(s1);
float4 point_light1 : register(c63);
float4 point_light2 : register(c65);
float4 point_lightEv0 : register(c184);
float4 point_lightEv1 : register(c186);
float4 point_lightEv2 : register(c188);
float4 point_lightpos1 : register(c64);
float4 point_lightpos2 : register(c66);
float4 point_lightposEv0 : register(c185);
float4 point_lightposEv1 : register(c187);
float4 point_lightposEv2 : register(c189);
float4 prefogcolor_enhance : register(c77);
float4 sectionParam : register(c41);
float4 specularParam : register(c42);
float4 spot_angle : register(c72);
float4 spot_param : register(c73);
float4 tile : register(c44);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float3 r4;
	float3 r5;
	float3 r6;
	r0.x = 1 / i.texcoord7.w;
	r0.xy = r0.xx * i.texcoord7.xy;
	r0.xy = r0.xy * float2(0.5, -0.5) + 0.5;
	r0.xy = r0.xy + g_TargetUvParam.xy;
	r0 = tex2D(Shadow_Tex_sampler, r0);
	r0.x = r0.z + g_ShadowUse.x;
	r0.y = 1 / spot_angle.w;
	r1.xyz = spot_angle.xyz + -i.texcoord1.xyz;
	r0.z = dot(r1.xyz, r1.xyz);
	r0.z = 1 / sqrt(r0.z);
	r0.w = 1 / r0.z;
	r1.xyz = r0.zzz * r1.xyz;
	r0.z = dot(r1.xyz, lightpos.xyz);
	r0.z = r0.z + -spot_param.x;
	r0.y = r0.y * r0.w;
	r0.y = -r0.y + 1;
	r0.y = r0.y * 10;
	r1.y = 1;
	r0.w = r1.y + -spot_param.x;
	r0.w = 1 / r0.w;
	r0.w = r0.w * r0.z;
	r1.x = max(r0.z, 0);
	r0.z = 1 / spot_param.y;
	r0.z = r0.z * r0.w;
	r0.w = frac(-r1.x);
	r0.w = r0.w + r1.x;
	r1.xyz = i.texcoord3.xyz;
	r2.xyz = r1.yzx * i.texcoord2.zxy;
	r1.xyz = i.texcoord2.yzx * r1.zxy + -r2.xyz;
	r2.xy = g_All_Offset.xy;
	r2.xy = i.texcoord.xy * tile.xy + r2.xy;
	r2 = tex2D(normalmap_sampler, r2);
	r2.xyz = r2.xyz + -0.5;
	r1.xyz = r1.xyz * -r2.yyy;
	r1.w = r2.x * i.texcoord2.w;
	r1.xyz = r1.www * i.texcoord2.xyz + r1.xyz;
	r1.xyz = r2.zzz * i.texcoord3.xyz + r1.xyz;
	r2.xyz = normalize(r1.xyz);
	r1.x = dot(lightpos.xyz, r2.xyz);
	r1.y = r1.x;
	r0.w = r0.w * r1.y;
	r0.z = r0.z * r0.w;
	r0.y = r0.y * r0.z;
	r2.w = lerp(r0.y, r1.y, spot_param.z);
	r0.y = (-r2.w >= 0) ? 0 : 1;
	r0.z = r2.w * r0.y;
	r1.yzw = r0.zzz * light_Color.xyz;
	r0.z = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r0.z = 1 / sqrt(r0.z);
	r3.xyz = -i.texcoord1.xyz * r0.zzz + lightpos.xyz;
	r4.xyz = r0.zzz * -i.texcoord1.xyz;
	r5.xyz = normalize(r3.xyz);
	r0.z = dot(r5.xyz, r2.xyz);
	r0.y = (-r0.z >= 0) ? 0 : r0.y;
	r2.w = pow(r0.z, specularParam.z);
	r0.y = r0.y * r2.w;
	r0.yzw = r0.yyy * r1.yzw;
	r1.yzw = point_lightpos1.xyz + -i.texcoord1.xyz;
	r2.w = dot(r1.yzw, r1.yzw);
	r2.w = 1 / sqrt(r2.w);
	r3.xyz = r1.yzw * r2.www + r4.xyz;
	r1.yzw = r1.yzw * r2.www;
	r2.w = 1 / r2.w;
	r2.w = -r2.w + point_lightpos1.w;
	r2.w = r2.w * point_light1.w;
	r1.y = dot(r1.yzw, r2.xyz);
	r5.xyz = normalize(r3.xyz);
	r1.z = dot(r5.xyz, r2.xyz);
	r1.w = (-r1.y >= 0) ? 0 : 1;
	r1.y = r1.y * r1.w;
	r1.w = (-r1.z >= 0) ? 0 : r1.w;
	r3.x = pow(r1.z, specularParam.z);
	r1.z = r1.w * r3.x;
	r3.xyz = r1.yyy * point_light1.xyz;
	r1.yzw = r1.zzz * r3.xyz;
	r1.yzw = r2.www * r1.yzw;
	r3 = g_specCalc1;
	r1.yzw = r1.yzw * r3.xxx;
	r0.xyz = r0.yzw * r0.xxx + r1.yzw;
	r1.yzw = point_lightpos2.xyz + -i.texcoord1.xyz;
	r0.w = dot(r1.yzw, r1.yzw);
	r0.w = 1 / sqrt(r0.w);
	r5.xyz = r1.yzw * r0.www + r4.xyz;
	r1.yzw = r0.www * r1.yzw;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightpos2.w;
	r0.w = r0.w * point_light2.w;
	r1.y = dot(r1.yzw, r2.xyz);
	r6.xyz = normalize(r5.xyz);
	r1.z = dot(r6.xyz, r2.xyz);
	r1.w = (-r1.y >= 0) ? 0 : 1;
	r1.y = r1.y * r1.w;
	r1.w = (-r1.z >= 0) ? 0 : r1.w;
	r2.w = pow(r1.z, specularParam.z);
	r1.z = r1.w * r2.w;
	r5.xyz = r1.yyy * point_light2.xyz;
	r1.yzw = r1.zzz * r5.xyz;
	r1.yzw = r0.www * r1.yzw;
	r0.xyz = r1.yzw * r3.yyy + r0.xyz;
	r1.yzw = point_lightposEv0.xyz + -i.texcoord1.xyz;
	r0.w = dot(r1.yzw, r1.yzw);
	r0.w = 1 / sqrt(r0.w);
	r5.xyz = r1.yzw * r0.www + r4.xyz;
	r1.yzw = r0.www * r1.yzw;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightposEv0.w;
	r0.w = r0.w * point_lightEv0.w;
	r1.y = dot(r1.yzw, r2.xyz);
	r6.xyz = normalize(r5.xyz);
	r1.z = dot(r6.xyz, r2.xyz);
	r1.w = (-r1.y >= 0) ? 0 : 1;
	r1.y = r1.y * r1.w;
	r1.w = (-r1.z >= 0) ? 0 : r1.w;
	r2.w = pow(r1.z, specularParam.z);
	r1.z = r1.w * r2.w;
	r5.xyz = r1.yyy * point_lightEv0.xyz;
	r1.yzw = r1.zzz * r5.xyz;
	r1.yzw = r0.www * r1.yzw;
	r0.xyz = r1.yzw * r3.zzz + r0.xyz;
	r1.yzw = point_lightposEv1.xyz + -i.texcoord1.xyz;
	r0.w = dot(r1.yzw, r1.yzw);
	r0.w = 1 / sqrt(r0.w);
	r3.xyz = r1.yzw * r0.www + r4.xyz;
	r1.yzw = r0.www * r1.yzw;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightposEv1.w;
	r0.w = r0.w * point_lightEv1.w;
	r1.y = dot(r1.yzw, r2.xyz);
	r5.xyz = normalize(r3.xyz);
	r1.z = dot(r5.xyz, r2.xyz);
	r1.w = (-r1.y >= 0) ? 0 : 1;
	r1.y = r1.y * r1.w;
	r1.w = (-r1.z >= 0) ? 0 : r1.w;
	r2.w = pow(r1.z, specularParam.z);
	r1.z = r1.w * r2.w;
	r3.xyz = r1.yyy * point_lightEv1.xyz;
	r1.yzw = r1.zzz * r3.xyz;
	r1.yzw = r0.www * r1.yzw;
	r0.xyz = r1.yzw * r3.www + r0.xyz;
	r1.yzw = point_lightposEv2.xyz + -i.texcoord1.xyz;
	r0.w = dot(r1.yzw, r1.yzw);
	r0.w = 1 / sqrt(r0.w);
	r3.xyz = r1.yzw * r0.www + r4.xyz;
	r1.yzw = r0.www * r1.yzw;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightposEv2.w;
	r0.w = r0.w * point_lightEv2.w;
	r1.y = dot(r1.yzw, r2.xyz);
	r4.xyz = normalize(r3.xyz);
	r1.z = dot(r4.xyz, r2.xyz);
	r1.w = (-r1.y >= 0) ? 0 : 1;
	r1.y = r1.y * r1.w;
	r1.w = (-r1.z >= 0) ? 0 : r1.w;
	r2.x = pow(r1.z, specularParam.z);
	r1.z = r1.w * r2.x;
	r2.xyz = r1.yyy * point_lightEv2.xyz;
	r1.yzw = r1.zzz * r2.xyz;
	r1.yzw = r0.www * r1.yzw;
	r0.w = g_specCalc2.x;
	r0.xyz = r1.yzw * r0.www + r0.xyz;
	r0.w = abs(specularParam.x);
	r0.xyz = r0.www * r0.xyz;
	r1.yz = g_All_Offset.xy + i.texcoord.xy;
	r2 = tex2D(Color_1_sampler, r1.yzzw);
	r1.yz = -r2.yy + r2.xz;
	r0.w = max(abs(r1.y), abs(r1.z));
	r0.w = r0.w + -0.015625;
	r1.y = (-r0.w >= 0) ? 0 : 1;
	r0.w = (r0.w >= 0) ? -0 : -1;
	r0.w = r0.w + r1.y;
	r0.w = (r0.w >= 0) ? -r0.w : -0;
	r2.xz = (r0.ww >= 0) ? r2.yy : r2.xz;
	r3.x = 0.1;
	r0.w = r3.x * sectionParam.w;
	r0.w = abs(r0.w) * sectionParam.w;
	r0.w = r2.w * r0.w;
	r1.yzw = r0.www * 0.01 + r2.xyz;
	r0.w = r0.w * 0.01;
	r2.xyz = r0.www * sectionParam.xyz;
	r3.xyz = r1.yzw + specularParam.www;
	r1.yzw = r1.yzw * ambient_rate.xyz;
	r1.yzw = r1.yzw * ambient_rate_rate.xyz + r2.xyz;
	r0.xyz = r0.xyz * r3.xyz;
	r0.w = dot(lightpos.xyz, i.texcoord3.xyz);
	r0.w = -r0.w + r1.x;
	r0.w = r0.w + 1;
	r0.xyz = r1.yzw * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord1.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
