sampler Shadow_Tex_sampler : register(s11);
float4 g_CameraParam : register(c193);
float4x4 g_IView : register(c12);
sampler g_Noise_sampler : register(s0);
float4 g_ShadowFarInv : register(c184);
float4 g_ShadowForWin : register(c185);
float4x4 g_ShadowView : register(c32);
float4x4 g_ShadowViewProj : register(c28);
float4 g_TargetUvParam : register(c194);
float4x4 g_ViewProjection : register(c8);
sampler g_Z_sampler : register(s6);
float4 g_noiseParam : register(c187);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	r0.xy = g_TargetUvParam.xy + i.texcoord.xy;
	r0 = tex2D(g_Z_sampler, r0);
	r0.z = r0.x * g_CameraParam.y + g_CameraParam.x;
	o.xyw = r0.xyx * float3(1, 1, -0.00061035156) + float3(0, 0, -0.00061035156);
	r0.xy = r0.zz * i.texcoord1.xy;
	r1.z = -r0.z;
	r1.xy = r0.xy * i.texcoord1.zw;
	r1.w = 1;
	r0.x = dot(r1, transpose(g_IView)[0]);
	r0.y = dot(r1, transpose(g_IView)[1]);
	r0.z = dot(r1, transpose(g_IView)[2]);
	r0.w = dot(r1, transpose(g_IView)[3]);
	r1.x = dot(r0, transpose(g_ViewProjection)[3]);
	r1.x = 1 / r1.x;
	r1.y = dot(r0, transpose(g_ViewProjection)[2]);
	r2 = r1.y * r1.x + -g_ShadowFarInv.y;
	r1 = r1.y * -r1.x + g_ShadowFarInv.z;
	clip(r1);
	clip(r2);
	r1.x = dot(r0, transpose(g_ShadowView)[2]);
	r1 = -r1.x;
	clip(r1);
	r1.x = dot(r0, transpose(g_ShadowViewProj)[0]);
	r1.y = dot(r0, transpose(g_ShadowViewProj)[1]);
	r2.w = dot(r0, transpose(g_ShadowViewProj)[3]);
	r0.x = dot(r0, transpose(g_ShadowViewProj)[2]);
	r2.z = r0.x + -g_ShadowForWin.y;
	r0.x = 1 / r2.w;
	r0.xy = r0.xx * r1.xy;
	r0.xy = r0.xy * float2(0.5, -0.5) + 0.5;
	r2.xy = r0.xy + g_TargetUvParam.xy;
	r0.xy = r2.xy + -0.001;
	r1 = r0.x;
	clip(r1);
	r1 = r0.y;
	clip(r1);
	r0.zw = -r2.xy + 0.999;
	r1 = r0.z;
	clip(r1);
	r1 = r0.w;
	r0 = r0;
	clip(r1);
	r1.zw = r2.zw;
	r3.yzw = float3(0.999, 0.00036621094, 0);
	r4 = g_ShadowForWin.z * r3.wzyz + r2.xyxy;
	r1.xy = r4.zw;
	r5 = tex2D(Shadow_Tex_sampler, r1);
	r4.zw = r1.zw;
	r1 = tex2D(Shadow_Tex_sampler, r2);
	r1.x = r5.x * 0.8 + r1.x;
	r5 = tex2D(Shadow_Tex_sampler, r4);
	r1.x = r5.x * 0.45 + r1.x;
	r1.z = g_ShadowForWin.z;
	r5 = r1.z * float4(-0.00061035156, 0, -0.00036621094, 0) + r2.xyxy;
	r4.xy = r5.zw;
	r6 = tex2D(Shadow_Tex_sampler, r4);
	r5.zw = r4.zw;
	r4 = tex2D(Shadow_Tex_sampler, r5);
	r1.x = r6.x * 0.8 + r1.x;
	r1.x = r4.x * 0.45 + r1.x;
	r4.xzw = r2.xzw;
	r5.xy = g_ShadowForWin.zz * r3.yw + r2.yy;
	r4.y = r5.x;
	r6 = tex2D(Shadow_Tex_sampler, r4);
	r1.x = r6.x * 0.8 + r1.x;
	r5.xzw = r4.xzw;
	r5 = tex2D(Shadow_Tex_sampler, r5);
	r1.x = r5.x * 0.45 + r1.x;
	r5.xzw = r4.xzw;
	r1.yz = g_ShadowForWin.zz * -r3.yw + r2.yy;
	r5.y = r1.y;
	r4.y = r1.z;
	r2 = tex2D(Shadow_Tex_sampler, r4);
	r3 = tex2D(Shadow_Tex_sampler, r5);
	r1.x = r3.x * 0.8 + r1.x;
	r1.x = r2.x * 0.45 + r1.x;
	r1.yz = frac(-r0.xy);
	r0.xy = r0.xy + r1.yz;
	r0.xy = -r0.xy + 1;
	r1.yz = max(r0.xy, 0);
	r0.x = r1.x * 0.16666667 + r1.y;
	r1.xy = frac(-r0.zw);
	r0.yz = r0.zw + r1.xy;
	r0.yz = -r0.yz + 1;
	r1.xy = max(r0.yz, 0);
	r0.x = r0.x + r1.x;
	r0.x = r1.y + r0.x;
	r0.x = r1.z + r0.x;
	r0.x = -r0.x + 1;
	r0.yz = i.texcoord.xy * g_noiseParam.xy + g_noiseParam.zw;
	r1 = tex2D(g_Noise_sampler, r0.yzzw);
	r1.x = r1.x;
	o.z = r0.x * -r1.x + 1;

	return o;
}
