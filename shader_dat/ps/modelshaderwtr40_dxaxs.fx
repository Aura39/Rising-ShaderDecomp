sampler Color_2_sampler : register(s1);
float4 CubeParam : register(c42);
sampler RefractMap_sampler : register(s12);
float4 Refract_Param : register(c43);
sampler Shadow_Tex_sampler : register(s11);
float4 SoftPt_Rate : register(c44);
float4 ambient_rate : register(c40);
float4 blendTile : register(c49);
samplerCUBE cubemap_sampler : register(s2);
float4 finalcolor_enhance : register(c78);
float3 fog : register(c67);
float4 g_CameraParam : register(c193);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_WtrFogColor : register(c46);
float4 g_WtrFogParam : register(c45);
sampler g_Z_sampler : register(s13);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
sampler normalmap_sampler : register(s3);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 tile : register(c48);
float4x4 viewInverseMatrix : register(c12);

struct PS_IN
{
	float4 color : COLOR;
	float4 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float4 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
	float4 texcoord8 : TEXCOORD8;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float3 r4;
	float4 r5;
	float3 r6;
	r0.xyz = i.texcoord3.xyz;
	r1.xyz = r0.yzx * i.texcoord2.zxy;
	r0.xyz = i.texcoord2.yzx * r0.zxy + -r1.xyz;
	r1.xy = i.texcoord.zw * blendTile.xy + blendTile.zw;
	r1 = tex2D(Color_2_sampler, r1);
	r1.zw = i.texcoord.zw * tile.xy + tile.zw;
	r2 = tex2D(normalmap_sampler, r1.zwzw);
	r2.xyz = r2.xyz + -0.5;
	r1.xy = r1.xy + r2.xy;
	r1.xy = r1.xy + -0.5;
	r0.xyz = r0.xyz * -r1.yyy;
	r0.w = r1.x * i.texcoord2.w;
	r0.xyz = r0.www * i.texcoord2.xyz + r0.xyz;
	r0.xyz = r2.zzz * i.texcoord3.xyz + r0.xyz;
	r0.w = dot(r0.xyz, r0.xyz);
	r0.w = 1 / sqrt(r0.w);
	r0.xyz = r0.xyz * r0.www + -i.texcoord3.xyz;
	r1.xy = CubeParam.ww * r0.xy + i.texcoord3.xy;
	r0.xyz = r0.xyz * CubeParam.www;
	r0.xyz = Refract_Param.zzz * r0.xyz + i.texcoord3.xyz;
	r0.w = 1 / i.texcoord8.w;
	r1.zw = r0.ww * i.texcoord8.xy;
	r1.zw = r1.zw * float2(0.5, -0.5) + 0.5;
	r2.xy = r1.zw + g_TargetUvParam.xy;
	r0.w = r2.y + -i.texcoord3.w;
	r1.z = -r0.w + i.texcoord3.w;
	r2.z = (-r0.w >= 0) ? r2.y : r1.z;
	r1 = r1.xyxy * -Refract_Param.y + r2.xyxz;
	r3 = tex2D(g_Z_sampler, r1);
	r0.w = r3.x * g_CameraParam.y + g_CameraParam.x;
	r2.z = -r0.w + abs(i.texcoord1.z);
	r1.xy = (-r2.zz >= 0) ? r1.xy : r2.xy;
	r3 = tex2D(g_Z_sampler, r2);
	r2.x = r3.x * g_CameraParam.y + g_CameraParam.x;
	r0.w = (-r2.z >= 0) ? r0.w : r2.x;
	r0.w = r0.w + -i.texcoord8.w;
	r0.w = -r0.w + g_WtrFogParam.w;
	r2 = tex2D(RefractMap_sampler, r1);
	r3.xyz = finalcolor_enhance.xyz;
	r3.w = -1 + i.color.w;
	r4.xz = float2(1, -1);
	r3 = SoftPt_Rate.y * r3 + r4.zzzx;
	r5.xyz = lerp(r2.xyz, r3.xyz, Refract_Param.xxx);
	r5.w = r3.w * ambient_rate.w;
	r2 = r5 + -g_WtrFogColor;
	r1.xy = -g_WtrFogParam.zx + g_WtrFogParam.wy;
	r1.x = 1 / r1.x;
	r1.y = 1 / r1.y;
	r0.w = r0.w * r1.x;
	r2 = r2 * r0.w;
	r0.w = g_WtrFogParam.y + i.texcoord1.z;
	r0.w = r1.y * r0.w;
	r2 = r0.w * r2 + g_WtrFogColor;
	r3 = r2.w + -0.01;
	clip(r3);
	o.w = r2.w * prefogcolor_enhance.w;
	r0.w = r1.w + -0.8;
	r0.w = r0.w * 5;
	r0.w = -r0.w + 1;
	r1.x = r1.w * 5;
	r3 = tex2D(RefractMap_sampler, r1.zwzw);
	r1.x = r1.x * Refract_Param.x;
	r0.w = r0.w * r1.x;
	r1.xyz = lerp(r3.xyz, r2.xyz, r0.www);
	r2.x = dot(r0.xyz, transpose(viewInverseMatrix)[0].xyz);
	r2.y = dot(r0.xyz, transpose(viewInverseMatrix)[1].xyz);
	r2.z = dot(r0.xyz, transpose(viewInverseMatrix)[2].xyz);
	r0.w = dot(i.texcoord4.xyz, r2.xyz);
	r0.w = r0.w + r0.w;
	r2.xyz = r2.xyz * -r0.www + i.texcoord4.xyz;
	r2.w = -r2.z;
	r2 = tex2D(cubemap_sampler, r2.xyww);
	r0.w = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r0.w = 1 / sqrt(r0.w);
	r3.xyz = r0.www * -i.texcoord1.xyz;
	r5.xyz = -i.texcoord1.xyz * r0.www + lightpos.xyz;
	r6.xyz = normalize(r5.xyz);
	r0.w = dot(r6.xyz, r0.xyz);
	r1.w = dot(r3.xyz, r0.xyz);
	r0.x = dot(lightpos.xyz, r0.xyz);
	r0.y = -r1.w + 1;
	r1.w = pow(r0.y, SoftPt_Rate.z);
	r0.y = max(0.001, r1.w);
	r2.xyz = r0.yyy * r2.xyz;
	r0.y = r2.w * CubeParam.y + CubeParam.x;
	r2.xyz = r0.yyy * r2.xyz;
	r3.xyz = r1.xyz * r2.xyz;
	r5.xyz = r1.xyz * ambient_rate.xyz;
	r0.y = dot(lightpos.xyz, i.texcoord3.xyz);
	r0.y = -r0.y + r0.x;
	r0.x = r0.x;
	r0.y = r0.y * 0.5 + 1;
	r5.xyz = r0.yyy * r5.xyz;
	r6.xyz = r3.xyz * CubeParam.zzz + r5.xyz;
	r3.xyz = r3.xyz * CubeParam.zzz;
	r3.xyz = r5.xyz * -r3.xyz + r6.xyz;
	r0.y = (specularParam.x >= 0) ? r4.z : r4.x;
	r0.z = (-specularParam.x >= 0) ? -r4.z : -r4.x;
	r0.y = r0.z + r0.y;
	r1.w = max(r0.y, 0);
	r1.xyz = r1.www + r1.xyz;
	r1.w = pow(r0.w, specularParam.z);
	r0.y = (-r0.x >= 0) ? 0 : 1;
	r0.x = r0.x * r0.y;
	r0.y = (-r0.w >= 0) ? 0 : r0.y;
	r0.y = r1.w * r0.y;
	r0.xzw = r0.xxx * light_Color.xyz;
	r0.xyz = r0.yyy * r0.xzw;
	r0.w = 1 / i.texcoord7.w;
	r4.yz = r0.ww * i.texcoord7.xy;
	r4.yz = r4.yz * 0.5 + 0.5;
	r4.yz = r4.yz + g_TargetUvParam.xy;
	r5 = tex2D(Shadow_Tex_sampler, r4.yzzw);
	r0.w = r5.z + g_ShadowUse.x;
	r0.xyz = r0.www * r0.xyz;
	r0.w = abs(specularParam.x);
	r0.xyz = r0.www * r0.xyz;
	r0.xyz = r0.xyz * r1.xyz + r3.xyz;
	r0.w = r4.x + -CubeParam.z;
	r0.xyz = r2.xyz * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord1.www * r0.xyz + fog.xyz;

	return o;
}
