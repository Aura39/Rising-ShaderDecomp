sampler Color_1_sampler : register(s0);
float4 CubeParam : register(c42);
sampler Shadow_Tex_sampler : register(s11);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
samplerCUBE cubemap2_sampler : register(s9);
samplerCUBE cubemap_sampler : register(s2);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_CubeBlendParam : register(c175);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_eyeLightDir : register(c187);
float4 g_eyeLightDir2 : register(c188);
float4 g_specCalc1 : register(c190);
float hll_rate : register(c44);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
float4 point_light1 : register(c63);
float4 point_light2 : register(c65);
float4 point_lightpos1 : register(c64);
float4 point_lightpos2 : register(c66);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 spot_angle : register(c72);
float4 spot_param : register(c73);
float4 tile : register(c46);
sampler tripleMask_sampler : register(s1);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	r0.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r0.w = dot(r0.xyz, r0.xyz);
	r0.w = 1 / sqrt(r0.w);
	r0.xyz = r0.www * r0.xyz;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightpos1.w;
	r0.w = r0.w * point_light1.w;
	r0.x = dot(r0.xyz, i.texcoord3.xyz);
	r0.y = r0.x * 0.5 + 0.5;
	r0.y = r0.y * r0.y;
	r1.x = lerp(r0.y, r0.x, hll_rate.x);
	r0.xyz = r1.xxx * point_light1.xyz;
	r0.xyz = r0.www * r0.xyz;
	r1.x = 2;
	r1.xy = r1.xx + -g_specCalc1.xy;
	r0.xyz = r0.xyz * r1.xxx;
	r1.xzw = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r0.w = dot(r1.xzw, r1.xzw);
	r0.w = 1 / sqrt(r0.w);
	r1.xzw = r0.www * r1.xzw;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + muzzle_lightpos.w;
	r0.w = r0.w * muzzle_light.w;
	r1.x = dot(r1.xzw, i.texcoord3.xyz);
	r1.z = r1.x * 0.5 + 0.5;
	r1.z = r1.z * r1.z;
	r2.x = lerp(r1.z, r1.x, hll_rate.x);
	r1.xzw = r2.xxx * muzzle_light.xyz;
	r0.xyz = r1.xzw * r0.www + r0.xyz;
	r1.xzw = point_lightpos2.xyz + -i.texcoord1.xyz;
	r0.w = dot(r1.xzw, r1.xzw);
	r0.w = 1 / sqrt(r0.w);
	r1.xzw = r0.www * r1.xzw;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightpos2.w;
	r0.w = r0.w * point_light2.w;
	r1.x = dot(r1.xzw, i.texcoord3.xyz);
	r1.z = r1.x * 0.5 + 0.5;
	r1.z = r1.z * r1.z;
	r2.x = lerp(r1.z, r1.x, hll_rate.x);
	r1.xzw = r2.xxx * point_light2.xyz;
	r1.xzw = r0.www * r1.xzw;
	r0.xyz = r1.xzw * r1.yyy + r0.xyz;
	r1.y = 1;
	r0.w = r1.y + -spot_param.x;
	r0.w = 1 / r0.w;
	r1.xzw = spot_angle.xyz + -i.texcoord1.xyz;
	r2.x = dot(r1.xzw, r1.xzw);
	r2.x = 1 / sqrt(r2.x);
	r1.xzw = r1.xzw * r2.xxx;
	r2.x = 1 / r2.x;
	r1.x = dot(r1.xzw, lightpos.xyz);
	r1.x = r1.x + -spot_param.x;
	r0.w = r0.w * r1.x;
	r2.y = max(r1.x, 0);
	r1.x = 1 / spot_param.y;
	r0.w = r0.w * r1.x;
	r1.x = frac(-r2.y);
	r1.x = r1.x + r2.y;
	r1.z = dot(lightpos.xyz, i.texcoord3.xyz);
	r1.x = r1.x * r1.z;
	r0.w = r0.w * r1.x;
	r1.x = 1 / spot_angle.w;
	r1.x = r1.x * r2.x;
	r1.x = -r1.x + 1;
	r1.x = r1.x * 10;
	r0.w = r0.w * r1.x;
	r2.x = lerp(r0.w, r1.z, spot_param.z);
	r0.w = r2.x * 0.5 + 0.5;
	r0.w = r0.w * r0.w;
	r1.x = lerp(r0.w, r2.x, hll_rate.x);
	r0.w = r2.x + -0.5;
	r1.xzw = r1.xxx * light_Color.xyz;
	r2.x = 1 / i.texcoord7.w;
	r2.xy = r2.xx * i.texcoord7.xy;
	r2.xy = r2.xy * float2(0.5, -0.5) + 0.5;
	r2.xy = r2.xy + g_TargetUvParam.xy;
	r2 = tex2D(Shadow_Tex_sampler, r2);
	r2.x = r2.z + g_ShadowUse.x;
	r0.xyz = r1.xzw * r2.xxx + r0.xyz;
	r1.xz = tile.xy * i.texcoord.xy;
	r2 = tex2D(tripleMask_sampler, r1.xzzw);
	r0.w = r0.w + r2.x;
	r1.xz = g_All_Offset.xy + i.texcoord.xy;
	r3 = tex2D(Color_1_sampler, r1.xzzw);
	r1.xz = -r3.yy + r3.xz;
	r3.w = max(abs(r1.x), abs(r1.z));
	r1.x = r3.w + -0.015625;
	r1.z = (-r1.x >= 0) ? 0 : 1;
	r1.x = (r1.x >= 0) ? -0 : -1;
	r1.x = r1.x + r1.z;
	r1.x = (r1.x >= 0) ? -r1.x : -0;
	r3.xz = (r1.xx >= 0) ? r3.yy : r3.xz;
	r1.xzw = r0.www * r3.xyz;
	r0.xyz = r0.xyz * r1.xzw;
	r0.xyz = r2.www * r0.xyz;
	r1.xzw = r2.xxx * r3.xyz;
	r1.xzw = r1.xzw * ambient_rate.xyz;
	r0.xyz = r1.xzw * ambient_rate_rate.xyz + r0.xyz;
	r4 = tex2D(cubemap_sampler, i.texcoord4);
	r5 = tex2D(cubemap2_sampler, i.texcoord4);
	r6 = lerp(r5, r4, g_CubeBlendParam.x);
	r4 = r6 * ambient_rate_rate.w;
	r1.xzw = r2.yyy * r4.xyz;
	r2.x = r4.w * CubeParam.y + CubeParam.x;
	r1.xzw = r1.xzw * r2.xxx;
	r1.xzw = r0.www * r1.xzw;
	r2.xyw = r3.xyz * r1.xzw;
	r3.xyz = r3.xyz + specularParam.www;
	r4.xyz = r2.xyw * CubeParam.zzz + r0.xyz;
	r2.xyw = r2.xyw * CubeParam.zzz;
	r0.xyz = r0.xyz * -r2.xyw + r4.xyz;
	r4.xyz = normalize(-g_eyeLightDir2.xyz);
	r5.xyz = normalize(i.texcoord3.xyz);
	r2.x = dot(r4.xyz, r5.xyz);
	r3.w = pow(r2.x, specularParam.z);
	r2.x = r3.w * g_eyeLightDir2.w;
	r4.xyz = normalize(-g_eyeLightDir.xyz);
	r2.y = dot(r4.xyz, r5.xyz);
	r3.w = pow(r2.y, specularParam.z);
	r2.x = r3.w * g_eyeLightDir.w + r2.x;
	r2.xyw = r2.xxx * light_Color.xyz;
	r2.xyz = r2.zzz * r2.xyw;
	r2.xyz = r0.www * r2.xyz;
	r0.w = abs(specularParam.x);
	r2.xyz = r0.www * r2.xyz;
	r0.xyz = r2.xyz * r3.xyz + r0.xyz;
	r0.w = r1.y + -CubeParam.z;
	r0.xyz = r1.xzw * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord1.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
