float g_AcceptAngle : register(c179);
float g_AcceptDepth : register(c177);
float g_CheckRadius : register(c175);
float g_Intensity : register(c178);
float g_MaxRate : register(c180);
float4 g_ProjParam : register(c174);
float g_RejectDepth : register(c176);
sampler g_SamplerTexture : register(s0);
float2 g_ScreenParam : register(c181);

struct PS_OUT
{
	float4 color : COLOR;
	float4 color1 : COLOR1;
	float4 color2 : COLOR2;
};

PS_OUT main(float2 texcoord : TEXCOORD)
{
	PS_OUT o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	float4 r7;
	float4 r8;
	float4 r9;
	float4 r10;
	float4 r11;
	float4 r12;
	float4 r13;
	float4 r14;
	float4 r15;
	float4 r16;
	float4 r17;
	float4 r18;
	float4 r19;
	float4 r20;
	float4 r21;
	float4 r22;
	float4 r23;
	float4 r24;
	float4 r25;
	r0 = g_ScreenParam.yxyx * texcoord.yxyx;
	r1 = frac(r0.zwzw);
	r2 = r0.zwzw + -r1.zwzw;
	r1 = (-r1 >= 0) ? 0 : 1;
	r0 = (r0 >= 0) ? 0 : r1;
	r0 = r0 + r2;
	r1.x = 1 / g_ScreenParam.x;
	r1.y = 1 / g_ScreenParam.y;
	r2.x = r0.w * r1.x + r1.x;
	r2.y = r0.z * r1.y + r1.y;
	r2.zw = 0;
	r3 = tex2Dlod(g_SamplerTexture, r2.xyww);
	r2 = tex2Dlod(g_SamplerTexture, r2);
	r1.z = -r3.z + r2.x;
	r1.w = r2.x * g_ProjParam.y;
	r1.w = r1.w * g_ProjParam.z;
	r1.w = 1 / r1.w;
	r1.w = r1.w * g_CheckRadius.x;
	r1.w = r1.w * g_ScreenParam.y;
	r2.y = r1.w * 0.25;
	r2.z = frac(r2.y);
	r2.y = r2.y + -r2.z;
	r2.z = (-r2.z >= 0) ? 0 : 1;
	r1.w = (r1.w >= 0) ? 0 : r2.z;
	r1.w = r1.w + r2.y;
	r2.y = min(r1.w, 4);
	r3 = (-abs(r2.y) >= 0) ? -1 : -0;
	clip(r3);
	r2.zw = 0;
	for (int i0 = 0; i0 < 4; i0++) {
		r3 = r2.w + float4(-0, -1, -2, -3);
		r4 = float4(1, 8, -2, -9);
		r4 = (-abs(r3.x) >= 0) ? r4 : float4(0, 0, -1, -1);
		r4 = (-abs(r3.y) >= 0) ? float4(8, 8, -9, 1) : r4;
		r4 = (-abs(r3.z) >= 0) ? float4(5, 4, -6, -5) : r4;
		r3 = (-abs(r3.w) >= 0) ? float4(4, -4, -5, 3) : r4;
		r3 = r0.wzwz + r3;
		r4.xy = r3.xz * r1.xx + r1.xx;
		r3.xy = r3.yw * r1.yy + r1.yy;
		r4.zw = r3.xx * float2(0, 1);
		r5 = tex2Dlod(g_SamplerTexture, r4.xzww);
		r3.zw = r4.yw;
		r3 = tex2Dlod(g_SamplerTexture, r3.zyww);
		r4.xyz = r5.xyz * 2 + -1;
		r3.xyz = r3.xyz * 2 + -1;
		r1.w = dot(r4.xyz, r3.xyz);
		r3.x = -r1.w + g_AcceptAngle.x;
		r1.w = abs(r1.w) * -0.25 + 1;
		r1.w = (r3.x >= 0) ? r1.w : 0;
		r2.z = r1.w + r2.z;
		r2.w = r2.w + 1;
	}
	r1.w = r2.z * 0.25 + 0.5;
	r2.zw = 0;
	for (int i0 = 0; i0 < 4; i0++) {
		r3 = r2.w + float4(-0, -1, -2, -3);
		r4 = float4(1, 8, -2, -9);
		r4 = (-abs(r3.x) >= 0) ? r4 : float4(0, 0, -1, -1);
		r4 = (-abs(r3.y) >= 0) ? float4(8, -1, -9, -0) : r4;
		r4 = (-abs(r3.z) >= 0) ? float4(5, 4, -6, -5) : r4;
		r3 = (-abs(r3.w) >= 0) ? float4(4, -4, -5, 3) : r4;
		r3 = r0.wzwz + r3;
		r4.xy = r3.xz * r1.xx + r1.xx;
		r3.xy = r3.yw * r1.yy + r1.yy;
		r4.zw = r3.xx * float2(0, 1);
		r5 = tex2Dlod(g_SamplerTexture, r4.xzww);
		r3.zw = r4.yw;
		r3 = tex2Dlod(g_SamplerTexture, r3.zyww);
		r4.xyz = r5.xyz * 2 + -1;
		r3.xyz = r3.xyz * 2 + -1;
		r3.x = dot(r4.xyz, r3.xyz);
		r3.y = -r3.x + g_AcceptAngle.x;
		r3.x = abs(r3.x) * -0.25 + 1;
		r3.x = (r3.y >= 0) ? r3.x : 0;
		r2.z = r2.z + r3.x;
		r2.w = r2.w + 1;
	}
	r2.z = r2.z * 0.25 + 0.5;
	r2.z = -r2.z + 0.5;
	r3 = (r2.z >= 0) ? -1 : -0;
	clip(r3);
	r3 = r2.y + float4(-0, -1, -2, -3);
	r2.y = r2.y + -4;
	r2.zw = (-abs(r3.xy) >= 0) ? float2(-2, 0.06279072) : float2(-2, 0.06279072);
	r2.zw = (-abs(r3.yz) >= 0) ? float2(0.25, 0.5) : r2.zw;
	r2.zw = (-abs(r3.zw) >= 0) ? float2(-6, 0.018594166) : r2.zw;
	r2.z = (-abs(r3.w) >= 0) ? -12 : r2.z;
	r2.z = (r2.y >= 0) ? -20 : r2.z;
	r3 = 0;
	r4.x = 0;
	for (int i0 = 0; i0 < 20; i0++) {
		r4.y = r2.z + r4.x;
		r4.y = (r4.y >= 0) ? 1 : 0;
		r5 = r4.x + float4(-0, -1, -2, -3);
		r6 = r4.x + float4(-4, -5, -6, -7);
		r7 = r4.x + float4(-8, -9, -10, -11);
		r8 = r4.x + float4(-12, -13, -14, -15);
		r9 = r4.x + float4(-16, -17, -18, -19);
		r10.xy = float2(0, -1);
		r10 = (-abs(r5.x) >= 0) ? float4(-1, 1, -0, -2) : r10.xxyy;
		r10 = (-abs(r5.y) >= 0) ? float4(1, 0, -2, -1) : r10;
		r10 = (-abs(r5.z) >= 0) ? float4(3, 0, -4, -1) : r10;
		r10 = (-abs(r5.w) >= 0) ? float4(1, 2, -2, -3) : r10;
		r10 = (-abs(r6.x) >= 0) ? float4(-1, 3, -0, -4) : r10;
		r10 = (-abs(r6.y) >= 0) ? float4(-3, 1, 2, -2) : r10;
		r10 = (-abs(r6.z) >= 0) ? float4(-5, 1, 4, -2) : r10;
		r10 = (-abs(r6.w) >= 0) ? float4(-3, 3, 2, -4) : r10;
		r10 = (-abs(r7.x) >= 0) ? float4(-1, 5, -0, -6) : r10;
		r10 = (-abs(r7.y) >= 0) ? float4(1, 4, -2, -5) : r10;
		r10 = (-abs(r7.z) >= 0) ? float4(3, 2, -4, -3) : r10;
		r10 = (-abs(r7.w) >= 0) ? float4(5, 0, -6, -1) : r10;
		r10 = (-abs(r8.x) >= 0) ? float4(7, 0, -8, -1) : r10;
		r10 = (-abs(r8.y) >= 0) ? float4(5, 2, -6, -3) : r10;
		r10 = (-abs(r8.z) >= 0) ? float4(3, 4, -4, -5) : r10;
		r10 = (-abs(r8.w) >= 0) ? float4(1, 6, -2, -7) : r10;
		r10 = (-abs(r9.x) >= 0) ? float4(-1, 7, -0, -8) : r10;
		r10 = (-abs(r9.y) >= 0) ? float4(-3, 5, 2, -6) : r10;
		r10 = (-abs(r9.z) >= 0) ? float4(-5, 3, 4, -4) : r10;
		r10 = (-abs(r9.w) >= 0) ? float4(-7, 1, 6, -2) : r10;
		r10 = r0 + r10;
		r11 = r10 + 1;
		r12.xy = r10.yw * r1.xx + r1.xx;
		r13.xy = r11.xz * r1.yy + r1.yy;
		r12.zw = r13.xx * float2(0, 1);
		r14 = tex2Dlod(g_SamplerTexture, r12.xzww);
		r15 = tex2Dlod(g_SamplerTexture, r12.xzww);
		r11.xy = r11.yw * r1.xx + r1.xx;
		r11.zw = r12.zw;
		r16 = tex2Dlod(g_SamplerTexture, r11.xzww);
		r17 = tex2Dlod(g_SamplerTexture, r11.xzww);
		r10.xy = r10.xz * r1.yy + r1.yy;
		r10.zw = r11.xw;
		r18 = tex2Dlod(g_SamplerTexture, r10.zxww);
		r19 = tex2Dlod(g_SamplerTexture, r10.zxww);
		r20.xzw = r12.xww;
		r20.y = r10.x;
		r21 = tex2Dlod(g_SamplerTexture, r20.xyww);
		r20 = tex2Dlod(g_SamplerTexture, r20);
		r13.zw = r12.yw;
		r12 = tex2Dlod(g_SamplerTexture, r13.zyww);
		r22 = tex2Dlod(g_SamplerTexture, r13.zyww);
		r10.xw = r11.yw;
		r10.z = r13.y;
		r11 = tex2Dlod(g_SamplerTexture, r10.xzww);
		r23 = tex2Dlod(g_SamplerTexture, r10.xzww);
		r24 = tex2Dlod(g_SamplerTexture, r10.xyww);
		r25 = tex2Dlod(g_SamplerTexture, r10.xyww);
		r10.xzw = r13.zww;
		r13 = tex2Dlod(g_SamplerTexture, r10.xyww);
		r10 = tex2Dlod(g_SamplerTexture, r10);
		r15.y = r17.x;
		r15.z = r19.x;
		r15.w = r20.x;
		r17 = r2.x + -r15;
		r19 = r17 + -g_RejectDepth.x;
		r17 = -r17 + g_AcceptDepth.x;
		r25.z = r22.x;
		r25.w = r23.x;
		r25.y = r10.x;
		r10 = r2.x + -r25;
		r20 = r10 + -g_RejectDepth.x;
		r10 = -r10 + g_AcceptDepth.x;
		r11.x = 0;
		r22 = (-abs(r5.x) >= 0) ? float4(1, 0.5, 0.44721, 0.70711) : r11.x;
		r22 = (-abs(r5.y) >= 0) ? float4(0.5, 0.44721, 0.70711, 1) : r22;
		r22 = (-abs(r5.z) >= 0) ? float4(0.3, 0.29104, 0.37947, 0.4) : r22;
		r5 = (-abs(r5.w) >= 0) ? float4(0.42426, 0.33282, 0.37947, 0.53666) : r22;
		r5 = (-abs(r6.x) >= 0) ? float4(0.4, 0.3, 0.29104, 0.37947) : r5;
		r5 = (-abs(r6.y) >= 0) ? float4(0.53666, 0.42426, 0.33282, 0.37947) : r5;
		r5 = (-abs(r6.z) >= 0) ? float4(0.3153, 0.29069, 0.2414, 0.25495) : r5;
		r5 = (-abs(r6.w) >= 0) ? float4(0.36056, 0.29069, 0.26, 0.30641) : r5;
		r5 = (-abs(r7.x) >= 0) ? float4(0.26, 0.21667, 0.21372, 0.25495) : r5;
		r5 = (-abs(r7.y) >= 0) ? float4(0.29069, 0.2414, 0.25495, 0.3153) : r5;
		r5 = (-abs(r7.z) >= 0) ? float4(0.29069, 0.26, 0.30641, 0.36056) : r5;
		r5 = (-abs(r7.w) >= 0) ? float4(0.21667, 0.21372, 0.25495, 0.26) : r5;
		r5 = (-abs(r8.x) >= 0) ? float4(0.175, 0.17365, 0.19799, 0.2) : r5;
		r5 = (-abs(r8.y) >= 0) ? float4(0.22136, 0.2087, 0.2401, 0.25997) : r5;
		r5 = (-abs(r8.z) >= 0) ? float4(0.24749, 0.21864, 0.2401, 0.28) : r5;
		r5 = (-abs(r8.w) >= 0) ? float4(0.22136, 0.1923, 0.19799, 0.23016) : r5;
		r5 = (-abs(r9.x) >= 0) ? float4(0.2, 0.175, 0.17365, 0.19799) : r5;
		r5 = (-abs(r9.y) >= 0) ? float4(0.25997, 0.22136, 0.2087, 0.2401) : r5;
		r5 = (-abs(r9.z) >= 0) ? float4(0.28, 0.24749, 0.21864, 0.2401) : r5;
		r5 = (-abs(r9.w) >= 0) ? float4(0.23016, 0.22136, 0.1923, 0.19799) : r5;
		r5 = r1.w * r5;
		r6 = (r10 >= 0) ? 0 : r5;
		r6 = (r20 >= 0) ? 0 : r6;
		r6 = (r17 >= 0) ? 0 : r6;
		r6 = (r19 >= 0) ? 0 : r6;
		r6 = r3 + r6;
		r18.x = r14.z;
		r18.y = r16.z;
		r18.w = r21.z;
		r7 = r15 + r18;
		r12.w = r11.z;
		r12.x = r24.z;
		r12.y = r13.z;
		r8 = r12 + r25;
		r7 = r1.z + -r7;
		r9 = r7 + -g_RejectDepth.x;
		r7 = -r7 + g_AcceptDepth.x;
		r8 = r1.z + -r8;
		r10 = r8 + -g_RejectDepth.x;
		r8 = -r8 + g_AcceptDepth.x;
		r5 = (r8 >= 0) ? 0 : r5;
		r5 = (r10 >= 0) ? 0 : r5;
		r5 = (r7 >= 0) ? 0 : r5;
		r5 = (r9 >= 0) ? 0 : r5;
		r3 = r5 + r6;
		r4.x = r4.x + 1;
	}
	r0.x = dot(r3, 1);
	r0.y = (r2.y >= 0) ? 0.013367346 : r2.w;
	r0.x = r0.y * r0.x;
	r0.x = r0.x * g_Intensity.x;
	r0.x = -r0.x + 1;
	r1.x = max(g_MaxRate.x, r0.x);
	r0.w = -r1.x + 1;
	r0.xyz = 0;
	o.color = r0.zzzw;
	o.color1 = r0.zzzw;
	o.color2 = r0;

	return o;
}
