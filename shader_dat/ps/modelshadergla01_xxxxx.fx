sampler Color_1_sampler : register(s0);
float4 CubeParam : register(c42);
sampler ShadowCast_Tex_sampler : register(s10);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
samplerCUBE cubemap_sampler : register(s1);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float2 g_ShadowFarInvPs : register(c182);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap_sampler : register(s2);
float4 point_light1 : register(c63);
float4 point_lightpos1 : register(c64);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 tile : register(c44);
float4x4 viewInverseMatrix : register(c12);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float3 r5;
	float3 r6;
	r0.x = 1 / i.texcoord7.w;
	r0.xy = r0.xx * i.texcoord7.xy;
	r0.xy = r0.xy * float2(0.5, -0.5) + 0.5;
	r0.xy = r0.xy + g_TargetUvParam.xy;
	r0 = tex2D(ShadowCast_Tex_sampler, r0);
	r0.y = i.texcoord7.z * g_ShadowFarInvPs.y + -g_ShadowFarInvPs.x;
	r0.y = -r0.y + 1;
	r0.x = -r0.x + r0.y;
	r0.x = r0.x + g_ShadowUse.x;
	r0.y = frac(-r0.x);
	r0.x = r0.y + r0.x;
	r0.yzw = point_lightpos1.xyz + -i.texcoord1.xyz;
	r1.x = dot(r0.yzw, r0.yzw);
	r1.x = 1 / sqrt(r1.x);
	r1.y = 1 / r1.x;
	r0.yzw = r0.yzw * r1.xxx;
	r1.x = -r1.y + point_lightpos1.w;
	r1.x = r1.x * point_light1.w;
	r2.xyz = i.texcoord3.xyz;
	r1.yzw = r2.yzx * i.texcoord2.zxy;
	r1.yzw = i.texcoord2.yzx * r2.zxy + -r1.yzw;
	r2.xy = g_All_Offset.xy;
	r2.xy = i.texcoord.xy * tile.xy + r2.xy;
	r2 = tex2D(normalmap_sampler, r2);
	r2.xyz = r2.xyz + -0.5;
	r1.yzw = r1.yzw * -r2.yyy;
	r2.x = r2.x * i.texcoord2.w;
	r1.yzw = r2.xxx * i.texcoord2.xyz + r1.yzw;
	r1.yzw = r2.zzz * i.texcoord3.xyz + r1.yzw;
	r2.xyz = normalize(r1.yzw);
	r0.y = dot(r0.yzw, r2.xyz);
	r0.yzw = abs(r0.yyy) * point_light1.xyz;
	r0.yzw = r1.xxx * r0.yzw;
	r1.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r1.w = dot(r1.xyz, r1.xyz);
	r1.w = 1 / sqrt(r1.w);
	r2.w = 1 / r1.w;
	r1.xyz = r1.www * r1.xyz;
	r1.x = dot(r1.xyz, r2.xyz);
	r1.xyz = abs(r1.xxx) * muzzle_light.xyz;
	r1.w = -r2.w + muzzle_lightpos.w;
	r1.w = r1.w * muzzle_light.w;
	r0.yzw = r1.xyz * r1.www + r0.yzw;
	r1.x = dot(lightpos.xyz, r2.xyz);
	r1.yzw = abs(r1.xxx) * light_Color.xyz;
	r0.yzw = r1.yzw * r0.xxx + r0.yzw;
	r1.yz = g_All_Offset.xy + i.texcoord.xy;
	r3 = tex2D(Color_1_sampler, r1.yzzw);
	r1.yz = -r3.yy + r3.xz;
	r2.w = max(abs(r1.y), abs(r1.z));
	r1.y = r2.w + -0.015625;
	r1.z = (-r1.y >= 0) ? 0 : 1;
	r1.y = (r1.y >= 0) ? -0 : -1;
	r1.y = r1.y + r1.z;
	r1.y = (r1.y >= 0) ? -r1.y : -0;
	r3.xz = (r1.yy >= 0) ? r3.yy : r3.xz;
	r1.y = r3.w * ambient_rate.w;
	r0.yzw = r0.yzw * r3.xyz;
	r4.xyz = r3.xyz * ambient_rate.xyz;
	r4.xyz = r4.xyz * ambient_rate_rate.xyz;
	r1.z = dot(lightpos.xyz, i.texcoord3.xyz);
	r1.z = -r1.z + r1.x;
	r1.z = r1.z + 1;
	r0.yzw = r4.xyz * r1.zzz + r0.yzw;
	r4.x = dot(r2.xyz, transpose(viewInverseMatrix)[0].xyz);
	r4.y = dot(r2.xyz, transpose(viewInverseMatrix)[1].xyz);
	r4.z = dot(r2.xyz, transpose(viewInverseMatrix)[2].xyz);
	r1.z = dot(i.texcoord4.xyz, r4.xyz);
	r1.z = r1.z + r1.z;
	r4.xyz = r4.xyz * -r1.zzz + i.texcoord4.xyz;
	r4.w = -r4.z;
	r4 = tex2D(cubemap_sampler, r4.xyww);
	r4 = r4 * ambient_rate_rate.w;
	r1.z = r4.w * CubeParam.y + CubeParam.x;
	r4.xyz = r1.zzz * r4.xyz;
	r5.xyz = r3.xyz * r4.xyz;
	r3.xyz = r3.xyz + specularParam.www;
	r6.xyz = r5.xyz * CubeParam.zzz + r0.yzw;
	r5.xyz = r5.xyz * CubeParam.zzz;
	r0.yzw = r0.yzw * -r5.xyz + r6.xyz;
	r1.z = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r1.z = 1 / sqrt(r1.z);
	r5.xyz = -i.texcoord1.xyz * r1.zzz + lightpos.xyz;
	r6.xyz = normalize(r5.xyz);
	r1.z = dot(r6.xyz, r2.xyz);
	r2.x = pow(r1.z, specularParam.z);
	r1.w = (-abs(r1.x) >= 0) ? 0 : 1;
	r1.x = abs(r1.x) * r1.w;
	r1.z = (-r1.z >= 0) ? 0 : r1.w;
	r1.z = r2.x * r1.z;
	r2.xyz = r1.xxx * light_Color.xyz;
	r1.xzw = r1.zzz * r2.xyz;
	r1.xzw = r0.xxx * r1.xzw;
	r0.x = abs(specularParam.x);
	r1.xzw = r0.xxx * r1.xzw;
	r0.xyz = r1.xzw * r3.xyz + r0.yzw;
	r1.xzw = r3.xyz * r1.xzw;
	r2.z = 1;
	r0.w = r2.z + -CubeParam.z;
	r0.xyz = r4.xyz * r0.www + r0.xyz;
	r2.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r2.xyz;
	o.xyz = i.texcoord1.www * r0.xyz + fog.xyz;
	r0.x = max(r1.x, r1.z);
	r2.x = max(r0.x, r1.w);
	r0.x = r2.x * specularParam.x;
	r0.y = max(CubeParam.x, CubeParam.y);
	r0.x = r4.w * r0.y + r0.x;
	r2.x = max(r0.x, r1.y);
	r0.x = r2.x * prefogcolor_enhance.w;
	o.w = r0.x;

	return o;
}
