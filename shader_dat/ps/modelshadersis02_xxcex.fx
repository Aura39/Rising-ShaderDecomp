sampler Color_1_sampler : register(s0);
float4 CubeParam : register(c42);
sampler ShadowCast_Tex_sampler : register(s10);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
samplerCUBE cubemap_sampler : register(s3);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float2 g_ShadowFarInvPs : register(c182);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap_sampler : register(s4);
float4 point_light1 : register(c63);
float4 point_lightpos1 : register(c64);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 tile : register(c43);
float4x4 viewInverseMatrix : register(c12);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float3 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
	float4 texcoord8 : TEXCOORD8;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float3 r4;
	float4 r5;
	float3 r6;
	r0.xy = g_All_Offset.xy + i.texcoord.xy;
	r0 = tex2D(Color_1_sampler, r0);
	r1 = r0.w + -0.01;
	clip(r1);
	r1.xy = -r0.yy + r0.xz;
	r2.x = max(abs(r1.x), abs(r1.y));
	r1.x = r2.x + -0.015625;
	r1.y = (-r1.x >= 0) ? 0 : 1;
	r1.x = (r1.x >= 0) ? -0 : -1;
	r1.x = r1.x + r1.y;
	r1.x = (r1.x >= 0) ? -r1.x : -0;
	r0.xz = (r1.xx >= 0) ? r0.yy : r0.xz;
	r1.x = 1 / ambient_rate.w;
	r0.w = r0.w * prefogcolor_enhance.w;
	o.w = r0.w;
	r1.yzw = r0.xyz * r1.xxx;
	r0.xyz = r0.xyz * r1.xxx + specularParam.www;
	r0.w = 1 / i.texcoord7.w;
	r2.xy = r0.ww * i.texcoord7.xy;
	r2.xy = r2.xy * float2(0.5, -0.5) + 0.5;
	r2.xy = r2.xy + g_TargetUvParam.xy;
	r2 = tex2D(ShadowCast_Tex_sampler, r2);
	r0.w = i.texcoord7.z * g_ShadowFarInvPs.y + -g_ShadowFarInvPs.x;
	r0.w = -r0.w + 1;
	r0.w = -r2.x + r0.w;
	r0.w = r0.w + g_ShadowUse.x;
	r1.x = frac(-r0.w);
	r0.w = r0.w + r1.x;
	r2.xyz = ambient_rate_rate.xyz;
	r2.xyz = r0.www * r2.xyz + ambient_rate.xyz;
	r3.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r4.xyz = normalize(r3.xyz);
	r3.xyz = i.texcoord3.xyz;
	r5.xyz = r3.yzx * i.texcoord2.zxy;
	r3.xyz = i.texcoord2.yzx * r3.zxy + -r5.xyz;
	r5.xy = g_All_Offset.xy;
	r5.xy = i.texcoord.xy * tile.xy + r5.xy;
	r5 = tex2D(normalmap_sampler, r5);
	r5.xyz = r5.xyz + -0.5;
	r3.xyz = r3.xyz * -r5.yyy;
	r1.x = r5.x * i.texcoord2.w;
	r3.xyz = r1.xxx * i.texcoord2.xyz + r3.xyz;
	r3.xyz = r5.zzz * i.texcoord3.xyz + r3.xyz;
	r5.xyz = normalize(r3.xyz);
	r1.x = dot(r4.xyz, r5.xyz);
	r3.xyz = r1.xxx * point_light1.xyz;
	r3.xyz = r3.xyz * i.texcoord8.xxx;
	r4.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r6.xyz = normalize(r4.xyz);
	r1.x = dot(r6.xyz, r5.xyz);
	r4.xyz = r1.xxx * muzzle_light.xyz;
	r3.xyz = r4.xyz * i.texcoord8.zzz + r3.xyz;
	r1.x = dot(lightpos.xyz, i.texcoord3.xyz);
	r2.w = dot(lightpos.xyz, r5.xyz);
	r1.x = -r1.x + r2.w;
	r2.w = r2.w;
	r1.x = r1.x + 1;
	r1.x = r1.x * 0.5 + 0.5;
	r2.xyz = r1.xxx * r2.xyz + r3.xyz;
	r2.xyz = r1.yzw * r2.xyz;
	r3.x = dot(r5.xyz, transpose(viewInverseMatrix)[0].xyz);
	r3.y = dot(r5.xyz, transpose(viewInverseMatrix)[1].xyz);
	r3.z = dot(r5.xyz, transpose(viewInverseMatrix)[2].xyz);
	r1.x = dot(i.texcoord4.xyz, r3.xyz);
	r1.x = r1.x + r1.x;
	r3.xyz = r3.xyz * -r1.xxx + i.texcoord4.xyz;
	r3.w = -r3.z;
	r3 = tex2D(cubemap_sampler, r3.xyww);
	r3 = r3 * ambient_rate_rate.w;
	r3.xyz = r5.www * r3.xyz;
	r1.x = r3.w * CubeParam.y + CubeParam.x;
	r3.xyz = r1.xxx * r3.xyz;
	r1.xyz = r1.yzw * r3.xyz;
	r4.xyz = r1.xyz * CubeParam.zzz + r2.xyz;
	r1.xyz = r1.xyz * CubeParam.zzz;
	r1.xyz = r2.xyz * -r1.xyz + r4.xyz;
	r1.w = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r1.w = 1 / sqrt(r1.w);
	r2.xyz = -i.texcoord1.xyz * r1.www + lightpos.xyz;
	r4.xyz = normalize(r2.xyz);
	r1.w = dot(r4.xyz, r5.xyz);
	r2.x = pow(r1.w, specularParam.z);
	r2.y = (-r2.w >= 0) ? 0 : 1;
	r2.z = r2.w * r2.y;
	r1.w = (-r1.w >= 0) ? 0 : r2.y;
	r1.w = r2.x * r1.w;
	r2.xyz = r2.zzz * light_Color.xyz;
	r2.xyz = r1.www * r2.xyz;
	r2.xyz = r5.www * r2.xyz;
	r2.xyz = r0.www * r2.xyz;
	r0.w = abs(specularParam.x);
	r2.xyz = r0.www * r2.xyz;
	r0.xyz = r2.xyz * r0.xyz + r1.xyz;
	r1.z = 1;
	r0.w = r1.z + -CubeParam.z;
	r0.xyz = r3.xyz * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord8.www * r0.xyz + fog.xyz;

	return o;
}
