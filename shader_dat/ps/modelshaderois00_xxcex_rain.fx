sampler Color_1_sampler : register(s0);
float4 CubeParam : register(c42);
sampler RainNormal_sampler : register(s9);
sampler Shadow_Tex_sampler : register(s11);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
samplerCUBE cubemap_sampler : register(s2);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_testUvParam : register(c179);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap_sampler : register(s3);
float4 point_light1 : register(c63);
float4 point_lightpos1 : register(c64);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 tile : register(c43);
float4x4 viewInverseMatrix : register(c12);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float3 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
	float4 texcoord8 : TEXCOORD8;
	float3 texcoord5 : TEXCOORD5;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float3 r5;
	float3 r6;
	float3 r7;
	r0.x = 1 / i.texcoord7.w;
	r0.xy = r0.xx * i.texcoord7.xy;
	r0.xy = r0.xy * float2(0.5, -0.5) + 0.5;
	r0.xy = r0.xy + g_TargetUvParam.xy;
	r0 = tex2D(Shadow_Tex_sampler, r0);
	r0.x = r0.z + g_ShadowUse.x;
	r0.y = -r0.x + 1;
	r0.zw = g_All_Offset.xy + i.texcoord.xy;
	r1 = tex2D(Color_1_sampler, r0.zwzw);
	r2.xyz = r1.xyz * i.texcoord5.xyz;
	r0.yzw = r0.yyy * r2.xyz;
	r2.xyz = r1.xyz * ambient_rate.xyz;
	r0.yzw = r2.xyz * ambient_rate_rate.xyz + r0.yzw;
	r2.x = dot(lightpos.xyz, i.texcoord3.xyz);
	r3.xyz = i.texcoord3.xyz;
	r2.yzw = r3.yzx * i.texcoord2.zxy;
	r2.yzw = i.texcoord2.yzx * r3.zxy + -r2.yzw;
	r3.xy = i.texcoord.xy * g_testUvParam.zz + g_testUvParam.xy;
	r3 = tex2D(RainNormal_sampler, r3);
	r3.xy = r3.xy + -0.5;
	r4.xy = g_All_Offset.xy;
	r3.zw = i.texcoord.xy * tile.xy + r4.xy;
	r4 = tex2D(normalmap_sampler, r3.zwzw);
	r4.xyz = r4.xyz + -0.5;
	r3.zw = r3.xy * g_testUvParam.ww + r4.xy;
	r3.x = dot(r3.x, r3.x) + 0;
	r3.x = 1 / sqrt(r3.x);
	r3.x = 1 / r3.x;
	r2.yzw = r2.yzw * -r3.www;
	r3.y = r3.z * i.texcoord2.w;
	r2.yzw = r3.yyy * i.texcoord2.xyz + r2.yzw;
	r2.yzw = r4.zzz * i.texcoord3.xyz + r2.yzw;
	r4.xyz = normalize(r2.yzw);
	r2.y = dot(lightpos.xyz, r4.xyz);
	r2.x = -r2.x + r2.y;
	r2.y = r2.y;
	r2.x = r2.x + 1;
	r3.yzw = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r5.xyz = normalize(r3.yzw);
	r2.z = dot(r5.xyz, r4.xyz);
	r3.yzw = r2.zzz * muzzle_light.xyz;
	r5.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r6.xyz = normalize(r5.xyz);
	r2.z = dot(r6.xyz, r4.xyz);
	r5.xyz = r2.zzz * point_light1.xyz;
	r5.xyz = r5.xyz * i.texcoord8.xxx;
	r3.yzw = r3.yzw * i.texcoord8.zzz + r5.xyz;
	r5.xyz = r2.yyy * light_Color.xyz;
	r3.yzw = r5.xyz * r0.xxx + r3.yzw;
	r0.x = r1.w * r0.x + r3.x;
	r2.w = r3.x * 0.5 + r4.w;
	r3.xyz = r1.xyz * r3.yzw;
	r0.yzw = r0.yzw * r2.xxx + r3.xyz;
	r3.x = dot(r4.xyz, transpose(viewInverseMatrix)[0].xyz);
	r3.y = dot(r4.xyz, transpose(viewInverseMatrix)[1].xyz);
	r3.z = dot(r4.xyz, transpose(viewInverseMatrix)[2].xyz);
	r2.x = dot(i.texcoord4.xyz, r3.xyz);
	r2.x = r2.x + r2.x;
	r3.xyz = r3.xyz * -r2.xxx + i.texcoord4.xyz;
	r3.w = -r3.z;
	r3 = tex2D(cubemap_sampler, r3.xyww);
	r3 = r3 * ambient_rate_rate.w;
	r3.xyz = r2.www * r3.xyz;
	r2.x = r2.y * 0.5 + 0.5;
	r3 = r2.x * r3;
	r2.x = r3.w * CubeParam.y + CubeParam.x;
	r3.xyz = r2.xxx * r3.xyz;
	r5.xyz = r1.xyz * r3.xyz;
	r7.xyz = r5.xyz * CubeParam.zzz + r0.yzw;
	r5.xyz = r5.xyz * CubeParam.zzz;
	r0.yzw = r0.yzw * -r5.xyz + r7.xyz;
	r2.x = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r2.x = 1 / sqrt(r2.x);
	r5.xyz = -i.texcoord1.xyz * r2.xxx + r6.xyz;
	r6.xyz = -i.texcoord1.xyz * r2.xxx + lightpos.xyz;
	r7.xyz = normalize(r6.xyz);
	r2.x = dot(r7.xyz, r4.xyz);
	r6.xyz = normalize(r5.xyz);
	r2.w = dot(r6.xyz, r4.xyz);
	r3.w = pow(r2.w, specularParam.z);
	r4.x = (-r2.z >= 0) ? 0 : 1;
	r2.z = r2.z * r4.x;
	r2.w = (-r2.w >= 0) ? 0 : r4.x;
	r2.w = r3.w * r2.w;
	r4.xyz = r2.zzz * point_light1.xyz;
	r4.xyz = r2.www * r4.xyz;
	r4.xyz = r1.www * r4.xyz;
	r1.xyz = r1.xyz + specularParam.www;
	r4.xyz = r4.xyz * 0.5;
	r1.w = pow(r2.x, specularParam.z);
	r2.z = (-r2.y >= 0) ? 0 : 1;
	r2.y = r2.y * r2.z;
	r2.x = (-r2.x >= 0) ? 0 : r2.z;
	r1.w = r1.w * r2.x;
	r2.xyz = r2.yyy * light_Color.xyz;
	r2.xyz = r1.www * r2.xyz;
	r2.xyz = r2.xyz * r0.xxx + r4.xyz;
	r0.x = abs(specularParam.x);
	r2.xyz = r0.xxx * r2.xyz;
	r0.xyz = r2.xyz * r1.xyz + r0.yzw;
	r0.w = 1;
	r0.w = r0.w + -CubeParam.z;
	r0.xyz = r3.xyz * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord8.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
