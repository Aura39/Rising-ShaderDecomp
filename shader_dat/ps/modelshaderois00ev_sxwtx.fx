sampler Color_1_sampler : register(s0);
float4 CubeParam : register(c42);
sampler Shadow_Tex_sampler : register(s11);
sampler Spec_Pow_sampler : register(s4);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
samplerCUBE cubemap2_sampler : register(s9);
samplerCUBE cubemap_sampler : register(s2);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_CubeBlendParam : register(c175);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_specCalc1 : register(c190);
float4 g_specCalc2 : register(c191);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
float4 point_light1 : register(c63);
float4 point_light2 : register(c65);
float4 point_lightEv0 : register(c184);
float4 point_lightEv1 : register(c186);
float4 point_lightEv2 : register(c188);
float4 point_lightpos1 : register(c64);
float4 point_lightpos2 : register(c66);
float4 point_lightposEv0 : register(c185);
float4 point_lightposEv1 : register(c187);
float4 point_lightposEv2 : register(c189);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 spot_angle : register(c72);
float4 spot_param : register(c73);
float4 tile : register(c43);
sampler tripleMask_sampler : register(s1);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float3 texcoord1 : TEXCOORD1;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
	float4 texcoord8 : TEXCOORD8;
	float3 texcoord5 : TEXCOORD5;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	float4 r7;
	float4 r8;
	r0.x = 1 / i.texcoord7.w;
	r0.xy = r0.xx * i.texcoord7.xy;
	r0.xy = r0.xy * float2(0.5, -0.5) + 0.5;
	r0.xy = r0.xy + g_TargetUvParam.xy;
	r0 = tex2D(Shadow_Tex_sampler, r0);
	r0.x = r0.z + g_ShadowUse.x;
	r0.y = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r0.y = 1 / sqrt(r0.y);
	r1.xyz = -i.texcoord1.xyz * r0.yyy + lightpos.xyz;
	r0.yzw = r0.yyy * -i.texcoord1.xyz;
	r2.xyz = normalize(r1.xyz);
	r1.x = dot(r2.xyz, i.texcoord3.xyz);
	r1.y = -r1.x + 1;
	r1.x = r1.y * -specularParam.z + r1.x;
	r1.yw = specularParam.yy;
	r2 = tex2D(Spec_Pow_sampler, r1);
	r2.xyz = r2.xyz * light_Color.xyz;
	r1.xy = tile.xy * i.texcoord.xy;
	r3 = tex2D(tripleMask_sampler, r1);
	r2.xyz = r2.xyz * r3.zzz;
	r4.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r1.x = dot(r4.xyz, r4.xyz);
	r1.x = 1 / sqrt(r1.x);
	r5.xyz = r4.xyz * r1.xxx + r0.yzw;
	r4.xyz = r1.xxx * r4.xyz;
	r1.x = 1 / r1.x;
	r1.x = -r1.x + point_lightpos1.w;
	r1.x = r1.x * point_light1.w;
	r1.y = dot(r4.xyz, i.texcoord3.xyz);
	r4.xyz = r1.yyy * point_light1.xyz;
	r4.xyz = r1.xxx * r4.xyz;
	r6.xyz = normalize(r5.xyz);
	r1.y = dot(r6.xyz, i.texcoord3.xyz);
	r2.w = -r1.y + 1;
	r1.z = r2.w * -specularParam.z + r1.y;
	r5 = tex2D(Spec_Pow_sampler, r1.zwzw);
	r1.yzw = r5.xyz * point_light1.xyz;
	r1.xyz = r1.xxx * r1.yzw;
	r1.xyz = r3.zzz * r1.xyz;
	r5 = g_specCalc1;
	r1.xyz = r1.xyz * r5.xxx;
	r1.xyz = r2.xyz * r0.xxx + r1.xyz;
	r2.xyz = point_lightpos2.xyz + -i.texcoord1.xyz;
	r1.w = dot(r2.xyz, r2.xyz);
	r1.w = 1 / sqrt(r1.w);
	r6.xyz = r2.xyz * r1.www + r0.yzw;
	r2.xyz = r1.www * r2.xyz;
	r1.w = 1 / r1.w;
	r1.w = -r1.w + point_lightpos2.w;
	r1.w = r1.w * point_light2.w;
	r2.x = dot(r2.xyz, i.texcoord3.xyz);
	r2.xyz = r2.xxx * point_light2.xyz;
	r2.xyz = r1.www * r2.xyz;
	r7.xyz = normalize(r6.xyz);
	r2.w = dot(r7.xyz, i.texcoord3.xyz);
	r3.x = -r2.w + 1;
	r6.x = r3.x * -specularParam.z + r2.w;
	r6.yw = specularParam.yy;
	r7 = tex2D(Spec_Pow_sampler, r6);
	r7.xyz = r7.xyz * point_light2.xyz;
	r7.xyz = r1.www * r7.xyz;
	r7.xyz = r3.zzz * r7.xyz;
	r1.xyz = r7.xyz * r5.yyy + r1.xyz;
	r7.xyz = point_lightposEv0.xyz + -i.texcoord1.xyz;
	r1.w = dot(r7.xyz, r7.xyz);
	r1.w = 1 / sqrt(r1.w);
	r8.xyz = r7.xyz * r1.www + r0.yzw;
	r7.xyz = r1.www * r7.xyz;
	r1.w = 1 / r1.w;
	r1.w = -r1.w + point_lightposEv0.w;
	r1.w = r1.w * point_lightEv0.w;
	r2.w = dot(r7.xyz, i.texcoord3.xyz);
	r7.xyz = normalize(r8.xyz);
	r3.x = dot(r7.xyz, i.texcoord3.xyz);
	r4.w = -r3.x + 1;
	r6.z = r4.w * -specularParam.z + r3.x;
	r6 = tex2D(Spec_Pow_sampler, r6.zwzw);
	r6.xyz = r6.xyz * point_lightEv0.xyz;
	r6.xyz = r1.www * r6.xyz;
	r6.xyz = r3.zzz * r6.xyz;
	r1.xyz = r6.xyz * r5.zzz + r1.xyz;
	r5.xyz = point_lightposEv1.xyz + -i.texcoord1.xyz;
	r3.x = dot(r5.xyz, r5.xyz);
	r3.x = 1 / sqrt(r3.x);
	r6.xyz = r5.xyz * r3.xxx + r0.yzw;
	r5.xyz = r3.xxx * r5.xyz;
	r3.x = 1 / r3.x;
	r3.x = -r3.x + point_lightposEv1.w;
	r3.x = r3.x * point_lightEv1.w;
	r4.w = dot(r5.xyz, i.texcoord3.xyz);
	r5.xyz = normalize(r6.xyz);
	r5.x = dot(r5.xyz, i.texcoord3.xyz);
	r5.y = -r5.x + 1;
	r6.x = r5.y * -specularParam.z + r5.x;
	r6.yw = specularParam.yy;
	r7 = tex2D(Spec_Pow_sampler, r6);
	r5.xyz = r7.xyz * point_lightEv1.xyz;
	r5.xyz = r3.xxx * r5.xyz;
	r5.xyz = r3.zzz * r5.xyz;
	r1.xyz = r5.xyz * r5.www + r1.xyz;
	r5.x = g_specCalc2.x;
	r5.yzw = point_lightposEv2.xyz + -i.texcoord1.xyz;
	r6.x = dot(r5.yzw, r5.yzw);
	r6.x = 1 / sqrt(r6.x);
	r0.yzw = r5.yzw * r6.xxx + r0.yzw;
	r5.yzw = r5.yzw * r6.xxx;
	r6.x = 1 / r6.x;
	r6.x = -r6.x + point_lightposEv2.w;
	r6.x = r6.x * point_lightEv2.w;
	r5.y = dot(r5.yzw, i.texcoord3.xyz);
	r7.xyz = normalize(r0.yzw);
	r0.y = dot(r7.xyz, i.texcoord3.xyz);
	r0.z = -r0.y + 1;
	r6.z = r0.z * -specularParam.z + r0.y;
	r7 = tex2D(Spec_Pow_sampler, r6.zwzw);
	r0.yzw = r7.xyz * point_lightEv2.xyz;
	r0.yzw = r6.xxx * r0.yzw;
	r0.yzw = r3.zzz * r0.yzw;
	r0.yzw = r0.yzw * r5.xxx + r1.xyz;
	r1.x = abs(specularParam.x);
	r0.yzw = r0.yzw * r1.xxx;
	r7 = g_specCalc1;
	r7 = -r7 + 2;
	r1.xyz = r4.xyz * r7.xxx;
	r4.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r3.z = dot(r4.xyz, r4.xyz);
	r3.z = 1 / sqrt(r3.z);
	r4.xyz = r3.zzz * r4.xyz;
	r3.z = 1 / r3.z;
	r3.z = -r3.z + muzzle_lightpos.w;
	r3.z = r3.z * muzzle_light.w;
	r4.x = dot(r4.xyz, i.texcoord3.xyz);
	r4.xyz = r4.xxx * muzzle_light.xyz;
	r1.xyz = r4.xyz * r3.zzz + r1.xyz;
	r1.xyz = r2.xyz * r7.yyy + r1.xyz;
	r2.y = 1;
	r2.x = r2.y + -spot_param.x;
	r2.x = 1 / r2.x;
	r4.xyz = spot_angle.xyz + -i.texcoord1.xyz;
	r2.z = dot(r4.xyz, r4.xyz);
	r2.z = 1 / sqrt(r2.z);
	r4.xyz = r2.zzz * r4.xyz;
	r2.z = 1 / r2.z;
	r3.z = dot(r4.xyz, lightpos.xyz);
	r3.z = r3.z + -spot_param.x;
	r2.x = r2.x * r3.z;
	r4.x = max(r3.z, 0);
	r3.z = 1 / spot_param.y;
	r2.x = r2.x * r3.z;
	r3.z = frac(-r4.x);
	r3.z = r3.z + r4.x;
	r4.x = dot(lightpos.xyz, i.texcoord3.xyz);
	r3.z = r3.z * r4.x;
	r2.x = r2.x * r3.z;
	r3.z = 1 / spot_angle.w;
	r2.z = r2.z * r3.z;
	r2.z = -r2.z + 1;
	r2.z = r2.z * 10;
	r2.x = r2.z * r2.x;
	r3.z = lerp(r2.x, r4.x, spot_param.z);
	r4.xyz = r3.zzz * light_Color.xyz;
	r2.x = r3.z * 0.5 + 0.5;
	r1.xyz = r4.xyz * r0.xxx + r1.xyz;
	r0.x = -r0.x + 1;
	r4.xy = g_All_Offset.xy + i.texcoord.xy;
	r8 = tex2D(Color_1_sampler, r4);
	r4.xy = -r8.yy + r8.xz;
	r2.z = max(abs(r4.x), abs(r4.y));
	r2.z = r2.z + -0.015625;
	r3.z = (-r2.z >= 0) ? 0 : 1;
	r2.z = (r2.z >= 0) ? -0 : -1;
	r2.z = r2.z + r3.z;
	r2.z = (r2.z >= 0) ? -r2.z : -0;
	r8.xz = (r2.zz >= 0) ? r8.yy : r8.xz;
	r4.xyz = r8.xyz * point_lightEv0.xyz;
	r4.xyz = r2.www * r4.xyz;
	r4.xyz = r1.www * r4.xyz;
	r4.xyz = r7.zzz * r4.xyz;
	r1.xyz = r8.xyz * r1.xyz + r4.xyz;
	r4.xyz = r8.xyz * point_lightEv1.xyz;
	r4.xyz = r4.www * r4.xyz;
	r4.xyz = r3.xxx * r4.xyz;
	r1.xyz = r4.xyz * r7.www + r1.xyz;
	r3.x = 2;
	r1.w = r3.x + -g_specCalc2.x;
	r4.xyz = r8.xyz * point_lightEv2.xyz;
	r4.xyz = r5.yyy * r4.xyz;
	r4.xyz = r6.xxx * r4.xyz;
	r1.xyz = r4.xyz * r1.www + r1.xyz;
	r4.xyz = r8.xyz * i.texcoord5.xyz;
	r4.xyz = r0.xxx * r4.xyz;
	r5.xyz = r8.xyz * ambient_rate.xyz;
	r4.xyz = r5.xyz * ambient_rate_rate.xyz + r4.xyz;
	r1.xyz = r1.xyz * r3.www + r4.xyz;
	r4 = tex2D(cubemap_sampler, i.texcoord4);
	r5 = tex2D(cubemap2_sampler, i.texcoord4);
	r6 = lerp(r5, r4, g_CubeBlendParam.x);
	r4 = r6 * ambient_rate_rate.w;
	r4.xyz = r3.yyy * r4.xyz;
	r3 = r2.x * r4;
	r0.x = r3.w * CubeParam.y + CubeParam.x;
	r2.xzw = r0.xxx * r3.xyz;
	r3.xyz = r8.xyz * r2.xzw;
	r4.xyz = r8.xyz + specularParam.www;
	r5.xyz = r3.xyz * CubeParam.zzz + r1.xyz;
	r3.xyz = r3.xyz * CubeParam.zzz;
	r1.xyz = r1.xyz * -r3.xyz + r5.xyz;
	r0.xyz = r0.yzw * r4.xyz + r1.xyz;
	r0.w = r2.y + -CubeParam.z;
	r0.xyz = r2.xzw * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord8.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
