sampler Color_1_sampler : register(s0);
sampler Shadow_Tex_sampler : register(s11);
sampler Spec_Pow_sampler : register(s3);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
float aniso_diff_rate : register(c44);
float aniso_shine : register(c45);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 g_specCalc1 : register(c190);
float4 g_specCalc2 : register(c191);
float hll_rate : register(c43);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap_sampler : register(s1);
float4 point_light1 : register(c63);
float4 point_light2 : register(c65);
float4 point_lightEv0 : register(c184);
float4 point_lightEv1 : register(c186);
float4 point_lightEv2 : register(c188);
float4 point_lightpos1 : register(c64);
float4 point_lightpos2 : register(c66);
float4 point_lightposEv0 : register(c185);
float4 point_lightposEv1 : register(c187);
float4 point_lightposEv2 : register(c189);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
sampler specularmap_sampler : register(s2);
float4 spot_angle : register(c72);
float4 spot_param : register(c73);
float4 tile : register(c46);

struct PS_IN
{
	float color : COLOR;
	float2 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	float4 r7;
	float4 r8;
	float4 r9;
	float4 r10;
	float4 r11;
	float3 r12;
	r0.xy = g_All_Offset.xy + i.texcoord.xy;
	r1 = tex2D(Color_1_sampler, r0);
	r0 = tex2D(specularmap_sampler, r0);
	r2.x = -0.01;
	r2 = r1.w * ambient_rate.w + r2.x;
	clip(r2);
	r0.w = 1 / i.texcoord7.w;
	r2.xy = r0.ww * i.texcoord7.xy;
	r2.xy = r2.xy * float2(0.5, -0.5) + 0.5;
	r2.xy = r2.xy + g_TargetUvParam.xy;
	r2 = tex2D(Shadow_Tex_sampler, r2);
	r0.w = r2.z + g_ShadowUse.x;
	r2.xyz = lightpos.xyz + -i.texcoord1.xyz;
	r3.xyz = normalize(r2.xyz);
	r2.xyz = i.texcoord3.xyz;
	r4.xyz = r2.yzx * i.texcoord2.zxy;
	r2.xyz = i.texcoord2.yzx * r2.zxy + -r4.xyz;
	r2.w = dot(r3.xyz, r2.xyz);
	r3.y = 1;
	r2.w = abs(r2.w) * -aniso_shine.x + r3.y;
	r3.x = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r3.x = 1 / sqrt(r3.x);
	r4.xyz = -i.texcoord1.xyz * r3.xxx + lightpos.xyz;
	r3.xzw = r3.xxx * -i.texcoord1.xyz;
	r5.xyz = normalize(r4.xyz);
	r4.xy = g_All_Offset.xy;
	r4.xy = i.texcoord.xy * tile.xy + r4.xy;
	r4 = tex2D(normalmap_sampler, r4);
	r4.xyz = r4.xyz + -0.5;
	r4.x = r4.x * i.texcoord2.w;
	r6.xyz = r2.xyz * -r4.yyy;
	r4.xyw = r4.xxx * i.texcoord2.xyz + r6.xyz;
	r4.xyz = r4.zzz * i.texcoord3.xyz + r4.xyw;
	r6.xyz = normalize(r4.xyz);
	r4.x = dot(r5.xyz, r6.xyz);
	r4.y = -r4.x + 1;
	r4.x = r4.y * -specularParam.z + r4.x;
	r4.x = r2.w * r4.x;
	r4.yw = specularParam.yy;
	r5 = tex2D(Spec_Pow_sampler, r4);
	r5.xyz = r5.xyz * light_Color.xyz;
	r5.xyz = r0.xyz * r5.xyz;
	r7.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r2.w = dot(r7.xyz, r7.xyz);
	r2.w = 1 / sqrt(r2.w);
	r8.xyz = r7.xyz * r2.www + -i.texcoord1.xyz;
	r9.xyz = normalize(r8.xyz);
	r4.x = dot(r9.xyz, r2.xyz);
	r4.x = abs(r4.x) * -aniso_shine.x + r3.y;
	r8.xyz = r7.xyz * r2.www + r3.xzw;
	r7.xyz = r2.www * r7.xyz;
	r2.w = 1 / r2.w;
	r2.w = -r2.w + point_lightpos1.w;
	r2.w = r2.w * point_light1.w;
	r7.z = dot(r7.xyz, r6.xyz);
	r9.xyz = normalize(r8.xyz);
	r4.y = dot(r9.xyz, r6.xyz);
	r5.w = -r4.y + 1;
	r4.y = r5.w * -specularParam.z + r4.y;
	r4.z = r4.x * r4.y;
	r4 = tex2D(Spec_Pow_sampler, r4.zwzw);
	r4.xyz = r4.xyz * point_light1.xyz;
	r4.xyz = r2.www * r4.xyz;
	r4.xyz = r0.xyz * r4.xyz;
	r8 = g_specCalc1;
	r4.xyz = r4.xyz * r8.xxx;
	r4.xyz = r5.xyz * r0.www + r4.xyz;
	r5.xyz = point_lightpos2.xyz + -i.texcoord1.xyz;
	r4.w = dot(r5.xyz, r5.xyz);
	r4.w = 1 / sqrt(r4.w);
	r9.xyz = r5.xyz * r4.www + -i.texcoord1.xyz;
	r10.xyz = normalize(r9.xyz);
	r5.w = dot(r10.xyz, r2.xyz);
	r5.w = abs(r5.w) * -aniso_shine.x + r3.y;
	r9.xyz = r5.xyz * r4.www + r3.xzw;
	r5.xyz = r4.www * r5.xyz;
	r4.w = 1 / r4.w;
	r4.w = -r4.w + point_lightpos2.w;
	r4.w = r4.w * point_light2.w;
	r7.y = dot(r5.xyz, r6.xyz);
	r5.xyz = normalize(r9.xyz);
	r5.x = dot(r5.xyz, r6.xyz);
	r5.y = -r5.x + 1;
	r5.x = r5.y * -specularParam.z + r5.x;
	r5.x = r5.w * r5.x;
	r5.yw = specularParam.yy;
	r9 = tex2D(Spec_Pow_sampler, r5);
	r9.xyz = r9.xyz * point_light2.xyz;
	r9.xyz = r4.www * r9.xyz;
	r9.xyz = r0.xyz * r9.xyz;
	r4.xyz = r9.xyz * r8.yyy + r4.xyz;
	r9.xyz = point_lightposEv0.xyz + -i.texcoord1.xyz;
	r5.x = dot(r9.xyz, r9.xyz);
	r5.x = 1 / sqrt(r5.x);
	r10.xyz = r9.xyz * r5.xxx + -i.texcoord1.xyz;
	r11.xyz = normalize(r10.xyz);
	r5.y = dot(r11.xyz, r2.xyz);
	r5.y = abs(r5.y) * -aniso_shine.x + r3.y;
	r10.xyz = r9.xyz * r5.xxx + r3.xzw;
	r9.xyz = r5.xxx * r9.xyz;
	r5.x = 1 / r5.x;
	r5.x = -r5.x + point_lightposEv0.w;
	r5.x = r5.x * point_lightEv0.w;
	r5.x = r5.x * i.color.x;
	r9.y = dot(r9.xyz, r6.xyz);
	r11.xyz = normalize(r10.xyz);
	r6.w = dot(r11.xyz, r6.xyz);
	r8.x = -r6.w + 1;
	r6.w = r8.x * -specularParam.z + r6.w;
	r5.z = r5.y * r6.w;
	r10 = tex2D(Spec_Pow_sampler, r5.zwzw);
	r5.yzw = r10.xyz * point_lightEv0.xyz;
	r5.yzw = r5.xxx * r5.yzw;
	r5.yzw = r0.xyz * r5.yzw;
	r4.xyz = r5.yzw * r8.zzz + r4.xyz;
	r5.yzw = point_lightposEv1.xyz + -i.texcoord1.xyz;
	r6.w = dot(r5.yzw, r5.yzw);
	r6.w = 1 / sqrt(r6.w);
	r8.xyz = r5.yzw * r6.www + r3.xzw;
	r10.xyz = normalize(r8.xyz);
	r8.x = dot(r10.xyz, r6.xyz);
	r8.y = -r8.x + 1;
	r8.x = r8.y * -specularParam.z + r8.x;
	r10.xyz = r5.yzw * r6.www + -i.texcoord1.xyz;
	r5.yzw = r5.yzw * r6.www;
	r6.w = 1 / r6.w;
	r6.w = -r6.w + point_lightposEv1.w;
	r6.w = r6.w * point_lightEv1.w;
	r6.w = r6.w * i.color.x;
	r9.x = dot(r5.yzw, r6.xyz);
	r11.xyz = normalize(r10.xyz);
	r5.y = dot(r11.xyz, r2.xyz);
	r5.y = abs(r5.y) * -aniso_shine.x + r3.y;
	r10.x = r5.y * r8.x;
	r10.yw = specularParam.yy;
	r11 = tex2D(Spec_Pow_sampler, r10);
	r5.yzw = r11.xyz * point_lightEv1.xyz;
	r5.yzw = r6.www * r5.yzw;
	r5.yzw = r0.xyz * r5.yzw;
	r4.xyz = r5.yzw * r8.www + r4.xyz;
	r5.y = g_specCalc2.x;
	r8.xyz = point_lightposEv2.xyz + -i.texcoord1.xyz;
	r5.z = dot(r8.xyz, r8.xyz);
	r5.z = 1 / sqrt(r5.z);
	r3.xzw = r8.xyz * r5.zzz + r3.xzw;
	r11.xyz = normalize(r3.xzw);
	r3.x = dot(r11.xyz, r6.xyz);
	r3.z = -r3.x + 1;
	r3.x = r3.z * -specularParam.z + r3.x;
	r11.xyz = r8.xyz * r5.zzz + -i.texcoord1.xyz;
	r8.xyz = r5.zzz * r8.xyz;
	r3.z = 1 / r5.z;
	r3.z = -r3.z + point_lightposEv2.w;
	r3.z = r3.z * point_lightEv2.w;
	r3.z = r3.z * i.color.x;
	r8.x = dot(r8.xyz, r6.xyz);
	r12.xyz = normalize(r11.xyz);
	r2.x = dot(r12.xyz, r2.xyz);
	r2.x = abs(r2.x) * -aniso_shine.x + r3.y;
	r10.z = r2.x * r3.x;
	r10 = tex2D(Spec_Pow_sampler, r10.zwzw);
	r2.xyz = r10.xyz * point_lightEv2.xyz;
	r2.xyz = r3.zzz * r2.xyz;
	r0.xyz = r0.xyz * r2.xyz;
	r0.xyz = r0.xyz * r5.yyy + r4.xyz;
	r2.x = abs(specularParam.x);
	r0.xyz = r0.xyz * r2.xxx;
	r2.xy = -r1.yy + r1.xz;
	r3.x = max(abs(r2.x), abs(r2.y));
	r2.x = r3.x + -0.015625;
	r2.y = (-r2.x >= 0) ? 0 : 1;
	r2.x = (r2.x >= 0) ? -0 : -1;
	r2.x = r2.x + r2.y;
	r2.x = (r2.x >= 0) ? -r2.x : -0;
	r1.xz = (r2.xx >= 0) ? r1.yy : r1.xz;
	r1.w = r1.w * ambient_rate.w;
	r1.w = r1.w * prefogcolor_enhance.w;
	o.w = r1.w;
	r2.xyz = r1.xyz + specularParam.www;
	r0.xyz = r0.xyz * r2.xyz;
	r7.w = dot(i.texcoord1.xyz, -r6.xyz);
	r2.xy = r7.zw;
	r2.xy = r2.xy * -0.5 + 1;
	r3.xw = r2.xy * r2.xy;
	r3.xw = r3.xw * r3.xw;
	r2.xy = r2.xy * -r3.xw + 1;
	r1.w = r2.y * r2.x;
	r2.x = r1.w * 0.193754 + 0.5;
	r1.w = r1.w * 0.387508;
	r2.x = r2.x * r2.x + -r1.w;
	r1.w = hll_rate.x * r2.x + r1.w;
	r2.z = 2;
	r10 = r2.z + -g_specCalc1;
	r4.xyz = r10.xxx * point_light1.xyz;
	r4.xyz = r4.xyz * aniso_diff_rate.xxx;
	r4.xyz = r1.www * r4.xyz;
	r2.xyw = r2.www * r4.xyz;
	r2.xyw = r10.xxx * r2.xyw;
	r4.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r1.w = dot(r4.xyz, r4.xyz);
	r1.w = 1 / sqrt(r1.w);
	r4.xyz = r1.www * r4.xyz;
	r1.w = 1 / r1.w;
	r1.w = -r1.w + muzzle_lightpos.w;
	r1.w = r1.w * muzzle_light.w;
	r9.z = dot(r4.xyz, r6.xyz);
	r3.x = dot(lightpos.xyz, r6.xyz);
	r9.w = r7.w;
	r4.xy = r9.zw;
	r4.xy = r4.xy * -0.5 + 1;
	r5.yz = r4.xy * r4.xy;
	r5.yz = r5.yz * r5.yz;
	r4.xy = r4.xy * -r5.yz + 1;
	r3.w = r4.y * r4.x;
	r4.x = r3.w * 0.193754 + 0.5;
	r3.w = r3.w * 0.387508;
	r4.x = r4.x * r4.x + -r3.w;
	r3.w = hll_rate.x * r4.x + r3.w;
	r4.x = aniso_diff_rate.x;
	r5.yzw = r4.xxx * muzzle_light.xyz;
	r5.yzw = r3.www * r5.yzw;
	r2.xyw = r5.yzw * r1.www + r2.xyw;
	r4.yz = r7.yw;
	r4.yz = r4.yz * -0.5 + 1;
	r5.yz = r4.yz * r4.yz;
	r5.yz = r5.yz * r5.yz;
	r4.yz = r4.yz * -r5.yz + 1;
	r1.w = r4.z * r4.y;
	r3.w = r1.w * 0.193754 + 0.5;
	r1.w = r1.w * 0.387508;
	r3.w = r3.w * r3.w + -r1.w;
	r1.w = hll_rate.x * r3.w + r1.w;
	r5.yzw = r10.yyy * point_light2.xyz;
	r5.yzw = r5.yzw * aniso_diff_rate.xxx;
	r5.yzw = r1.www * r5.yzw;
	r4.yzw = r4.www * r5.yzw;
	r2.xyw = r4.yzw * r10.yyy + r2.xyw;
	r1.w = r3.x;
	r4.yzw = spot_angle.xyz + -i.texcoord1.xyz;
	r3.w = dot(r4.yzw, r4.yzw);
	r3.w = 1 / sqrt(r3.w);
	r4.yzw = r3.www * r4.yzw;
	r3.w = 1 / r3.w;
	r4.y = dot(r4.yzw, lightpos.xyz);
	r4.y = r4.y + -spot_param.x;
	r5.y = max(r4.y, 0);
	r4.z = frac(-r5.y);
	r4.z = r4.z + r5.y;
	r4.z = r1.w * r4.z;
	r3.y = r3.y + -spot_param.x;
	r3.y = 1 / r3.y;
	r3.y = r3.y * r4.y;
	r4.y = 1 / spot_param.y;
	r3.y = r3.y * r4.y;
	r3.y = r3.y * r4.z;
	r4.y = 1 / spot_angle.w;
	r3.w = r3.w * r4.y;
	r3.w = -r3.w + 1;
	r3.w = r3.w * 10;
	r3.y = r3.w * r3.y;
	r7.x = lerp(r3.y, r1.w, spot_param.z);
	r3.yw = r0.ww * r7.xw;
	r3.yw = r3.yw * -0.5 + 1;
	r4.yz = r3.yw * r3.yw;
	r4.yz = r4.yz * r4.yz;
	r3.yw = r3.yw * -r4.yz + 1;
	r0.w = r3.w * r3.y;
	r1.w = r0.w * 0.193754 + 0.5;
	r0.w = r0.w * 0.387508;
	r1.w = r1.w * r1.w + -r0.w;
	r0.w = hll_rate.x * r1.w + r0.w;
	r4.xyz = r4.xxx * light_Color.xyz;
	r2.xyw = r4.xyz * r0.www + r2.xyw;
	r3.yw = r9.yw;
	r3.yw = r3.yw * -0.5 + 1;
	r4.xy = r3.yw * r3.yw;
	r4.xy = r4.xy * r4.xy;
	r3.yw = r3.yw * -r4.xy + 1;
	r0.w = r3.w * r3.y;
	r1.w = r0.w * 0.193754 + 0.5;
	r0.w = r0.w * 0.387508;
	r1.w = r1.w * r1.w + -r0.w;
	r0.w = hll_rate.x * r1.w + r0.w;
	r4.xyz = r1.xyz * point_lightEv0.xyz;
	r4.xyz = r5.xxx * r4.xyz;
	r4.xyz = r10.zzz * r4.xyz;
	r4.xyz = r4.xyz * aniso_diff_rate.xxx;
	r4.xyz = r0.www * r4.xyz;
	r2.xyw = r1.xyz * r2.xyw + r4.xyz;
	r3.yw = r9.xw;
	r8.y = r9.w;
	r4.xy = r8.xy * -0.5 + 1;
	r3.yw = r3.yw * -0.5 + 1;
	r4.zw = r3.yw * r3.yw;
	r4.zw = r4.zw * r4.zw;
	r3.yw = r3.yw * -r4.zw + 1;
	r0.w = r3.w * r3.y;
	r1.w = r0.w * 0.193754 + 0.5;
	r0.w = r0.w * 0.387508;
	r1.w = r1.w * r1.w + -r0.w;
	r0.w = hll_rate.x * r1.w + r0.w;
	r5.xyz = r1.xyz * point_lightEv1.xyz;
	r5.xyz = r6.www * r5.xyz;
	r5.xyz = r10.www * r5.xyz;
	r5.xyz = r5.xyz * aniso_diff_rate.xxx;
	r2.xyw = r5.xyz * r0.www + r2.xyw;
	r3.yw = r4.xy * r4.xy;
	r3.yw = r3.yw * r3.yw;
	r3.yw = r4.xy * -r3.yw + 1;
	r0.w = r3.w * r3.y;
	r1.w = r0.w * 0.193754 + 0.5;
	r0.w = r0.w * 0.387508;
	r1.w = r1.w * r1.w + -r0.w;
	r0.w = hll_rate.x * r1.w + r0.w;
	r4.xyz = r1.xyz * point_lightEv2.xyz;
	r1.xyz = r1.xyz * ambient_rate.xyz;
	r1.xyz = r1.xyz * ambient_rate_rate.xyz;
	r3.yzw = r3.zzz * r4.xyz;
	r1.w = r2.z + -g_specCalc2.x;
	r3.yzw = r1.www * r3.yzw;
	r3.yzw = r3.yzw * aniso_diff_rate.xxx;
	r2.xyz = r3.yzw * r0.www + r2.xyw;
	r0.w = dot(lightpos.xyz, i.texcoord3.xyz);
	r0.w = -r0.w + r3.x;
	r0.w = r0.w + 1;
	r1.xyz = r1.xyz * r0.www + r2.xyz;
	r0.xyz = r0.xyz * i.color.xxx + r1.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord1.www * r0.xyz + fog.xyz;

	return o;
}
