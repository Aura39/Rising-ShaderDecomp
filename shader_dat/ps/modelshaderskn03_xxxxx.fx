sampler Color_1_sampler : register(s0);
sampler Shadow_Tex_sampler : register(s11);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap_sampler : register(s2);
float4 point_light1 : register(c63);
float4 point_lightpos1 : register(c64);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float ss_scat_pow : register(c45);
float ss_scat_rate : register(c43);
float4 tile : register(c48);
sampler tripleMask_sampler : register(s1);

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float3 r5;
	float3 r6;
	r0.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r0.w = dot(r0.xyz, r0.xyz);
	r0.w = 1 / sqrt(r0.w);
	r0.xyz = r0.www * r0.xyz;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightpos1.w;
	r0.w = r0.w * point_light1.w;
	r1.xyz = i.texcoord3.xyz;
	r2.xyz = r1.yzx * i.texcoord2.zxy;
	r1.xyz = i.texcoord2.yzx * r1.zxy + -r2.xyz;
	r2.xy = tile.xy;
	r2.xy = i.texcoord.xy * r2.xy + g_All_Offset.xy;
	r2 = tex2D(normalmap_sampler, r2);
	r2.xyz = r2.xyz + -0.5;
	r1.xyz = r1.xyz * -r2.yyy;
	r1.w = r2.x * i.texcoord2.w;
	r1.xyz = r1.www * i.texcoord2.xyz + r1.xyz;
	r1.xyz = r2.zzz * i.texcoord3.xyz + r1.xyz;
	r1.w = dot(r1.xyz, r1.xyz);
	r1.w = 1 / sqrt(r1.w);
	r2.xyz = r1.www * r1.xyz;
	r1.x = r1.z * -r1.w + 1;
	r0.x = dot(r0.xyz, r2.xyz);
	r0.xyz = r0.xxx * point_light1.xyz;
	r0.xyz = r0.www * r0.xyz;
	r1.yzw = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r0.w = dot(r1.yzw, r1.yzw);
	r0.w = 1 / sqrt(r0.w);
	r1.yzw = r0.www * r1.yzw;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + muzzle_lightpos.w;
	r0.w = r0.w * muzzle_light.w;
	r1.y = dot(r1.yzw, r2.xyz);
	r1.yzw = r1.yyy * muzzle_light.xyz;
	r0.xyz = r1.yzw * r0.www + r0.xyz;
	r0.w = 1 / i.texcoord7.w;
	r1.yz = r0.ww * i.texcoord7.xy;
	r1.yz = r1.yz * float2(-0.5, 0.5) + 0.5;
	r1.yz = r1.yz + g_TargetUvParam.xy;
	r3 = tex2D(Shadow_Tex_sampler, r1.yzzw);
	r0.w = r3.z + g_ShadowUse.x;
	r1.y = dot(lightpos.xyz, r2.xyz);
	r1.z = r1.y;
	r3.xyz = r1.zzz * light_Color.xyz;
	r0.xyz = r3.xyz * r0.www + r0.xyz;
	r3.xy = g_All_Offset.xy + i.texcoord.xy;
	r3 = tex2D(Color_1_sampler, r3);
	r4.xy = -r3.yy + r3.xz;
	r1.w = max(abs(r4.x), abs(r4.y));
	r1.w = r1.w + -0.015625;
	r2.w = (-r1.w >= 0) ? 0 : 1;
	r1.w = (r1.w >= 0) ? -0 : -1;
	r1.w = r1.w + r2.w;
	r1.w = (r1.w >= 0) ? -r1.w : -0;
	r3.xz = (r1.ww >= 0) ? r3.yy : r3.xz;
	r1.w = r1.z + -0.5;
	r2.w = max(r1.w, 0);
	r4.xy = tile.xy * i.texcoord.xy;
	r4 = tex2D(tripleMask_sampler, r4);
	r1.w = r2.w + r4.x;
	r5.xyz = r1.www * r3.xyz;
	r0.xyz = r0.xyz * r5.xyz;
	r0.xyz = r4.www * r0.xyz;
	r2.w = dot(lightpos.xyz, i.texcoord3.xyz);
	r1.y = r1.y + -r2.w;
	r1.y = r1.y + 1;
	r4.xyw = r3.xyz * r4.xxx;
	r3.xyz = r3.xyz + specularParam.www;
	r5.xyz = r4.xyw * ambient_rate.xyz;
	r4.xyw = r1.xxx * r4.xyw;
	r1.x = r1.x + -ss_scat_rate.x;
	r4.xyw = r4.xyw * ss_scat_pow.xxx;
	r5.xyz = r5.xyz * ambient_rate_rate.xyz;
	r0.xyz = r5.xyz * r1.yyy + r0.xyz;
	r1.y = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r1.y = 1 / sqrt(r1.y);
	r5.xyz = -i.texcoord1.xyz * r1.yyy + lightpos.xyz;
	r6.xyz = normalize(r5.xyz);
	r1.y = dot(r6.xyz, r2.xyz);
	r2.x = pow(r1.y, specularParam.z);
	r2.y = (-r1.z >= 0) ? 0 : 1;
	r1.z = r1.z * r2.y;
	r1.y = (-r1.y >= 0) ? 0 : r2.y;
	r1.y = r2.x * r1.y;
	r2.xyz = r1.zzz * light_Color.xyz;
	r2.xyz = r1.yyy * r2.xyz;
	r2.xyz = r4.zzz * r2.xyz;
	r2.xyz = r0.www * r2.xyz;
	r1.yzw = r1.www * r2.xyz;
	r0.w = abs(specularParam.x);
	r1.yzw = r0.www * r1.yzw;
	r0.xyz = r1.yzw * r3.xyz + r0.xyz;
	r1.y = 1;
	r0.w = r1.y + -ss_scat_rate.x;
	r0.w = 1 / r0.w;
	r0.w = r0.w * r1.x;
	r1.x = r1.x;
	r1.y = frac(-r1.x);
	r1.x = r1.y + r1.x;
	r0.w = r0.w * r1.x;
	r0.xyz = r4.xyw * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord1.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
