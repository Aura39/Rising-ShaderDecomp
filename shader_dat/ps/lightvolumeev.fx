sampler g_AlbedoSampler : register(s0);
float4 g_CameraParam : register(c193);
sampler g_NormalSampler : register(s1);
sampler g_NormalSampler2 : register(s8);
float4 g_PointLightCol : register(c185);
float4 g_PointLightPos : register(c184);
float4x4 g_Proj : register(c4);
sampler g_SignSampler : register(s7);
sampler g_SpecMaskSampler : register(s2);
sampler g_SpecPowSampler : register(s3);
float4 g_TargetUvParam : register(c194);
sampler g_ZSampler : register(s5);
float4 g_lightHosei : register(c174);
float4 g_lightHosei2 : register(c175);

float4 main(float4 texcoord : TEXCOORD) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	r0.x = 1 / texcoord.w;
	r0.xy = r0.xx * texcoord.xy;
	r1.xy = float2(0.5, -0.5);
	r0.xy = r0.xy * r1.xy + g_TargetUvParam.xy;
	r0.xy = r0.xy + 0.5;
	r1 = tex2D(g_SignSampler, r0);
	r2 = r1 + 0.5;
	r3 = frac(r2);
	r2 = r2 + -r3;
	r0.zw = r2.yw * float2(1.5, 4);
	r3 = -r1 + 1.5;
	r4 = frac(r3);
	r3 = r3 + -r4;
	r0.zw = r3.yw * 3 + r0.zw;
	r2.xy = r2.xz * 2 + r3.xz;
	r3 = frac(-r1);
	r1 = r1 + r3;
	r0.zw = r0.zw * r1.yw;
	r0.zw = r2.xy * r1.xz + r0.zw;
	r1 = r0.z + float4(-2, -3, -4, -1);
	r0.z = r0.w + -g_lightHosei2.y;
	r2 = r1.w;
	clip(r2);
	r3.xy = float2(-0.1, 0.9);
	r0.w = (g_lightHosei2.y >= 0) ? r3.x : r3.y;
	r3 = (-abs(r0.z) >= 0) ? 0.9 : r0.w;
	clip(r3);
	r0.z = 1 / transpose(g_Proj)[0].x;
	r0.w = r0.x * 2 + -1;
	r3 = tex2D(g_ZSampler, r0);
	r1.w = r3.x * g_CameraParam.y + g_CameraParam.x;
	r0.w = r0.w * r1.w;
	r3.x = r0.z * r0.w;
	r0.z = r0.y * -2 + 1;
	r0.z = r1.w * r0.z;
	r3.z = -r1.w;
	r0.w = 1 / transpose(g_Proj)[1].y;
	r3.y = r0.w * r0.z;
	r0.z = dot(-r3.xyz, -r3.xyz);
	r0.z = 1 / sqrt(r0.z);
	r2.yzw = -r3.xyz + g_PointLightPos.xyz;
	r0.w = dot(r2.yzw, r2.yzw);
	r0.w = 1 / sqrt(r0.w);
	r2.yzw = r0.www * r2.yzw;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + g_PointLightPos.w;
	r3.xyz = -r3.xyz * r0.zzz + r2.yzw;
	r4.xyz = normalize(r3.xyz);
	r3 = tex2D(g_NormalSampler2, r0);
	r0.z = r3.y * 0.003921569 + r3.x;
	r3.y = r3.z * 1.53787E-05 + r0.z;
	r3.z = r3.w;
	r5 = tex2D(g_NormalSampler, r0);
	r0.z = r5.y * 0.003921569 + r5.x;
	r3.x = r5.z * 1.53787E-05 + r0.z;
	r3.xyz = r3.xyz * 2 + -1;
	r5.xyz = normalize(r3.xyz);
	r0.z = dot(r4.xyz, r5.xyz);
	r1.w = dot(r2.yzw, r5.xyz);
	r2.y = max(r0.z, 0);
	r0.z = -r2.y + 1;
	r3 = tex2D(g_SpecMaskSampler, r0);
	r4 = tex2D(g_AlbedoSampler, r0);
	r0.xy = r3.wz * float2(100, 5);
	r5.x = r0.z * -r0.x + r2.y;
	r0.z = r5.w + -0.495;
	r2.z = (-r0.z >= 0) ? 0 : 1;
	r0.z = (r0.z >= 0) ? -0 : -1;
	r0.z = r0.z + r2.z;
	r2.z = max(r0.z, 0);
	r0.z = r2.z * -0.5 + r5.w;
	r2.w = r0.z + -0.245;
	r3.x = (-r2.w >= 0) ? 0 : 1;
	r2.w = (r2.w >= 0) ? -0 : -1;
	r2.w = r2.w + r3.x;
	r3.x = max(r2.w, 0);
	r0.z = r3.x * -0.25 + r0.z;
	r3.xzw = r3.xxx + r4.xyz;
	r5.y = r0.z * 4;
	r5 = tex2D(g_SpecPowSampler, r5);
	r5.w = pow(r2.y, r0.x);
	r0.x = (-r1.w >= 0) ? 0 : 1;
	r0.z = (-r2.y >= 0) ? 0 : r0.x;
	r0.x = r1.w * r0.x;
	r0.z = r5.w * r0.z;
	r5.xyz = r0.xxx * -r0.zzz + r5.xyz;
	r0.x = r0.z * r0.x;
	r5.xyz = r3.yyy * r5.xyz + r0.xxx;
	r0.x = lerp(g_lightHosei.y, g_lightHosei.x, r2.x);
	r1.xyz = r1.xyz;
	r0.x = (-r1.x >= 0) ? r0.x : g_lightHosei.z;
	r0.x = (-r1.y >= 0) ? r0.x : g_lightHosei.w;
	r0.x = (-r1.z >= 0) ? r0.x : g_lightHosei2.x;
	r1.xyz = r0.xxx * g_PointLightCol.xyz;
	r1.xyz = r2.zzz * r1.xyz;
	r2.xyz = r5.xyz * r1.xyz;
	r1.xyz = r1.www * r1.xyz;
	r0.x = r1.w + -0.5;
	r1.w = max(r0.x, 0);
	r0.x = r1.w + r4.w;
	r2.xyz = r0.yyy * r2.xyz;
	r0.y = 1 / g_PointLightCol.w;
	r0.y = r0.y * r0.w;
	r2.xyz = r0.yyy * r2.xyz;
	r0.yzw = r0.yyy * r1.xyz;
	r1.xyz = r3.xzw * r2.xyz;
	r0.yzw = r4.xyz * r0.yzw + r1.xyz;
	o.xyz = r0.xxx * r0.yzw;
	o.w = 1;

	return o;
}
