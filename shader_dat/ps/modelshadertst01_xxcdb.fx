sampler A_Occ_sampler : register(s2);
sampler Color_1_sampler : register(s0);
sampler Color_2_sampler : register(s1);
float4 CubeParam : register(c42);
sampler Shadow_Tex_sampler : register(s11);
sampler Spec_Pow_sampler : register(s6);
float3 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c57);
sampler cubemap_mask_sampler : register(s5);
samplerCUBE cubemap_sampler : register(s3);
float4 diffuseParam : register(c44);
float4 g_All_Offset : register(c60);
float3 g_FogCol : register(c176);
float4 g_FogParam : register(c177);
float g_ShadowUse : register(c180);
float4 light_Color : register(c47);
float4 lightpos : register(c48);
float4 muzzle_light : register(c55);
float4 muzzle_lightpos : register(c56);
sampler normalmap_sampler : register(s4);
float4 point_light1 : register(c49);
float4 point_light2 : register(c51);
float4 point_lightpos1 : register(c50);
float4 point_lightpos2 : register(c52);
float4 prefogcolor_enhance : register(c61);
float4 specularParam : register(c41);
float4 spot_angle : register(c58);
float4 spot_param : register(c59);
float4 tile : register(c43);

struct PS_IN
{
	float color : COLOR;
	float4 texcoord : TEXCOORD;
	float4 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float3 texcoord5 : TEXCOORD5;
	float3 texcoord6 : TEXCOORD6;
	float4 texcoord7 : TEXCOORD7;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r5;
	float4 r4;
	float4 r3;
	float4 r6;
	float3 r7;
	float3 r8;
	float3 r9;
	float2 r14;
	float3 r10;
	float2 r13;
	float2 r12;
	float3 r11;
	r0.xyz = -i.texcoord1.xyz + muzzle_lightpos.xyz;
	r0.w = dot(r0.xyz, r0.xyz);
	r1.w = 1 / sqrt(r0.w);
	r0.w = 1 / r1.w;
	r2.xyz = r0.xyz * r1.www;
	r0.z = -r0.w + muzzle_lightpos.w;
	r5.xyz = -i.texcoord1.xyz + point_lightpos1.xyz;
	r0.y = 1 / muzzle_light.w;
	r0.w = dot(r5.xyz, r5.xyz);
	r1.w = r0.z * r0.y;
	r4.w = 1 / sqrt(r0.w);
	r4.xyz = normalize(i.texcoord2.xyz);
	r3.xyz = normalize(i.texcoord3.xyz);
	r3.w = 1 / r4.w;
	r0.xyz = r4.zxy * r3.yzx;
	r6.xyz = r4.yzx * r3.zxy + -r0.xyz;
	r7.xy = g_All_Offset.xy;
	r0.xy = i.texcoord.xy * tile.xy + r7.xy;
	r0 = tex2D(normalmap_sampler, r0);
	r1.xyz = 2 * r0.xyz + -1;
	r0.xyz = r6.xyz * -r1.yyy;
	r2.w = r1.x * i.texcoord2.w;
	r8.xyz = r5.xyz * r4.www;
	r0.xyz = r2.www * r4.xyz + r0.xyz;
	r0.w = -r3.w + point_lightpos1.w;
	r0.xyz = r1.zzz * r3.xyz + r0.xyz;
	r1.x = 1 / point_light1.w;
	r9.xyz = normalize(r0.xyz);
	r6.x = r0.w * r1.x;
	r3.w = dot(r8.xyz, r9.xyz);
	r1.x = dot(lightpos.xyz, r3.xyz);
	r0.xyz = r3.www * point_light1.xyz;
	r3.xyz = r6.xxx * r0.xyz;
	r0.xyz = -i.texcoord1.xyz + point_lightpos2.xyz;
	r2.z = dot(r2.xyz, r9.xyz);
	r0.w = dot(r0.xyz, r0.xyz);
	r2.xyz = r2.zzz * muzzle_light.xyz;
	r4.w = 1 / sqrt(r0.w);
	r2.xyz = r2.xyz * r1.www + r3.xyz;
	r0.w = 1 / r4.w;
	r0.w = -r0.w + point_lightpos2.w;
	r1.w = 1 / point_light2.w;
	r0.xyz = r0.xyz * r4.www;
	r0.w = r0.w * r1.w;
	r3.z = dot(r0.xyz, r9.xyz);
	r1.w = 1 / i.texcoord7.w;
	r0.xyz = r3.zzz * point_light2.xyz;
	r3.xy = r1.ww * i.texcoord7.xy;
	r1.w = max(r3.w, r3.z);
	r4.xy = r3.xy * float2(0.5, -0.5) + 0.5;
	r3.xyz = r0.xyz * r0.www + r2.xyz;
	r0.xy = r4.xy + float2(0.00048828125, 0.00069444446);
	r0 = tex2D(Shadow_Tex_sampler, r0);
	r2.xyz = -i.texcoord1.xyz + spot_angle.xyz;
	r0.w = dot(r2.xyz, r2.xyz);
	r0.x = 1 / sqrt(r0.w);
	r2.xyz = r2.xyz * r0.xxx;
	r0.w = dot(r2.xyz, lightpos.xyz);
	r0.y = r0.w + -spot_param.x;
	r2.z = max(r0.y, -0);
	r5.w = r0.z + g_ShadowUse.x;
	r0.w = frac(-r2.z);
	r3.w = 1 / r0.x;
	r0.z = r2.z + r0.w;
	r0.x = dot(lightpos.xyz, r9.xyz);
	r6.yzw = float3(2, -1, 1);
	r14.xy = r6.zz + -spot_param.xz;
	r0.w = r0.x;
	r2.z = 1 / r14.x;
	r0.y = r0.y * r2.z;
	r2.z = 1 / spot_param.y;
	r0.z = r0.z * r0.w;
	r0.y = r0.y * r2.z;
	r4.w = -r1.x + r0.x;
	r1.x = r0.z * r0.y;
	r4.z = 1 / spot_angle.w;
	r0.xyz = i.texcoord4.xyz;
	r2.xyz = r0.zxy * i.texcoord5.yzx;
	r3.w = r3.w * r4.z;
	r0.xyz = r0.yzx * i.texcoord5.zxy + -r2.xyz;
	r2.z = -r3.w + 1;
	r0.xyz = -r1.yyy * r0.xyz;
	r1.y = r2.z * 10;
	r0.xyz = r2.www * i.texcoord4.xyz + r0.xyz;
	r3.w = r1.x * r1.y;
	r0.xyz = r1.zzz * i.texcoord5.xyz + r0.xyz;
	r1.y = r3.w * spot_param.z;
	r1.z = dot(i.texcoord6.xyz, r0.xyz);
	r0.w = r0.w * r14.y + r1.y;
	r1.z = r1.z + r1.z;
	r2.xyz = r0.www * light_Color.xyz;
	r0.xyz = r0.xyz * -r1.zzz + i.texcoord6.xyz;
	r5.z = max(r1.w, r0.w);
	r0.w = -r0.z;
	r1 = tex2D(cubemap_sampler, r0.xyww);
	r0.xy = i.texcoord.xy * tile.zw + r7.xy;
	r0 = tex2D(Color_2_sampler, r0);
	r0.w = r0.w * r0.w;
	r4.z = r0.w * -i.color.x + 1;
	r7.xyz = r2.xyz * r5.www + r3.xyz;
	r1 = r1 * r4.z;
	r1.w = r1.w * r1.w;
	r0.w = r0.w * i.color.x;
	r1 = r1 * ambient_rate_rate.w;
	r3.xyz = r0.xyz * r0.www;
	r0.xy = i.texcoord.xy + g_All_Offset.xy;
	r2 = tex2D(Color_1_sampler, r0);
	r0 = tex2D(cubemap_mask_sampler, r0);
	r4.xyz = r4.zzz * r2.xyz + r3.xyz;
	r2.xyz = r1.xyz * r4.xyz;
	r3.xy = r6.yy + CubeParam.yx;
	r10.xyz = r1.www * r2.xyz;
	r13.xy = max(r3.xy, -0);
	r0.w = r5.z + -0.5;
	r2.xy = i.texcoord.zw + g_All_Offset.xy;
	r2 = tex2D(A_Occ_sampler, r2);
	r12.xy = CubeParam.yx;
	r3.xyz = r0.www + r2.xyz;
	r11.xyz = r1.xyz * r12.xxx;
	r5.xyz = r4.xyz * r3.xyz;
	r11.xyz = r0.xyz * r11.xyz;
	r10.xyz = r10.xyz * r13.xxx;
	r11.xyz = r5.xyz * r11.xyz;
	r5.xyz = r5.xyz;
	r10.xyz = r10.xyz * r0.xyz + r11.xyz;
	r2.xyz = r4.xyz * r2.xyz;
	r5.xyz = r5.xyz * r7.xyz + r10.xyz;
	r7.xyz = r5.xyz * diffuseParam.xyz;
	r2.xyz = r2.xyz * ambient_rate.xyz;
	r5.xyz = r2.xyz * ambient_rate_rate.xyz;
	r0.w = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r2.w = frac(-r3.w);
	r0.w = 1 / sqrt(r0.w);
	r2.w = r3.w + r2.w;
	r8.xyz = -i.texcoord1.xyz * r0.www + r8.xyz;
	r3.w = r2.w * spot_param.z + r14.y;
	r2.xyz = normalize(r8.xyz);
	r10.xyz = -i.texcoord1.xyz * r0.www + lightpos.xyz;
	r2.w = dot(r2.xyz, r9.xyz);
	r0.w = max(r2.w, -0);
	r2.w = r6.z + -specularParam.z;
	r0.w = r0.w + -specularParam.z;
	r6.y = 1 / r2.w;
	r2.x = r0.w * r6.y;
	r2.y = specularParam.y;
	r2 = tex2D(Spec_Pow_sampler, r2);
	r8.xyz = normalize(r10.xyz);
	r2.w = dot(r8.xyz, r9.xyz);
	r0.w = max(r2.w, -0);
	r8.xyz = r2.xyz * point_light1.xyz;
	r0.w = r0.w + -specularParam.z;
	r2.x = r6.y * r0.w;
	r2.y = specularParam.y;
	r2 = tex2D(Spec_Pow_sampler, r2);
	r2.xyz = r2.xyz * light_Color.xyz;
	r8.xyz = r6.xxx * r8.xyz;
	r2.xyz = r0.xyz * r2.xyz;
	r8.xyz = r0.xyz * r8.xyz;
	r2.xyz = r5.www * r2.xyz;
	r0.w = r4.w + 1;
	r2.xyz = r2.xyz * r3.www + r8.xyz;
	r5.xyz = r5.xyz * r0.www + r7.xyz;
	r2.xyz = r2.xyz * light_Color.www;
	r2.xyz = r3.xyz * r2.xyz;
	r0.w = specularParam.x;
	r0.w = r0.w * 5;
	r2.xyz = r2.xyz * abs(r0.www);
	r0.w = (specularParam.x >= 0) ? r6.w : r6.z;
	r2.w = (-specularParam.x >= 0) ? r6.w : r6.z;
	r6.xyz = r1.www * r1.xyz;
	r0.w = r0.w + -r2.w;
	r6.xyz = r13.yyy * r6.xyz;
	r4.xyz = r4.xyz + r0.www;
	r1.xyz = r1.xyz * r12.yyy + r6.xyz;
	r2.xyz = r2.xyz * r4.xyz + r5.xyz;
	r1.xyz = r3.xyz * r1.xyz;
	r0.xyz = r1.xyz * r0.xyz + r2.xyz;
	r1.xyz = g_FogCol.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	r0.w = g_FogParam.y * -i.texcoord1.w + g_FogParam.x;
	r1.xyz = r0.www * r0.xyz + g_FogCol.xyz;
	r0.x = log2(r1.x);
	r0.y = log2(r1.y);
	r0.z = log2(r1.z);
	r0.xyz = r0.xyz * 0.41666666;
	r0.x = exp2(r0.x);
	r0.y = exp2(r0.y);
	r0.z = exp2(r0.z);
	r2.xyz = r0.xyz * 1.055 + -0.055;
	r0.xyz = -r1.xyz + 0.0031308;
	r1.xyz = r1.xyz * 12.92;
	o.xyz = (r0.xyz >= 0) ? r1.xyz : r2.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
