sampler A_Occ_sampler : register(s2);
sampler Color_1_sampler : register(s0);
sampler Color_2_sampler : register(s1);
float4 CubeParam : register(c42);
sampler Shadow_Tex_sampler : register(s11);
float4 ambient_rate : register(c40);
float4 ambient_rate_rate : register(c71);
samplerCUBE cubemap_sampler : register(s3);
float3 fog : register(c67);
float4 g_All_Offset : register(c76);
float g_ShadowUse : register(c180);
float4 g_TargetUvParam : register(c194);
float4 light_Color : register(c61);
float4 lightpos : register(c62);
float4 muzzle_light : register(c69);
float4 muzzle_lightpos : register(c70);
sampler normalmap_sampler : register(s4);
float4 point_light1 : register(c63);
float4 point_lightpos1 : register(c64);
float4 prefogcolor_enhance : register(c77);
float4 specularParam : register(c41);
float4 tile : register(c43);
float4x4 viewInverseMatrix : register(c12);

struct PS_IN
{
	float4 color : COLOR;
	float4 texcoord : TEXCOORD;
	float3 texcoord1 : TEXCOORD1;
	float4 texcoord2 : TEXCOORD2;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
	float4 texcoord8 : TEXCOORD8;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float3 r4;
	float3 r5;
	float4 r6;
	float3 r7;
	float4 r8;
	float3 r9;
	r0 = g_All_Offset.xyxy + i.texcoord.zwxy;
	r1 = tex2D(Color_1_sampler, r0.zwzw);
	r0 = tex2D(A_Occ_sampler, r0);
	r2.xy = -r1.yy + r1.xz;
	r0.w = max(abs(r2.x), abs(r2.y));
	r0.w = r0.w + -0.015625;
	r2.x = (-r0.w >= 0) ? 0 : 1;
	r0.w = (r0.w >= 0) ? -0 : -1;
	r0.w = r0.w + r2.x;
	r0.w = (r0.w >= 0) ? -r0.w : -0;
	r1.xz = (r0.ww >= 0) ? r1.yy : r1.xz;
	r2.xy = g_All_Offset.xy;
	r2 = i.texcoord.xyxy * tile + r2.xyxy;
	r3 = tex2D(Color_2_sampler, r2.zwzw);
	r2 = tex2D(normalmap_sampler, r2);
	r2.xyz = r2.xyz + -0.5;
	r4.xy = -r3.yy + r3.xz;
	r0.w = max(abs(r4.x), abs(r4.y));
	r0.w = r0.w + -0.015625;
	r2.w = (-r0.w >= 0) ? 0 : 1;
	r0.w = (r0.w >= 0) ? -0 : -1;
	r0.w = r0.w + r2.w;
	r0.w = (r0.w >= 0) ? -r0.w : -0;
	r3.xz = (r0.ww >= 0) ? r3.yy : r3.xz;
	r0.w = r3.w * i.color.w;
	r2.w = r3.w * -i.color.w + 1;
	r4.xyz = lerp(r3.xyz, r1.xyz, r0.www);
	r1.xyz = r4.xyz * i.color.xyz;
	r3.xyz = r4.xyz * i.color.xyz + specularParam.www;
	r4.xy = -r0.yy + r0.xz;
	r0.w = max(abs(r4.x), abs(r4.y));
	r0.w = r0.w + -0.015625;
	r3.w = (-r0.w >= 0) ? 0 : 1;
	r0.w = (r0.w >= 0) ? -0 : -1;
	r0.w = r0.w + r3.w;
	r0.w = (r0.w >= 0) ? -r0.w : -0;
	r0.xz = (r0.ww >= 0) ? r0.yy : r0.xz;
	r4.xyz = r0.xyz * r1.xyz;
	r4.xyz = r4.xyz * ambient_rate.xyz;
	r4.xyz = r4.xyz * ambient_rate_rate.xyz;
	r5.xyz = i.texcoord3.xyz;
	r6.xyz = r5.yzx * i.texcoord2.zxy;
	r5.xyz = i.texcoord2.yzx * r5.zxy + -r6.xyz;
	r5.xyz = -r2.yyy * r5.xyz;
	r0.w = r2.x * i.texcoord2.w;
	r5.xyz = r0.www * i.texcoord2.xyz + r5.xyz;
	r2.xyz = r2.zzz * i.texcoord3.xyz + r5.xyz;
	r5.xyz = normalize(r2.xyz);
	r0.w = dot(lightpos.xyz, r5.xyz);
	r2.x = r0.w;
	r2.y = r2.x + -0.5;
	r3.w = max(r2.y, 0);
	r0.xyz = r0.xyz + r3.www;
	r6.xyz = r0.xyz * r1.xyz;
	r7.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r8.xyz = normalize(r7.xyz);
	r2.y = dot(r8.xyz, r5.xyz);
	r7.xyz = r2.yyy * point_light1.xyz;
	r7.xyz = r7.xyz * i.texcoord8.xxx;
	r8.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r9.xyz = normalize(r8.xyz);
	r2.y = dot(r9.xyz, r5.xyz);
	r8.xyz = r2.yyy * muzzle_light.xyz;
	r7.xyz = r8.xyz * i.texcoord8.zzz + r7.xyz;
	r2.y = 1 / i.texcoord7.w;
	r2.yz = r2.yy * i.texcoord7.xy;
	r2.yz = r2.yz * float2(-0.5, 0.5) + 0.5;
	r2.yz = r2.yz + g_TargetUvParam.xy;
	r8 = tex2D(Shadow_Tex_sampler, r2.yzzw);
	r2.y = r8.z + g_ShadowUse.x;
	r8.xyz = r2.xxx * light_Color.xyz;
	r7.xyz = r8.xyz * r2.yyy + r7.xyz;
	r6.xyz = r6.xyz * r7.xyz;
	r2.z = dot(lightpos.xyz, i.texcoord3.xyz);
	r0.w = r0.w + -r2.z;
	r0.w = r0.w + 1;
	r4.xyz = r4.xyz * r0.www + r6.xyz;
	r6.x = dot(r5.xyz, transpose(viewInverseMatrix)[0].xyz);
	r6.y = dot(r5.xyz, transpose(viewInverseMatrix)[1].xyz);
	r6.z = dot(r5.xyz, transpose(viewInverseMatrix)[2].xyz);
	r0.w = dot(i.texcoord4.xyz, r6.xyz);
	r0.w = r0.w + r0.w;
	r6.xyz = r6.xyz * -r0.www + i.texcoord4.xyz;
	r6.w = -r6.z;
	r6 = tex2D(cubemap_sampler, r6.xyww);
	r6 = r2.w * r6;
	r6 = r6 * ambient_rate_rate.w;
	r0.w = r6.w * CubeParam.y + CubeParam.x;
	r6.xyz = r1.www * r6.xyz;
	r6.xyz = r0.www * r6.xyz;
	r6.xyz = r0.xyz * r6.xyz;
	r1.xyz = r1.xyz * r6.xyz;
	r7.xyz = r1.xyz * CubeParam.zzz + r4.xyz;
	r1.xyz = r1.xyz * CubeParam.zzz;
	r1.xyz = r4.xyz * -r1.xyz + r7.xyz;
	r0.w = dot(-i.texcoord1.xyz, -i.texcoord1.xyz);
	r0.w = 1 / sqrt(r0.w);
	r4.xyz = -i.texcoord1.xyz * r0.www + lightpos.xyz;
	r7.xyz = normalize(r4.xyz);
	r0.w = dot(r7.xyz, r5.xyz);
	r2.z = pow(r0.w, specularParam.z);
	r2.w = (-r2.x >= 0) ? 0 : 1;
	r2.x = r2.x * r2.w;
	r0.w = (-r0.w >= 0) ? 0 : r2.w;
	r0.w = r2.z * r0.w;
	r2.xzw = r2.xxx * light_Color.xyz;
	r2.xzw = r0.www * r2.xzw;
	r2.xzw = r1.www * r2.xzw;
	r2.xyz = r2.yyy * r2.xzw;
	r0.xyz = r0.xyz * r2.xyz;
	r0.w = abs(specularParam.x);
	r0.xyz = r0.www * r0.xyz;
	r0.xyz = r0.xyz * r3.xyz + r1.xyz;
	r1.y = 1;
	r0.w = r1.y + -CubeParam.z;
	r0.xyz = r6.xyz * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord8.www * r0.xyz + fog.xyz;
	o.w = prefogcolor_enhance.w;

	return o;
}
